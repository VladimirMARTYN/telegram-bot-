#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤ Telegram –±–æ—Ç–µ
"""

import os
import json
import logging
from datetime import datetime, time
import pytz
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    env_file = '.env'
    if os.path.exists(env_file):
        print(f"‚úÖ –§–∞–π–ª {env_file} –Ω–∞–π–¥–µ–Ω")
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    if key == 'BOT_TOKEN':
                        print(f"   {key}: {value[:10]}...")
                    else:
                        print(f"   {key}: {value}")
    else:
        print(f"‚ùå –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN')
    admin_id = os.getenv('ADMIN_USER_ID')
    
    print(f"\n–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"   BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if bot_token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   ADMIN_USER_ID: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if admin_id else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

def check_data_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 40)
    
    files_to_check = [
        'notifications.json',
        'bot_settings.json', 
        'price_history.json'
    ]
    
    for filename in files_to_check:
        if os.path.exists(filename):
            file_size = os.path.getsize(filename)
            print(f"‚úÖ {filename}: {file_size} –±–∞–π—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if filename == 'bot_settings.json':
                try:
                    with open(filename, 'r', encoding='utf-8') as f:
                        settings = json.load(f)
                    print(f"   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            if filename == 'notifications.json':
                try:
                    with open(filename, 'r', encoding='utf-8') as f:
                        notifications = json.load(f)
                    active_subscribers = sum(1 for data in notifications.values() 
                                           if data.get('subscribed', False))
                    daily_subscribers = sum(1 for data in notifications.values() 
                                          if data.get('subscribed', False) and data.get('daily_summary', True))
                    print(f"   –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(notifications)}")
                    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_subscribers}")
                    print(f"   –ù–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É: {daily_subscribers}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        else:
            print(f"‚ùå {filename}: –Ω–µ –Ω–∞–π–¥–µ–Ω")

def check_timezone():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    print("\nüïê –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:")
    print("-" * 40)
    
    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_moscow = datetime.now(moscow_tz)
        current_utc = datetime.now(pytz.UTC)
        
        print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: {current_utc.strftime('%H:%M:%S %d.%m.%Y')}")
        print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {current_moscow.strftime('%H:%M:%S %d.%m.%Y')}")
        print(f"–†–∞–∑–Ω–∏—Ü–∞ —Å UTC: {moscow_tz.utcoffset(current_moscow)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        if os.path.exists('bot_settings.json'):
            with open('bot_settings.json', 'r', encoding='utf-8') as f:
                settings = json.load(f)
            
            daily_time_str = settings.get('daily_summary_time', '09:00')
            print(f"\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏:")
            print(f"   –í—Ä–µ–º—è: {daily_time_str} –ú–°–ö")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            hour, minute = map(int, daily_time_str.split(':'))
            next_run = current_moscow.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            if current_moscow.hour > hour or (current_moscow.hour == hour and current_moscow.minute >= minute):
                from datetime import timedelta
                next_run = next_run + timedelta(days=1)
            
            time_until = next_run - current_moscow
            hours_until = int(time_until.total_seconds() // 3600)
            minutes_until = int((time_until.total_seconds() % 3600) // 60)
            
            print(f"   –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run.strftime('%H:%M %d.%m.%Y')}")
            print(f"   –î–æ –∑–∞–ø—É—Å–∫–∞: {hours_until}—á {minutes_until}–º–∏–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    print("-" * 40)
    
    dependencies = [
        'telegram',
        'pytz',
        'requests',
        'aiohttp',
        'schedule'
    ]
    
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ùå {dep} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è Telegram –±–æ—Ç–∞")
    print("=" * 60)
    
    check_environment()
    check_data_files()
    check_timezone()
    check_dependencies()
    
    print("\n" + "=" * 60)
    print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç BOT_TOKEN –∏ ADMIN_USER_ID")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
    print("5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_daily –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")

if __name__ == '__main__':
    main() 