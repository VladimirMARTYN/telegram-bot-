#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API
–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–ª—é—á–∏, —á—Ç–æ –≤ API_KEYS_SETUP.md
"""

import requests
import json
import asyncio
import aiohttp
import os

# API –∫–ª—é—á–∏ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ API_KEYS_SETUP.md
METALPRICEAPI_KEY = "0ffbfc712d62b83c3b468dc8825d5996"
API_NINJAS_KEY = "Tw5FaoqA8cwozmB1LwwpPg==iAh7DmlllQsEdCP2" 
FMP_API_KEY = "nDUH3x20LtRAXJbWegUsDmBn0tyGvBxv"
ALPHA_VANTAGE_KEY = "HI5HFCXVYJDLEKIC"

def test_metalpriceapi():
    """–¢–µ—Å—Ç MetalpriceAPI –¥–ª—è –∑–æ–ª–æ—Ç–∞ –∏ —Å–µ—Ä–µ–±—Ä–∞"""
    print("ü•á === –¢–ï–°–¢ METALPRICEAPI ===")
    try:
        url = f"https://api.metalpriceapi.com/v1/latest?access_key={METALPRICEAPI_KEY}&base=USD&symbols=XAU,XAG"
        print(f"URL: {url}")
        
        response = requests.get(url, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(data, indent=2)}")
            
            if 'rates' in data:
                rates = data['rates']
                print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã: {list(rates.keys())}")
                
                # –ó–æ–ª–æ—Ç–æ
                if 'USDXAU' in rates:
                    gold_price = 1 / rates['USDXAU']
                    print(f"‚úÖ –ó–æ–ª–æ—Ç–æ: ${gold_price:.2f}")
                else:
                    print("‚ùå USDXAU –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –°–µ—Ä–µ–±—Ä–æ
                if 'USDXAG' in rates:
                    silver_price = 1 / rates['USDXAG']
                    print(f"‚úÖ –°–µ—Ä–µ–±—Ä–æ: ${silver_price:.2f}")
                else:
                    print("‚ùå USDXAG –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå 'rates' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print()

def test_api_ninjas():
    """–¢–µ—Å—Ç API Ninjas –¥–ª—è –Ω–µ—Ñ—Ç–∏"""
    print("üõ¢Ô∏è === –¢–ï–°–¢ API NINJAS ===")
    try:
        url = "https://api.api-ninjas.com/v1/commodityprice?name=brent_crude_oil"
        headers = {'X-Api-Key': API_NINJAS_KEY}
        print(f"URL: {url}")
        print(f"Headers: {headers}")
        
        response = requests.get(url, headers=headers, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(data, indent=2)}")
            
            if 'price' in data:
                print(f"‚úÖ –ù–µ—Ñ—Ç—å Brent: ${data['price']:.2f}")
            else:
                print("‚ùå 'price' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print()

async def test_moex():
    """–¢–µ—Å—Ç MOEX –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤"""
    print("üìä === –¢–ï–°–¢ MOEX ===")
    try:
        async with aiohttp.ClientSession() as session:
            # IMOEX
            imoex_url = "https://iss.moex.com/iss/engines/stock/markets/index/securities/IMOEX.json"
            print(f"IMOEX URL: {imoex_url}")
            
            async with session.get(imoex_url) as resp:
                print(f"IMOEX —Å—Ç–∞—Ç—É—Å: {resp.status}")
                
                if resp.status == 200:
                    data = await resp.json()
                    print(f"IMOEX —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(data.keys()) if isinstance(data, dict) else '–Ω–µ dict'}")
                    
                    if 'marketdata' in data:
                        print(f"IMOEX marketdata –Ω–∞–π–¥–µ–Ω")
                        if 'data' in data['marketdata'] and len(data['marketdata']['data']) > 0:
                            print(f"IMOEX –∫–æ–ª–æ–Ω–∫–∏: {data['marketdata']['columns']}")
                            print(f"IMOEX –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {data['marketdata']['data'][0]}")
                            
                            row_data = dict(zip(data['marketdata']['columns'], data['marketdata']['data'][0]))
                            if 'LAST' in row_data and row_data['LAST']:
                                print(f"‚úÖ IMOEX: {row_data['LAST']}")
                            else:
                                print(f"‚ùå IMOEX: –Ω–µ—Ç LAST –∏–ª–∏ –ø—É—Å—Ç–æ–π: {row_data.get('LAST')}")
                        else:
                            print("‚ùå IMOEX: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        print("‚ùå IMOEX: –Ω–µ—Ç marketdata")
                else:
                    text = await resp.text()
                    print(f"‚ùå IMOEX –æ—à–∏–±–∫–∞ {resp.status}: {text[:200]}...")
            
            # RTS  
            rts_url = "https://iss.moex.com/iss/engines/stock/markets/index/securities/RTSI.json"
            print(f"RTS URL: {rts_url}")
            
            async with session.get(rts_url) as resp:
                print(f"RTS —Å—Ç–∞—Ç—É—Å: {resp.status}")
                
                if resp.status == 200:
                    data = await resp.json()
                    print(f"RTS —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(data.keys()) if isinstance(data, dict) else '–Ω–µ dict'}")
                    
                    if 'marketdata' in data:
                        print(f"RTS marketdata –Ω–∞–π–¥–µ–Ω")
                        if 'data' in data['marketdata'] and len(data['marketdata']['data']) > 0:
                            print(f"RTS –∫–æ–ª–æ–Ω–∫–∏: {data['marketdata']['columns']}")
                            print(f"RTS –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {data['marketdata']['data'][0]}")
                            
                            row_data = dict(zip(data['marketdata']['columns'], data['marketdata']['data'][0]))
                            if 'LAST' in row_data and row_data['LAST']:
                                print(f"‚úÖ RTS: {row_data['LAST']}")
                            else:
                                print(f"‚ùå RTS: –Ω–µ—Ç LAST –∏–ª–∏ –ø—É—Å—Ç–æ–π: {row_data.get('LAST')}")
                        else:
                            print("‚ùå RTS: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    else:
                        print("‚ùå RTS: –Ω–µ—Ç marketdata")
                else:
                    text = await resp.text()
                    print(f"‚ùå RTS –æ—à–∏–±–∫–∞ {resp.status}: {text[:200]}...")
                    
    except Exception as e:
        print(f"‚ùå MOEX –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print()

def test_fmp():
    """–¢–µ—Å—Ç FMP –¥–ª—è S&P 500"""
    print("üìà === –¢–ï–°–¢ FMP ===")
    try:
        url = f"https://financialmodelingprep.com/api/v3/quote/%5EGSPC?apikey={FMP_API_KEY}"
        print(f"URL: {url}")
        
        response = requests.get(url, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"–û—Ç–≤–µ—Ç: {json.dumps(data, indent=2)}")
            
            if isinstance(data, list) and len(data) > 0:
                sp500_info = data[0]
                if 'price' in sp500_info:
                    print(f"‚úÖ S&P 500: {sp500_info['price']}")
                else:
                    print("‚ùå 'price' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—É—Å—Ç–æ–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print()

def test_coingecko():
    """–¢–µ—Å—Ç CoinGecko –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    print("üí∞ === –¢–ï–°–¢ COINGECKO ===")
    try:
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,the-open-network,ripple,cardano,solana,dogecoin&vs_currencies=usd"
        print(f"URL: {url}")
        
        response = requests.get(url, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {list(data.keys())}")
            
            for crypto, info in data.items():
                if 'usd' in info:
                    print(f"‚úÖ {crypto}: ${info['usd']}")
                else:
                    print(f"‚ùå {crypto}: –Ω–µ—Ç usd —Ü–µ–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    print()

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API ===")
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏\n")
    
    test_metalpriceapi()
    test_api_ninjas()
    await test_moex()
    test_fmp()
    test_coingecko()
    
    print("üéØ === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===")
    print("–ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π")
    print("2. –õ–∏–º–∏—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
    print("3. –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ API")
    print("4. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

if __name__ == "__main__":
    asyncio.run(main()) 