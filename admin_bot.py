import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN, OPENAI_API_KEY
import openai
import asyncio
from datetime import datetime

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
BOT_START_TIME = datetime.now()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
if OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY
    client = openai.OpenAI(api_key=OPENAI_API_KEY)
    CHATGPT_ENABLED = True
    logger.info("‚úÖ ChatGPT —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
else:
    CHATGPT_ENABLED = False
    logger.warning("‚ö†Ô∏è ChatGPT —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY")

# –¢–í–û–ô Telegram ID
ADMIN_USER_ID = 34331814  # –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT
CHATGPT_MODEL = "gpt-3.5-turbo"
MAX_TOKENS = 1000
MAX_REQUESTS_PER_USER = 10  # –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_requests = {}  # —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ OpenAI —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
AVAILABLE_MODELS = {
    # GPT-4 –º–æ–¥–µ–ª–∏ (—Å–∞–º—ã–µ —É–º–Ω—ã–µ)
    "gpt-4o": {
        "name": "GPT-4o",
        "description": "üöÄ –ù–æ–≤–µ–π—à–∞—è, –±—ã—Å—Ç—Ä–∞—è –∏ —É–º–Ω–∞—è –º–æ–¥–µ–ª—å",
        "cost": "$0.005/$0.015 –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤",
        "speed": "–ë—ã—Å—Ç—Ä–∞—è",
        "max_tokens": 4096
    },
    "gpt-4o-mini": {
        "name": "GPT-4o Mini", 
        "description": "‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏ –¥–µ—à–µ–≤–∞—è GPT-4 –º–æ–¥–µ–ª—å",
        "cost": "$0.00015/$0.0006 –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤",
        "speed": "–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è",
        "max_tokens": 16384
    },
    "gpt-4-turbo": {
        "name": "GPT-4 Turbo",
        "description": "üß† –ú–æ—â–Ω–∞—è GPT-4 —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
        "cost": "$0.01/$0.03 –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤", 
        "speed": "–°—Ä–µ–¥–Ω—è—è",
        "max_tokens": 4096
    },
    "gpt-4": {
        "name": "GPT-4",
        "description": "üéØ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è GPT-4 –º–æ–¥–µ–ª—å",
        "cost": "$0.03/$0.06 –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤",
        "speed": "–ú–µ–¥–ª–µ–Ω–Ω–∞—è",
        "max_tokens": 4096
    },
    
    # GPT-3.5 –º–æ–¥–µ–ª–∏ (–±—ã—Å—Ç—Ä—ã–µ –∏ –¥–µ—à–µ–≤—ã–µ)
    "gpt-3.5-turbo": {
        "name": "GPT-3.5 Turbo",
        "description": "üí® –ë—ã—Å—Ç—Ä–∞—è –∏ –¥–µ—à–µ–≤–∞—è –º–æ–¥–µ–ª—å",
        "cost": "$0.001/$0.002 –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤",
        "speed": "–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è", 
        "max_tokens": 4096
    },
    "gpt-3.5-turbo-16k": {
        "name": "GPT-3.5 Turbo 16K",
        "description": "üìö –ë–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤",
        "cost": "$0.003/$0.004 –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤",
        "speed": "–ë—ã—Å—Ç—Ä–∞—è",
        "max_tokens": 16384
    },
    
    # O1 –º–æ–¥–µ–ª–∏ (reasoning)
    "o1-preview": {
        "name": "O1 Preview",
        "description": "üî¨ –ú–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π",
        "cost": "$0.015/$0.06 –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤",
        "speed": "–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è",
        "max_tokens": 32768
    },
    "o1-mini": {
        "name": "O1 Mini", 
        "description": "ü§î –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π",
        "cost": "$0.003/$0.012 –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤",
        "speed": "–ú–µ–¥–ª–µ–Ω–Ω–∞—è",
        "max_tokens": 65536
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    chatgpt_status = "‚úÖ ChatGPT –∞–∫—Ç–∏–≤–µ–Ω" if CHATGPT_ENABLED else "‚ùå ChatGPT –æ—Ç–∫–ª—é—á–µ–Ω"
    
    await update.message.reply_html(
        f"ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å AI!</b>\n\n"
        f"üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ /ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT\n"
        f"‚Ä¢ /gpt [–≤–æ–ø—Ä–æ—Å] - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI\n"
        f"‚Ä¢ /my_id - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\n"
        f"‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n\n"
        f"üõ†Ô∏è <b>–£—Ç–∏–ª–∏—Ç—ã:</b>\n"
        f"‚Ä¢ /ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        f"‚Ä¢ /currency - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§\n"
        f"‚Ä¢ /uptime - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
        f"‚Ä¢ /notify [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É\n\n"
        f"üîß <b>–°—Ç–∞—Ç—É—Å:</b> {chatgpt_status}\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä:</b> /ai –ß—Ç–æ —Ç–∞–∫–æ–µ Python?"
    )

async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    await update.message.reply_text(f"–¢–≤–æ–π ID: {user_id}")

# ========== CHATGPT –§–£–ù–ö–¶–ò–ò ==========

async def check_user_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id == ADMIN_USER_ID:
        return True  # –∞–¥–º–∏–Ω—É –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
    
    current_count = user_requests.get(user_id, 0)
    return current_count < MAX_REQUESTS_PER_USER

async def increment_user_requests(user_id: int):
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id != ADMIN_USER_ID:
        user_requests[user_id] = user_requests.get(user_id, 0) + 1

async def ask_chatgpt(prompt: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ ChatGPT –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if CHATGPT_MODEL not in AVAILABLE_MODELS:
            return f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å {CHATGPT_MODEL}. –ò—Å–ø–æ–ª—å–∑—É–π /list_models"
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π
        model_info = AVAILABLE_MODELS[CHATGPT_MODEL]
        actual_max_tokens = min(MAX_TOKENS, model_info['max_tokens'])
        
        # O1 –º–æ–¥–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if CHATGPT_MODEL.startswith("o1"):
            response = await asyncio.to_thread(
                client.chat.completions.create,
                model=CHATGPT_MODEL,
                messages=[
                    {"role": "user", "content": f"–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ: {prompt}"}
                ],
                max_completion_tokens=actual_max_tokens
            )
        else:
            response = await asyncio.to_thread(
                client.chat.completions.create,
                model=CHATGPT_MODEL,
                messages=[
                    {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=actual_max_tokens,
                temperature=0.7
            )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        error_msg = str(e).lower()
        logger.error(f"–û—à–∏–±–∫–∞ ChatGPT API: {e}")
        
        # –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if "insufficient_quota" in error_msg or "quota" in error_msg:
            return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ OpenAI. –ü—Ä–æ–≤–µ—Ä—å –±–∞–ª–∞–Ω—Å –Ω–∞ platform.openai.com"
        elif "invalid_api_key" in error_msg:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI"
        elif "model_not_found" in error_msg:
            return f"‚ùå –ú–æ–¥–µ–ª—å {CHATGPT_MODEL} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /list_models"
        elif "rate_limit" in error_msg:
            return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ AI: {str(e)}"

async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /ai - –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –∫ ChatGPT"""
    if not CHATGPT_ENABLED:
        await update.message.reply_text("‚ùå ChatGPT —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å OPENAI_API_KEY.")
        return
    
    user_id = update.effective_user.id
    
    if not await check_user_limit(user_id):
        await update.message.reply_text(
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({MAX_REQUESTS_PER_USER})!\n"
            f"–¢–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã: {user_requests.get(user_id, 0)}"
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            "ü§ñ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ChatGPT!\n\n"
            "–ü—Ä–∏–º–µ—Ä: /ai –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É"
        )
        return
    
    question = " ".join(context.args)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await update.message.reply_text("ü§î –î—É–º–∞—é...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
    await increment_user_requests(user_id)
    answer = await ask_chatgpt(question)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {question}\n\nü§ñ <b>ChatGPT:</b>\n{answer}"
    
    if len(response) > 4000:  # –ª–∏–º–∏—Ç Telegram
        response = response[:3900] + "...\n\n‚ö†Ô∏è <i>–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω</i>"
    
    await update.message.reply_html(response)

async def gpt_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /gpt - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç ChatGPT"""
    if not CHATGPT_ENABLED:
        await update.message.reply_text("‚ùå ChatGPT —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return
    
    user_id = update.effective_user.id
    
    if not await check_user_limit(user_id):
        await update.message.reply_text(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({MAX_REQUESTS_PER_USER})!")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üß† –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT!\n\n"
            "–ü—Ä–∏–º–µ—Ä: /gpt –ù–∞–ø–∏—à–∏ –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è Python"
        )
        return
    
    question = " ".join(context.args)
    await update.message.reply_text("üß† –ì–æ—Ç–æ–≤–ª—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    detailed_prompt = f"–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
    
    await increment_user_requests(user_id)
    answer = await ask_chatgpt(detailed_prompt)
    
    response = f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {question}\n\nüß† <b>–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç:</b>\n{answer}"
    
    if len(response) > 4000:
        response = response[:3900] + "...\n\n‚ö†Ô∏è <i>–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω</i>"
    
    await update.message.reply_html(response)

async def reset_limits_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    user_requests.clear()
    await update.message.reply_text("‚úÖ –õ–∏–º–∏—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã!")

async def model_recommend(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    recommendations = """
üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏:</b>

üí∞ <b>–≠–∫–æ–Ω–æ–º–∏—è —Å—Ä–µ–¥—Å—Ç–≤:</b>
‚Ä¢ gpt-3.5-turbo - —Å–∞–º–∞—è –¥–µ—à–µ–≤–∞—è ($0.001)
‚Ä¢ gpt-4o-mini - –ª—É—á—à–∏–π –±–∞–ª–∞–Ω—Å —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ

‚ö° <b>–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:</b>
‚Ä¢ gpt-4o-mini - –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è GPT-4
‚Ä¢ gpt-3.5-turbo - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å

üß† <b>–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>
‚Ä¢ o1-preview - –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ o1-mini - –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è

üöÄ <b>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ gpt-4o - –Ω–æ–≤–µ–π—à–∞—è, –±—ã—Å—Ç—Ä–∞—è –∏ —É–º–Ω–∞—è
‚Ä¢ gpt-4-turbo - –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (128k —Ç–æ–∫–µ–Ω–æ–≤)

üìö <b>–î–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã:</b>
‚Ä¢ gpt-3.5-turbo-16k - –¥–µ—à–µ–≤–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
‚Ä¢ gpt-4-turbo - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç

üí° <b>–ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞:</b>
/quick_model 4o-mini - –ª—É—á—à–∏–π –±–∞–ª–∞–Ω—Å
/quick_model 4o - —Ç–æ–ø–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ  
/quick_model 35 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è
    """
    await update.message.reply_html(recommendations)

async def quick_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    global CHATGPT_MODEL
    
    if not context.args:
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω—ã
        quick_info = f"""
üöÄ <b>–ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏:</b>

<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>
/quick_model 4o - GPT-4o (–Ω–æ–≤–µ–π—à–∞—è)
/quick_model 4o-mini - GPT-4o Mini (–±—ã—Å—Ç—Ä–∞—è)
/quick_model 35 - GPT-3.5-turbo (–¥–µ—à–µ–≤–∞—è)
/quick_model 4 - GPT-4 (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è)

üîÑ <b>–¢–µ–∫—É—â–∞—è:</b> {CHATGPT_MODEL}
üí° <b>–í—Å–µ –º–æ–¥–µ–ª–∏:</b> /list_models
        """
        await update.message.reply_html(quick_info)
        return
    
    model_shortcuts = {
        "4o": "gpt-4o",
        "4o-mini": "gpt-4o-mini", 
        "35": "gpt-3.5-turbo",
        "4": "gpt-4",
        "4-turbo": "gpt-4-turbo",
        "o1": "o1-preview",
        "o1-mini": "o1-mini"
    }
    
    shortcut = context.args[0].lower()
    
    if shortcut not in model_shortcuts:
        await update.message.reply_text(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è—Ä–ª—ã–∫!\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {', '.join(model_shortcuts.keys())}"
        )
        return
    
    new_model = model_shortcuts[shortcut]
    old_model = CHATGPT_MODEL
    CHATGPT_MODEL = new_model
    
    model_info = AVAILABLE_MODELS[new_model]
    await update.message.reply_html(
        f"‚ö° <b>–ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏!</b>\n\n"
        f"üîÑ {old_model} ‚û°Ô∏è <b>{model_info['name']}</b>\n"
        f"üìù {model_info['description']}\n"
        f"üí∞ {model_info['cost']}"
    )

async def list_models(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ ChatGPT"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    models_info = "ü§ñ <b>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ OpenAI:</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º
    gpt4_models = {k: v for k, v in AVAILABLE_MODELS.items() if k.startswith("gpt-4")}
    gpt35_models = {k: v for k, v in AVAILABLE_MODELS.items() if k.startswith("gpt-3.5")}
    o1_models = {k: v for k, v in AVAILABLE_MODELS.items() if k.startswith("o1")}
    
    # GPT-4 –º–æ–¥–µ–ª–∏
    models_info += "üöÄ <b>GPT-4 –ú–æ–¥–µ–ª–∏:</b>\n"
    for model_id, info in gpt4_models.items():
        current_mark = "üü¢ " if model_id == CHATGPT_MODEL else ""
        models_info += f"{current_mark}‚Ä¢ <b>{info['name']}</b> ({model_id})\n"
        models_info += f"   {info['description']}\n"
        models_info += f"   üí∞ {info['cost']} | ‚ö° {info['speed']}\n\n"
    
    # GPT-3.5 –º–æ–¥–µ–ª–∏  
    models_info += "üí® <b>GPT-3.5 –ú–æ–¥–µ–ª–∏:</b>\n"
    for model_id, info in gpt35_models.items():
        current_mark = "üü¢ " if model_id == CHATGPT_MODEL else ""
        models_info += f"{current_mark}‚Ä¢ <b>{info['name']}</b> ({model_id})\n"
        models_info += f"   {info['description']}\n"
        models_info += f"   üí∞ {info['cost']} | ‚ö° {info['speed']}\n\n"
    
    # O1 –º–æ–¥–µ–ª–∏
    models_info += "üî¨ <b>O1 –ú–æ–¥–µ–ª–∏ (Reasoning):</b>\n"
    for model_id, info in o1_models.items():
        current_mark = "üü¢ " if model_id == CHATGPT_MODEL else ""
        models_info += f"{current_mark}‚Ä¢ <b>{info['name']}</b> ({model_id})\n"
        models_info += f"   {info['description']}\n"
        models_info += f"   üí∞ {info['cost']} | ‚ö° {info['speed']}\n\n"
    
    models_info += "üü¢ - <i>—Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å</i>\n"
    models_info += "üí° <b>–°–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏:</b> /chatgpt_settings model [–Ω–∞–∑–≤–∞–Ω–∏–µ]"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(models_info) > 4000:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
        parts = [models_info[i:i+3800] for i in range(0, len(models_info), 3800)]
        for i, part in enumerate(parts):
            if i == 0:
                await update.message.reply_html(part)
            else:
                await update.message.reply_html(f"<i>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...</i>\n\n{part}")
    else:
        await update.message.reply_html(models_info)

async def chatgpt_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    global MAX_REQUESTS_PER_USER, MAX_TOKENS, CHATGPT_MODEL
    
    if not context.args:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_model_info = AVAILABLE_MODELS.get(CHATGPT_MODEL, {})
        model_description = current_model_info.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å')
        model_cost = current_model_info.get('cost', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        settings_info = f"""
ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT:</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if CHATGPT_ENABLED else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
üîÑ <b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b> {CHATGPT_MODEL}
   {model_description}
   üí∞ {model_cost}
üéØ <b>–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤:</b> {MAX_TOKENS}
üë• <b>–õ–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {MAX_REQUESTS_PER_USER}

üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
/list_models - –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
/chatgpt_settings limit [—á–∏—Å–ª–æ] - –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤  
/chatgpt_settings tokens [—á–∏—Å–ª–æ] - –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤
/chatgpt_settings model [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/chatgpt_settings model gpt-4o
/chatgpt_settings limit 20
        """
        await update.message.reply_html(settings_info)
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ü—Ä–∏–º–µ—Ä: /chatgpt_settings limit 20")
        return
    
    setting = context.args[0].lower()
    value = context.args[1]
    
    try:
        if setting == "limit":
            MAX_REQUESTS_PER_USER = int(value)
            await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {MAX_REQUESTS_PER_USER} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        elif setting == "tokens":
            new_tokens = int(value)
            if new_tokens > 100000:
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤! –ú–∞–∫—Å–∏–º—É–º 100,000")
                return
            MAX_TOKENS = new_tokens
            await update.message.reply_text(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {MAX_TOKENS}")
        
        elif setting == "model":
            if value not in AVAILABLE_MODELS:
                available_list = ", ".join(AVAILABLE_MODELS.keys())
                await update.message.reply_text(
                    f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å!\n\n"
                    f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</b>\n{available_list}\n\n"
                    f"üí° –ò—Å–ø–æ–ª—å–∑—É–π /list_models –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                )
                return
            
            old_model = CHATGPT_MODEL
            CHATGPT_MODEL = value
            model_info = AVAILABLE_MODELS[value]
            
            await update.message.reply_html(
                f"‚úÖ <b>–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n"
                f"üîÑ <b>–ë—ã–ª–æ:</b> {old_model}\n"
                f"üöÄ <b>–°—Ç–∞–ª–æ:</b> {model_info['name']} ({value})\n"
                f"üìù {model_info['description']}\n"
                f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {model_info['cost']}\n"
                f"‚ö° <b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> {model_info['speed']}"
            )
        
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞! –î–æ—Å—Ç—É–ø–Ω–æ: limit, tokens, model")
    
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º.")

# ========== –ö–û–ù–ï–¶ CHATGPT –§–£–ù–ö–¶–ò–ô ==========

async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    chatgpt_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if CHATGPT_ENABLED else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    
    admin_commands = f"""
üîß <b>–ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´:</b>

<b>üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
/admin_help - –≠—Ç–æ –º–µ–Ω—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º

<b>ü§ñ ChatGPT —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {chatgpt_status}
/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT
/gpt [–≤–æ–ø—Ä–æ—Å] - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
/quick_model [—è—Ä–ª—ã–∫] - –ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏
/list_models - –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏  
/model_recommend - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É
/chatgpt_settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT
/reset_limits - –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<b>üõ†Ô∏è AI –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</b>
/add_feature [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ AI
/edit_feature [–∫–æ–º–∞–Ω–¥–∞] - [–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
/list_features - –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
/remove_feature [–∫–æ–º–∞–Ω–¥–∞] - –£–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
/generation_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

<b>ü§ñ –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫:</b>
/auto_fix [—Ñ—É–Ω–∫—Ü–∏—è] - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ChatGPT
/apply_fix [—Ñ—É–Ω–∫—Ü–∏—è] - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/show_diff [—Ñ—É–Ω–∫—Ü–∏—è] - –°—Ä–∞–≤–Ω–∏—Ç—å –∫–æ–¥ –¥–æ –∏ –ø–æ—Å–ª–µ
/cancel_fix [—Ñ—É–Ω–∫—Ü–∏—è] - –û—Ç–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

<b>üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</b>
/debug_status - –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/debug_errors - –û—Ç–ª–∞–¥–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
/uptime - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/system_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
/ping - –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
/currency - –¢–µ—Å—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/ai –û–±—ä—è—Å–Ω–∏ –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
/add_feature –∫—É—Ä—Å - –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∏ –µ–≤—Ä–æ –∫ —Ä—É–±–ª—é
/auto_fix currencybk - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ ChatGPT
/broadcast –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
    """
    await update.message.reply_html(admin_commands)

async def generate_function_code(description: str, command_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ ChatGPT"""
    system_prompt = """
–¢—ã –æ–ø—ã—Ç–Ω—ã–π Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Telegram –±–æ—Ç–æ–≤. –°–æ–∑–¥–∞–π –ø–æ–ª–µ–∑–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è Telegram –±–æ—Ç–∞.

–°–¢–†–û–ì–û –°–õ–ï–î–£–ô –≠–¢–û–ú–£ –§–û–†–ú–ê–¢–£:

```python
async def {command_name}_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    \"\"\"–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏\"\"\"
    # —Ç–≤–æ–π –∫–æ–¥ –∑–¥–µ—Å—å
    await update.message.reply_text("—Ç–≤–æ–π –æ—Ç–≤–µ—Ç")
```

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å async
2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π await –¥–ª—è Telegram –æ–ø–µ—Ä–∞—Ü–∏–π  
3. –ò—Å–ø–æ–ª—å–∑—É–π reply_text –∏–ª–∏ reply_html –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
4. –î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ try/except –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
5. –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –õ–Æ–ë–´–ï –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: requests, bs4, json, datetime, random, re, os, etc.
6. –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π requests –∏–ª–∏ aiohttp
7. –î–µ–ª–∞–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏
8. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–¥–æ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π

–ü—Ä–∏–º–µ—Ä—ã:
```python
async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    \"\"\"–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ\"\"\"
    import requests
    try:
        if context.args:
            city = " ".join(context.args)
            # –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–π API –ø–æ–≥–æ–¥—ã
            response = requests.get(f"http://wttr.in/{city}?format=3")
            await update.message.reply_text(f"üå§ {response.text}")
        else:
            await update.message.reply_text("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: /weather –ú–æ—Å–∫–≤–∞")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
```
"""

    user_prompt = f"""
–°–æ–∑–¥–∞–π –∫–æ–º–∞–Ω–¥—É /{command_name} –¥–ª—è Telegram –±–æ—Ç–∞.

–û–ø–∏—Å–∞–Ω–∏–µ: {description}

–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è {command_name}_command
"""

    try:
        response = await ask_chatgpt(f"{system_prompt}\n\n{user_prompt}")
        return response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {str(e)}"

def validate_generated_code(code: str) -> tuple[bool, str]:
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
    if 'async def' not in code:
        return False, "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å async —Ñ—É–Ω–∫—Ü–∏—é"
    
    if 'await update.message.reply' not in code:
        return False, "–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º - requests, API, —Ñ–∞–π–ª—ã, —á—Ç–æ —É–≥–æ–¥–Ω–æ!
    return True, "–ö–æ–¥ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É"

async def add_feature(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not CHATGPT_ENABLED:
        await update.message.reply_text("‚ùå ChatGPT –æ—Ç–∫–ª—é—á–µ–Ω. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "ü§ñ <b>AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π</b>\n\n"
            "–û–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>/add_feature [–Ω–∞–∑–≤–∞–Ω–∏–µ] - [–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ /add_feature –ø–æ–≥–æ–¥–∞ - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞\n"
            "‚Ä¢ /add_feature –∫—É—Ä—Å - —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç –¥–æ–ª–ª–∞—Ä/–µ–≤—Ä–æ –∫ —Ä—É–±–ª—é\n"
            "‚Ä¢ /add_feature –Ω–æ–≤–æ—Å—Ç–∏ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –†–æ—Å—Å–∏–∏\n"
            "‚Ä¢ /add_feature –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n"
            "‚Ä¢ /add_feature qr - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ /add_feature –ø–∞—Ä–æ–ª—å - —Å–æ–∑–¥–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å\n\n"
            "üí° –Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–æ–¥ —Å API –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á–µ—Ä–µ–∑ ChatGPT!",
            parse_mode='HTML'
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –æ–ø–∏—Å–∞–Ω–∏–µ
    args = " ".join(context.args)
    parts = args.split(' - ', 1)
    
    if len(parts) == 2:
        command_name, description = parts
        command_name = command_name.strip().lower()
        description = description.strip()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
        words = args.split()
        command_name = words[0].lower()
        description = " ".join(words[1:]) if len(words) > 1 else f"–§—É–Ω–∫—Ü–∏—è {command_name}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if command_name in dynamic_commands:
        await update.message.reply_text(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ /{command_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    await update.message.reply_text(
        f"üß† <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é...</b>\n\n"
        f"üìù <b>–ö–æ–º–∞–Ω–¥–∞:</b> /{command_name}\n"
        f"üí≠ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
        f"‚è≥ –°–æ–∑–¥–∞—é –∫–æ–¥ —á–µ—Ä–µ–∑ ChatGPT...",
        parse_mode='HTML'
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    generated_code = await generate_function_code(description, command_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–∞
    is_valid, validation_message = validate_generated_code(generated_code)
    
    if not is_valid:
        await update.message.reply_text(
            f"‚ùå <b>–ö–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!</b>\n\n"
            f"üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {validation_message}\n\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å.",
            parse_mode='HTML'
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        # –ò—â–µ–º –∫–æ–¥ –º–µ–∂–¥—É ```python –∏ ```
        if '```python' in generated_code:
            code_start = generated_code.find('```python') + 9
            code_end = generated_code.find('```', code_start)
            clean_code = generated_code[code_start:code_end].strip()
        elif '```' in generated_code:
            code_start = generated_code.find('```') + 3
            code_end = generated_code.find('```', code_start)
            clean_code = generated_code[code_start:code_end].strip()
        else:
            clean_code = generated_code.strip()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º Python
        local_vars = {
            'Update': Update,
            'ContextTypes': ContextTypes,
            'logger': logger
        }
        
        exec(clean_code, globals(), local_vars)
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        function_name = f"{command_name}_command"
        if function_name in local_vars:
            new_function = local_vars[function_name]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            dynamic_commands[command_name] = new_function
            dynamic_functions[command_name] = new_function
            dynamic_commands[command_name] = {
                'function': new_function,
                'description': description,
                'code': clean_code,
                'created_at': __import__('datetime').datetime.now().isoformat()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            generation_history.append({
                'command': command_name,
                'description': description,
                'success': True,
                'timestamp': __import__('datetime').datetime.now().isoformat()
            })
            
            await update.message.reply_html(
                f"‚úÖ <b>–§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üéâ <b>–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞:</b> /{command_name}\n"
                f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
                f"üîß <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:</b>\n"
                f"<code>{clean_code[:500]}{'...' if len(clean_code) > 500 else ''}</code>\n\n"
                f"üí° <b>–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b> /{command_name}\n"
                f"üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> /list_features"
            )
            
        else:
            raise ValueError("–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ")
    
    except Exception as e:
        error_msg = str(e)
        await update.message.reply_html(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞:</b>\n\n"
            f"üö´ {error_msg}\n\n"
            f"üîß <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:</b>\n"
            f"<code>{generated_code[:800]}{'...' if len(generated_code) > 800 else ''}</code>\n\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–∫—É
        generation_history.append({
            'command': command_name,
            'description': description, 
            'success': False,
            'error': error_msg,
            'timestamp': __import__('datetime').datetime.now().isoformat()
        })

async def list_features(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö AI —Ñ—É–Ω–∫—Ü–∏–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not dynamic_commands:
        await update.message.reply_text(
            "üìù <b>–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /add_feature –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö!",
            parse_mode='HTML'
        )
        return
    
    features_info = "ü§ñ <b>AI-—Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n\n"
    
    for cmd, info in dynamic_commands.items():
        features_info += f"‚Ä¢ <b>/{cmd}</b> - {info['description']}\n"
        features_info += f"  üìÖ {info['created_at'][:16]}\n\n"
    
    features_info += f"üìä <b>–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π:</b> {len(dynamic_commands)}\n"
    features_info += "üóë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> /remove_feature [–∫–æ–º–∞–Ω–¥–∞]"
    
    await update.message.reply_html(features_info)

async def remove_feature(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª–∏—Ç—å AI —Ñ—É–Ω–∫—Ü–∏—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!\n–ü—Ä–∏–º–µ—Ä: /remove_feature weather")
        return
    
    command_name = context.args[0].lower()
    
    if command_name not in dynamic_commands:
        await update.message.reply_text(f"‚ùå –§—É–Ω–∫—Ü–∏—è /{command_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    del dynamic_commands[command_name]
    if command_name in dynamic_functions:
        del dynamic_functions[command_name]
    
    await update.message.reply_text(
        f"‚úÖ –§—É–Ω–∫—Ü–∏—è /{command_name} —É–¥–∞–ª–µ–Ω–∞!\n"
        f"‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è."
    )

async def generation_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not generation_history:
        await update.message.reply_text("üìä –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –ø—É—Å—Ç–∞.")
        return
    
    successful = len([h for h in generation_history if h['success']])
    failed = len([h for h in generation_history if not h['success']])
    
    stats = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>

‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> {successful}
‚ùå <b>–û—à–∏–±–æ–∫:</b> {failed}
üìù <b>–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:</b> {len(generation_history)}
üéØ <b>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</b> {successful/(len(generation_history))*100:.1f}%

ü§ñ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:</b> {len(dynamic_commands)}

üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ø—ã—Ç–æ–∫:</b>
"""
    
    for entry in generation_history[-5:]:
        status = "‚úÖ" if entry['success'] else "‚ùå"
        stats += f"{status} /{entry['command']} - {entry['timestamp'][:16]}\n"
    
    await update.message.reply_html(stats)

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å ChatGPT
    total_ai_requests = sum(user_requests.values())
    active_ai_users = len([u for u in user_requests.values() if u > 0])
    chatgpt_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if CHATGPT_ENABLED else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
    current_model_info = AVAILABLE_MODELS.get(CHATGPT_MODEL, {})
    model_name = current_model_info.get('name', CHATGPT_MODEL)
    model_cost = current_model_info.get('cost', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    model_speed = current_model_info.get('speed', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    stats = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {len(user_data)}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç AI: {active_ai_users}

üîÑ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_requests}
‚Ä¢ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {total_ai_requests}

ü§ñ <b>ChatGPT:</b> {chatgpt_status}
‚Ä¢ –ú–æ–¥–µ–ª—å: {model_name} ({CHATGPT_MODEL})
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {model_cost}
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {model_speed}
‚Ä¢ –õ–∏–º–∏—Ç: {MAX_REQUESTS_PER_USER} –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {MAX_TOKENS}

‚è∞ <b>–°—Ç–∞—Ç—É—Å:</b> –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ

üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> /list_models | /quick_model
    """
    await update.message.reply_html(stats)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!\n–ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
        return
    
    message = " ".join(context.args)
    sent_count = 0
    
    # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for uid in user_data:
        try:
            await context.bot.send_message(chat_id=uid, text=f"üì¢ {message}")
            sent_count += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π.")

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_data = {}
total_requests = 0

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
dynamic_functions = {}
dynamic_commands = {}

# –ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
generation_history = []

# –ò—Å—Ç–æ—Ä–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
function_errors = {}

async def auto_fix(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ AI-—Ñ—É–Ω–∫—Ü–∏—è—Ö —á–µ—Ä–µ–∑ ChatGPT (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not CHATGPT_ENABLED:
        await update.message.reply_text("‚ùå ChatGPT –æ—Ç–∫–ª—é—á–µ–Ω. –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return
    
    if not context.args:
        if not function_errors:
            await update.message.reply_text(
                "‚ùå <b>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö!</b>\n\n"
                "üîç <b>–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π:</b>\n"
                "‚Ä¢ /debug_errors - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—à–∏–±–æ–∫\n"
                "‚Ä¢ /list_features - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
                "üí° <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É:</b>\n"
                "1. –í—ã–ø–æ–ª–Ω–∏ –ª—é–±—É—é AI-—Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–±–ª–µ–º–æ–π\n"
                "2. –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—à–µ—Ç—Å—è\n"
                "3. –ò—Å–ø–æ–ª—å–∑—É–π /auto_fix [–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ—É–Ω–∫—Ü–∏–∏]",
                parse_mode='HTML'
            )
            return
            
        error_list = "üîß <b>–§—É–Ω–∫—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏:</b>\n\n"
        for func_name, error_info in function_errors.items():
            error_list += f"‚Ä¢ <b>/{func_name}</b> - {error_info['error_type']}\n"
            error_list += f"  üìù {error_info['error_message'][:50]}{'...' if len(error_info['error_message']) > 50 else ''}\n"
            error_list += f"  ‚è∞ {error_info['timestamp'][:16]}\n\n"
        
        error_list += "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n<code>/auto_fix [–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ—É–Ω–∫—Ü–∏–∏]</code>\n\n"
        error_list += f"<b>–ü—Ä–∏–º–µ—Ä:</b> /auto_fix {list(function_errors.keys())[0] if function_errors else 'stocks'}"
        
        await update.message.reply_html(error_list)
        return
    
    function_name = context.args[0].lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if function_name not in dynamic_commands:
        await update.message.reply_text(f"‚ùå –§—É–Ω–∫—Ü–∏—è /{function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π /list_features –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    if function_name not in function_errors:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ /{function_name}!\n–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É.")
        return
    
    function_info = dynamic_commands[function_name]
    error_info = function_errors[function_name]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    fix_msg = await update.message.reply_html(
        f"üîß <b>–ê–í–¢–û–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò</b>\n\n"
        f"üìù <b>–§—É–Ω–∫—Ü–∏—è:</b> /{function_name}\n"
        f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_info['error_type']}\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:</b> {error_info['error_message'][:100]}{'...' if len(error_info['error_message']) > 100 else ''}\n\n"
        f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥ —á–µ—Ä–µ–∑ ChatGPT..."
    )
    
    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    diagnostic_prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ç–ª–∞–¥–∫–µ Python –∫–æ–¥–∞ –¥–ª—è Telegram –±–æ—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –∏—Å–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:

–§–£–ù–ö–¶–ò–Ø: {function_name}_command
–û–ü–ò–°–ê–ù–ò–ï: {function_info['description']}

–¢–ï–ö–£–©–ò–ô –ö–û–î:
```python
{function_info['code']}
```

–û–®–ò–ë–ö–ê:
–¢–∏–ø: {error_info['error_type']}
–°–æ–æ–±—â–µ–Ω–∏–µ: {error_info['error_message']}
–í—Ä–µ–º—è: {error_info['timestamp']}

–ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
2. –ò—Å–ø—Ä–∞–≤—å –∫–æ–¥, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
3. –£–ª—É—á—à–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
4. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –¢–û–ß–ù–û {function_name}_command
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ async def
- –ò—Å–ø–æ–ª—å–∑—É–π await –¥–ª—è Telegram –æ–ø–µ—Ä–∞—Ü–∏–π
- –î–æ–±–∞–≤—å try/except –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

```python
async def {function_name}_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
```

–ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!
"""
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        await fix_msg.edit_text(
            f"üîß <b>–ê–í–¢–û–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò</b>\n\n"
            f"üìù <b>–§—É–Ω–∫—Ü–∏—è:</b> /{function_name}\n"
            f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –Ω–∞ –∞–Ω–∞–ª–∏–∑ ChatGPT...\n"
            f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥...",
            parse_mode='HTML'
        )
        
        fixed_code = await ask_chatgpt(diagnostic_prompt)
        
        if "‚ùå –û—à–∏–±–∫–∞" in fixed_code or "–¢–∞–π–º–∞—É—Ç" in fixed_code:
            await fix_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!</b>\n\n{fixed_code}",
                parse_mode='HTML'
            )
            return
        
        await fix_msg.edit_text(
            f"üîß <b>–ê–í–¢–û–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò</b>\n\n"
            f"üìù <b>–§—É–Ω–∫—Ü–∏—è:</b> /{function_name}\n"
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥...",
            parse_mode='HTML'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
        is_valid, validation_message = validate_generated_code(fixed_code)
        if not is_valid:
            await fix_msg.edit_text(
                f"‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥!</b>\n\nüö´ {validation_message}",
                parse_mode='HTML'
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π –∫–æ–¥
        if '```python' in fixed_code:
            code_start = fixed_code.find('```python') + 9
            code_end = fixed_code.find('```', code_start)
            clean_fixed_code = fixed_code[code_start:code_end].strip()
        elif '```' in fixed_code:
            code_start = fixed_code.find('```') + 3
            code_end = fixed_code.find('```', code_start)
            clean_fixed_code = fixed_code[code_start:code_end].strip()
        else:
            clean_fixed_code = fixed_code.strip()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        result_message = f"""üîß <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê</b>

üìù <b>–§—É–Ω–∫—Ü–∏—è:</b> /{function_name}
‚ùå <b>–û—à–∏–±–∫–∞ –±—ã–ª–∞:</b> {error_info['error_type']}

üß© <b>–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î:</b>
<code>{clean_fixed_code[:800]}{'...' if len(clean_fixed_code) > 800 else ''}</code>

üîÑ <b>–ü–†–ò–ú–ï–ù–ò–¢–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø?</b>
‚Ä¢ /apply_fix {function_name} - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ /show_diff {function_name} - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–ª–∏—á–∏—è
‚Ä¢ /cancel_fix {function_name} - –æ—Ç–º–µ–Ω–∏—Ç—å

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ–Ω—è—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏!"""
        
        await fix_msg.edit_text(result_message, parse_mode='HTML')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        if 'pending_fixes' not in globals():
            global pending_fixes
            pending_fixes = {}
        
        pending_fixes[function_name] = {
            'fixed_code': clean_fixed_code,
            'original_error': error_info,
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        await fix_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n\n{str(e)}",
            parse_mode='HTML'
        )

async def apply_fix(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç auto_fix (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π!\n–ü—Ä–∏–º–µ—Ä: /apply_fix currencybk")
        return
    
    function_name = context.args[0].lower()
    
    if 'pending_fixes' not in globals() or function_name not in pending_fixes:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è /{function_name}!\n–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /auto_fix {function_name}")
        return
    
    try:
        fix_info = pending_fixes[function_name]
        fixed_code = fix_info['fixed_code']
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
        local_vars = {
            'Update': Update,
            'ContextTypes': ContextTypes,
            'logger': logger
        }
        
        exec(fixed_code, globals(), local_vars)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        new_function = None
        for var_name, var_value in local_vars.items():
            if (var_name.endswith('_command') and 
                callable(var_value) and 
                hasattr(var_value, '__code__') and
                var_value.__code__.co_flags & 0x80):  # async —Ñ—É–Ω–∫—Ü–∏—è
                new_function = var_value
                break
        
        if new_function:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            old_description = dynamic_commands[function_name]['description']
            dynamic_functions[function_name] = new_function
            dynamic_commands[function_name] = {
                'function': new_function,
                'description': old_description,
                'code': fixed_code,
                'created_at': dynamic_commands[function_name]['created_at'],
                'fixed_at': datetime.now().isoformat(),
                'fixed_error': fix_info['original_error']['error_type']
            }
            
            # –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            if function_name in function_errors:
                del function_errors[function_name]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            del pending_fixes[function_name]
            
            await update.message.reply_html(
                f"‚úÖ <b>–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!</b>\n\n"
                f"üîß <b>–§—É–Ω–∫—Ü–∏—è:</b> /{function_name}\n"
                f"üéØ <b>–°—Ç–∞—Ç—É—Å:</b> –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞\n"
                f"üìÖ <b>–í—Ä–µ–º—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b> {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"üí° <b>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é:</b> /{function_name}"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ.")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n{str(e)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
pending_fixes = {}

async def dynamic_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    command = update.message.text[1:].split()[0].lower()  # —É–±–∏—Ä–∞–µ–º / –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    
    logger.info(f"üîß –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É: /{command}")
    
    if command in dynamic_functions:
        try:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /{command}")
            await dynamic_functions[command](update, context)
            logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /{command} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
            import traceback
            error_type = type(e).__name__
            error_message = str(e)
            error_traceback = traceback.format_exc()
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã /{command}: {error_type}: {error_message}")
            logger.error(f"   –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫:\n{error_traceback}")
            
            # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            function_errors[command] = {
                'error_type': error_type,
                'error_message': error_message,
                'timestamp': datetime.now().isoformat(),
                'function_code': dynamic_commands[command]['code'] if command in dynamic_commands else '–ö–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'traceback': error_traceback
            }
            
            logger.info(f"‚úÖ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ function_errors –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /{command}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            debug_info = f"""‚ùå <b>–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /{command}</b>

üîç <b>–¢–∏–ø:</b> {error_type}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {error_message}

üõ†Ô∏è <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>"""
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            if "ModuleNotFoundError" in error_type:
                debug_info += "\n‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤ requirements.txt"
            elif "requests" in error_message.lower() or "connection" in error_message.lower():
                debug_info += "\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–∞–ø—Ä–æ—Å–æ–º"
            elif "KeyError" in error_type:
                debug_info += "\n‚Ä¢ API –∏–∑–º–µ–Ω–∏–ª —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
            elif "JSONDecodeError" in error_type or "Expecting value" in error_message:
                debug_info += "\n‚Ä¢ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"
                debug_info += "\n‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è"
            elif "timeout" in error_message.lower():
                debug_info += "\n‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"
            else:
                debug_info += "\n‚Ä¢ –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏"
            
            debug_info += f"\n\nüîÑ <b>–î–µ–π—Å—Ç–≤–∏—è:</b>"
            debug_info += f"\n‚Ä¢ /auto_fix {command} - ü§ñ –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ChatGPT"
            debug_info += f"\n‚Ä¢ /remove_feature {command} - —É–¥–∞–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é"
            debug_info += f"\n‚Ä¢ /edit_feature {command} - [–æ–ø–∏—Å–∞–Ω–∏–µ] - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é"
            debug_info += f"\n\nüîç <b>–û—Ç–ª–∞–¥–∫–∞:</b> –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            
            await update.message.reply_html(debug_info)
    else:
        logger.warning(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /{command} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: {list(dynamic_functions.keys())}")
        
        # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É echo
        await echo(update, context)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–º–Ω—ã–º —Ä–µ–∂–∏–º–æ–º"""
    global total_requests
    total_requests += 1
    
    user_id = update.effective_user.id
    user_data[user_id] = user_data.get(user_id, 0) + 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    message_text = update.message.text
    if message_text.startswith('/'):
        command = message_text[1:].split()[0].lower()
        if command in dynamic_functions:
            await dynamic_command_handler(update, context)
            return
    
    message_lower = message_text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
    question_indicators = ['?', '—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–∞–∫–æ–π', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏']
    is_question = any(indicator in message_lower for indicator in question_indicators)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –∏ ChatGPT –≤–∫–ª—é—á–µ–Ω, –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ AI
    if is_question and CHATGPT_ENABLED and await check_user_limit(user_id):
        await update.message.reply_text("ü§î –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—á–∞—é —á–µ—Ä–µ–∑ ChatGPT...")
        
        await increment_user_requests(user_id)
        ai_answer = await ask_chatgpt(message_text)
        
        response = f"ü§ñ <b>AI –æ—Ç–≤–µ—Ç:</b>\n{ai_answer}\n\nüí° <i>–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π /ai –∏–ª–∏ /gpt</i>"
        
        if len(response) > 4000:
            response = response[:3900] + "...\n\n‚ö†Ô∏è <i>–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω</i>"
            
        await update.message.reply_html(response)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
        dynamic_hint = ""
        if dynamic_commands:
            commands_list = ", ".join([f"/{cmd}" for cmd in list(dynamic_commands.keys())[:3]])
            dynamic_hint = f"\nü§ñ –°–æ–∑–¥–∞–Ω–Ω—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏: {commands_list}"
            if len(dynamic_commands) > 3:
                dynamic_hint += f" –∏ –µ—â–µ {len(dynamic_commands)-3}"
        
        # –û–±—ã—á–Ω—ã–π —ç—Ö–æ-–æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            f"–ü–æ–ª—É—á–∏–ª: {message_text}\n\n"
            f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π /ai [–≤–æ–ø—Ä–æ—Å] –¥–ª—è ChatGPT –æ—Ç–≤–µ—Ç–æ–≤!"
            f"{dynamic_hint}"
        )

async def currency_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç –¶–ë –†–§"""
    try:
        import requests
        from datetime import datetime
        
        # API –¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–∞ –†–§
        response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
        data = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        usd = data['Valute']['USD']
        eur = data['Valute']['EUR']
        
        date = datetime.now().strftime("%d.%m.%Y")
        
        result = f"üí∞ <b>–ö—É—Ä—Å –≤–∞–ª—é—Ç –¶–ë –†–§</b>\nüìÖ {date}\n\n"
        result += f"üá∫üá∏ <b>–î–æ–ª–ª–∞—Ä –°–®–ê:</b> {usd['Value']:.2f} ‚ÇΩ\n"
        result += f"üá™üá∫ <b>–ï–≤—Ä–æ:</b> {eur['Value']:.2f} ‚ÇΩ\n\n"
        result += "<i>–î–∞–Ω–Ω—ã–µ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–§</i>"
        
        await update.message.reply_html(result)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {str(e)}")

async def edit_feature(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é AI-—Ñ—É–Ω–∫—Ü–∏—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not CHATGPT_ENABLED:
        await update.message.reply_text("‚ùå ChatGPT –æ—Ç–∫–ª—é—á–µ–Ω. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return
    
    if not context.args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if not dynamic_commands:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n–ò—Å–ø–æ–ª—å–∑—É–π /add_feature –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö.")
            return
            
        functions_list = "üõ†Ô∏è <b>–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        for cmd, info in dynamic_commands.items():
            functions_list += f"‚Ä¢ <b>/{cmd}</b> - {info['description']}\n"
        
        functions_list += f"\nüí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n<code>/edit_feature [–∫–æ–º–∞–Ω–¥–∞] - [–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]</code>\n\n"
        functions_list += f"<b>–ü—Ä–∏–º–µ—Ä:</b>\n/edit_feature {list(dynamic_commands.keys())[0]} - —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
        
        await update.message.reply_html(functions_list)
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
    args = " ".join(context.args)
    parts = args.split(' - ', 1)
    
    if len(parts) != 2:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π: /edit_feature [–∫–æ–º–∞–Ω–¥–∞] - [–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]")
        return
        
    command_name = parts[0].strip().lower()
    new_description = parts[1].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if command_name not in dynamic_commands:
        await update.message.reply_text(f"‚ùå –§—É–Ω–∫—Ü–∏—è /{command_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π /list_features –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π.")
        return
    
    old_description = dynamic_commands[command_name]['description']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    edit_msg = await update.message.reply_html(
        f"üõ†Ô∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é...</b>\n\n"
        f"üìù <b>–ö–æ–º–∞–Ω–¥–∞:</b> /{command_name}\n"
        f"üìñ <b>–ë—ã–ª–æ:</b> {old_description}\n"
        f"‚ú® <b>–°—Ç–∞–ª–æ:</b> {new_description}\n\n"
        f"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ ChatGPT..."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    try:
        generated_code = await generate_function_code(new_description, command_name)
        
        if "‚ùå –û—à–∏–±–∫–∞" in generated_code or "–¢–∞–π–º–∞—É—Ç" in generated_code:
            await edit_msg.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!</b>\n\n{generated_code}",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        is_valid, validation_message = validate_generated_code(generated_code)
        if not is_valid:
            await edit_msg.edit_text(
                f"‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥!</b>\n\nüö´ {validation_message}",
                parse_mode='HTML'
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
        if '```python' in generated_code:
            code_start = generated_code.find('```python') + 9
            code_end = generated_code.find('```', code_start)
            clean_code = generated_code[code_start:code_end].strip()
        elif '```' in generated_code:
            code_start = generated_code.find('```') + 3
            code_end = generated_code.find('```', code_start)
            clean_code = generated_code[code_start:code_end].strip()
        else:
            clean_code = generated_code.strip()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        local_vars = {
            'Update': Update,
            'ContextTypes': ContextTypes,
            'logger': logger
        }
        
        exec(clean_code, globals(), local_vars)
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        new_function = None
        for var_name, var_value in local_vars.items():
            if (var_name.endswith('_command') and 
                callable(var_value) and 
                hasattr(var_value, '__code__') and
                var_value.__code__.co_flags & 0x80):  # async —Ñ—É–Ω–∫—Ü–∏—è
                new_function = var_value
                break
        
        if new_function:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            dynamic_functions[command_name] = new_function
            dynamic_commands[command_name] = {
                'function': new_function,
                'description': new_description,
                'code': clean_code,
                'created_at': dynamic_commands[command_name]['created_at'],  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
                'edited_at': __import__('datetime').datetime.now().isoformat()
            }
            
            await edit_msg.edit_text(
                f"‚úÖ <b>–§—É–Ω–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üîÑ <b>–ö–æ–º–∞–Ω–¥–∞:</b> /{command_name}\n"
                f"üìù <b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> {new_description}\n\n"
                f"üß© <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:</b>\n<code>{clean_code[:400]}{'...' if len(clean_code) > 400 else ''}</code>\n\n"
                f"üí° <b>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π:</b> /{command_name}",
                parse_mode='HTML'
            )
        else:
            await edit_msg.edit_text(
                f"‚ùå <b>–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
                parse_mode='HTML'
            )
            
    except Exception as e:
        await edit_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n\n{str(e)}\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
            parse_mode='HTML'
        )

async def debug_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    from datetime import datetime
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    debug_report = f"""üîß <b>–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–û–¢–ê</b>
üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

ü§ñ <b>ChatGPT:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if CHATGPT_ENABLED else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
‚Ä¢ –ú–æ–¥–µ–ª—å: {CHATGPT_MODEL}
‚Ä¢ API –∫–ª—é—á: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENAI_API_KEY else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

üõ†Ô∏è <b>AI –§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(dynamic_functions)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {len(dynamic_commands)}
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: {len(generation_history)} –ø–æ–ø—ã—Ç–æ–∫

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}
‚Ä¢ ChatGPT –∑–∞–ø—Ä–æ—Å–æ–≤: {sum(user_requests.values())}

üß™ <b>–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥:</b>
‚Ä¢ /ping - –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞
‚Ä¢ /currency - API –¶–ë –†–§
‚Ä¢ /ai –ø—Ä–∏–≤–µ—Ç - –¢–µ—Å—Ç ChatGPT
"""
    
    if dynamic_commands:
        debug_report += f"\nüß© <b>AI –ö–æ–º–∞–Ω–¥—ã:</b>\n"
        for cmd in list(dynamic_commands.keys())[:3]:
            debug_report += f"‚Ä¢ /{cmd}\n"
        if len(dynamic_commands) > 3:
            debug_report += f"‚Ä¢ ... –∏ –µ—â–µ {len(dynamic_commands)-3}"
    
    await update.message.reply_html(debug_report)

async def uptime_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    current_time = datetime.now()
    uptime = current_time - BOT_START_TIME
    
    days = uptime.days
    hours, remainder = divmod(uptime.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    uptime_text = f"‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:</b>\n\n"
    uptime_text += f"üöÄ <b>–ó–∞–ø—É—â–µ–Ω:</b> {BOT_START_TIME.strftime('%d.%m.%Y %H:%M:%S')}\n"
    uptime_text += f"‚è≥ <b>–†–∞–±–æ—Ç–∞–µ—Ç:</b> "
    
    if days > 0:
        uptime_text += f"{days} –¥–Ω. "
    if hours > 0:
        uptime_text += f"{hours} —á. "
    if minutes > 0:
        uptime_text += f"{minutes} –º–∏–Ω. "
    uptime_text += f"{seconds} —Å–µ–∫.\n\n"
    
    uptime_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ—Å—Å–∏—é:</b>\n"
    uptime_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
    uptime_text += f"‚Ä¢ ChatGPT –∑–∞–ø—Ä–æ—Å–æ–≤: {sum(user_requests.values())}\n"
    uptime_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}\n"
    uptime_text += f"‚Ä¢ AI —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ: {len(dynamic_functions)}"
    
    await update.message.reply_html(uptime_text)

async def system_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    import sys
    import os
    import platform
    
    try:
        import psutil
        memory_info = f"üíæ <b>–ü–∞–º—è—Ç—å:</b> {psutil.virtual_memory().percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n"
        cpu_info = f"‚ö° <b>CPU:</b> {psutil.cpu_percent()}% –Ω–∞–≥—Ä—É–∑–∫–∞\n"
    except ImportError:
        memory_info = "üíæ <b>–ü–∞–º—è—Ç—å:</b> –ú–æ–¥—É–ª—å psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
        cpu_info = "‚ö° <b>CPU:</b> –ú–æ–¥—É–ª—å psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    system_text = f"üñ•Ô∏è <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï</b>\n\n"
    system_text += f"üêç <b>Python:</b> {sys.version.split()[0]}\n"
    system_text += f"ü§ñ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform.system()} {platform.release()}\n"
    system_text += f"üìÅ <b>–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞:</b> {os.getcwd()}\n"
    system_text += f"{memory_info}"
    system_text += f"{cpu_info}"
    system_text += f"\nüîß <b>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>\n"
    system_text += f"‚Ä¢ Telegram Bot API: ‚úÖ\n"
    system_text += f"‚Ä¢ OpenAI API: {'‚úÖ' if CHATGPT_ENABLED else '‚ùå'}\n"
    system_text += f"‚Ä¢ Requests: ‚úÖ\n"
    system_text += f"‚Ä¢ Asyncio: ‚úÖ"
    
    await update.message.reply_html(system_text)

async def notify_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    user_id = update.effective_user.id
    user = update.effective_user
    
    if user_id == ADMIN_USER_ID:
        await update.message.reply_text("‚ÑπÔ∏è –¢—ã —É–∂–µ –∞–¥–º–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /admin_help –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞:\n"
            "<code>/notify [—Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n/notify –ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞.",
            parse_mode='HTML'
        )
        return
    
    message_text = " ".join(context.args)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"üì¨ <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>\n\n"
                 f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.mention_html()}\n"
                 f"üÜî <b>ID:</b> {user_id}\n"
                 f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message_text}\n\n"
                 f"üí¨ <b>–û—Ç–≤–µ—Ç–∏—Ç—å:</b> /broadcast [–æ—Ç–≤–µ—Ç]",
            parse_mode='HTML'
        )
        
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    from datetime import datetime
    current_time = datetime.now().strftime('%H:%M:%S')
    await update.message.reply_text(f"üèì –ü–æ–Ω–≥! –í—Ä–µ–º—è: {current_time}")

def load_saved_features():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö AI —Ñ—É–Ω–∫—Ü–∏–π...")
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–∞–π–ª –∏–ª–∏ –ë–î

async def show_diff(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–ª–∏—á–∏–π!\n–ü—Ä–∏–º–µ—Ä: /show_diff currencybk")
        return
    
    function_name = context.args[0].lower()
    
    if 'pending_fixes' not in globals() or function_name not in pending_fixes:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è /{function_name}!\n–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /auto_fix {function_name}")
        return
    
    if function_name not in dynamic_commands:
        await update.message.reply_text(f"‚ùå –§—É–Ω–∫—Ü–∏—è /{function_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    fix_info = pending_fixes[function_name]
    original_code = dynamic_commands[function_name]['code']
    fixed_code = fix_info['fixed_code']
    
    diff_message = f"""üìä <b>–°–†–ê–í–ù–ï–ù–ò–ï –ö–û–î–ê</b>

üìù <b>–§—É–Ω–∫—Ü–∏—è:</b> /{function_name}
‚ùå <b>–û—à–∏–±–∫–∞:</b> {fix_info['original_error']['error_type']}

üìú <b>–¢–ï–ö–£–©–ò–ô –ö–û–î:</b>
<code>{original_code[:400]}{'...' if len(original_code) > 400 else ''}</code>

üîß <b>–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î:</b>
<code>{fixed_code[:400]}{'...' if len(fixed_code) > 400 else ''}</code>

üîÑ <b>–î–ï–ô–°–¢–í–ò–Ø:</b>
‚Ä¢ /apply_fix {function_name} - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ /cancel_fix {function_name} - –æ—Ç–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    await update.message.reply_html(diff_message)

async def cancel_fix(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π!\n–ü—Ä–∏–º–µ—Ä: /cancel_fix currencybk")
        return
    
    function_name = context.args[0].lower()
    
    if 'pending_fixes' not in globals() or function_name not in pending_fixes:
        await update.message.reply_text(f"‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è /{function_name}!")
        return
    
    del pending_fixes[function_name]
    await update.message.reply_text(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è /{function_name} –æ—Ç–º–µ–Ω–µ–Ω—ã.")

async def debug_errors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    debug_report = f"üîç <b>–û–¢–õ–ê–î–ö–ê –°–ò–°–¢–ï–ú–´ –û–®–ò–ë–û–ö</b>\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º
    debug_report += f"üìä <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º:</b>\n"
    debug_report += f"‚Ä¢ function_errors: {len(function_errors)} –∑–∞–ø–∏—Å–µ–π\n"
    debug_report += f"‚Ä¢ dynamic_commands: {len(dynamic_commands)} —Ñ—É–Ω–∫—Ü–∏–π\n"
    debug_report += f"‚Ä¢ dynamic_functions: {len(dynamic_functions)} —Ñ—É–Ω–∫—Ü–∏–π\n"
    
    if 'pending_fixes' in globals():
        debug_report += f"‚Ä¢ pending_fixes: {len(pending_fixes)} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n"
    else:
        debug_report += f"‚Ä¢ pending_fixes: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    if function_errors:
        debug_report += f"\n‚ùå <b>–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:</b>\n"
        for func_name, error_info in function_errors.items():
            debug_report += f"‚Ä¢ <b>/{func_name}</b> - {error_info['error_type']}\n"
            debug_report += f"  üìù {error_info['error_message'][:50]}{'...' if len(error_info['error_message']) > 50 else ''}\n"
            debug_report += f"  ‚è∞ {error_info['timestamp'][:16]}\n\n"
    else:
        debug_report += f"\n‚úÖ <b>–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫</b>\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if dynamic_commands:
        debug_report += f"\nüß© <b>AI –§—É–Ω–∫—Ü–∏–∏:</b>\n"
        for cmd in list(dynamic_commands.keys())[:5]:
            debug_report += f"‚Ä¢ /{cmd}\n"
        if len(dynamic_commands) > 5:
            debug_report += f"‚Ä¢ ... –∏ –µ—â–µ {len(dynamic_commands)-5}\n"
    
    debug_report += f"\nüí° <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
    debug_report += f"1. –í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É —Å –æ—à–∏–±–∫–æ–π\n"
    debug_report += f"2. –ü—Ä–æ–≤–µ—Ä—å /debug_errors\n"
    debug_report += f"3. –ò—Å–ø–æ–ª—å–∑—É–π /auto_fix [–∫–æ–º–∞–Ω–¥–∞]"
    
    await update.message.reply_html(debug_report)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å ChatGPT –∏ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ñ—É–Ω–∫—Ü–∏–π"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    load_saved_features()
    
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))
    application.add_handler(CommandHandler("my_id", my_id))
    application.add_handler(CommandHandler("ping", ping_command))  # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞

    # ChatGPT –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("ai", ai_command))
    application.add_handler(CommandHandler("gpt", gpt_command))
    application.add_handler(CommandHandler("currency", currency_command)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É

    # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin_help", admin_help))
    # AI –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("add_feature", add_feature))
    application.add_handler(CommandHandler("list_features", list_features))
    application.add_handler(CommandHandler("remove_feature", remove_feature))
    application.add_handler(CommandHandler("generation_stats", generation_stats))
    application.add_handler(CommandHandler("edit_feature", edit_feature)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CommandHandler("auto_fix", auto_fix)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CommandHandler("apply_fix", apply_fix)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("reset_limits", reset_limits_command))
    application.add_handler(CommandHandler("chatgpt_settings", chatgpt_settings))
    application.add_handler(CommandHandler("list_models", list_models))
    application.add_handler(CommandHandler("quick_model", quick_model))
    application.add_handler(CommandHandler("model_recommend", model_recommend))
    application.add_handler(CommandHandler("debug_status", debug_status)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CommandHandler("uptime", uptime_command)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CommandHandler("system_info", system_info)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CommandHandler("notify", notify_admin)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CommandHandler("show_diff", show_diff)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CommandHandler("cancel_fix", cancel_fix)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    application.add_handler(CommandHandler("debug_errors", debug_errors)) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É

    # –í–ê–ñ–ù–û: MessageHandler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.TEXT, echo))

    features_count = len(dynamic_commands)
    chatgpt_info = "‚úÖ ChatGPT –∞–∫—Ç–∏–≤–µ–Ω" if CHATGPT_ENABLED else "‚ùå ChatGPT –æ—Ç–∫–ª—é—á–µ–Ω"
    
    print(f"üöÄ –£–º–Ω—ã–π AI-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"   {chatgpt_info}")
    print(f"   ü§ñ AI —Ñ—É–Ω–∫—Ü–∏–π: {features_count}")
    print(f"   üí° –ò—Å–ø–æ–ª—å–∑—É–π /add_feature –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ ChatGPT!")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 