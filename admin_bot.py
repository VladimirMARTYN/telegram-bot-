import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN, OPENAI_API_KEY
import openai
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
if OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY
    client = openai.OpenAI(api_key=OPENAI_API_KEY)
    CHATGPT_ENABLED = True
    logger.info("‚úÖ ChatGPT —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
else:
    CHATGPT_ENABLED = False
    logger.warning("‚ö†Ô∏è ChatGPT —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY")

# –¢–í–û–ô Telegram ID
ADMIN_USER_ID = 34331814  # –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT
CHATGPT_MODEL = "gpt-3.5-turbo"
MAX_TOKENS = 1000
MAX_REQUESTS_PER_USER = 10  # –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_requests = {}  # —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    chatgpt_status = "‚úÖ ChatGPT –∞–∫—Ç–∏–≤–µ–Ω" if CHATGPT_ENABLED else "‚ùå ChatGPT –æ—Ç–∫–ª—é—á–µ–Ω"
    
    await update.message.reply_html(
        f"ü§ñ <b>–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å AI!</b>\n\n"
        f"üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ /ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT\n"
        f"‚Ä¢ /gpt [–≤–æ–ø—Ä–æ—Å] - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI\n"
        f"‚Ä¢ /my_id - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\n"
        f"‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n\n"
        f"üîß <b>–°—Ç–∞—Ç—É—Å:</b> {chatgpt_status}\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä:</b> /ai –ß—Ç–æ —Ç–∞–∫–æ–µ Python?"
    )

async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    await update.message.reply_text(f"–¢–≤–æ–π ID: {user_id}")

# ========== CHATGPT –§–£–ù–ö–¶–ò–ò ==========

async def check_user_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id == ADMIN_USER_ID:
        return True  # –∞–¥–º–∏–Ω—É –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
    
    current_count = user_requests.get(user_id, 0)
    return current_count < MAX_REQUESTS_PER_USER

async def increment_user_requests(user_id: int):
    """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id != ADMIN_USER_ID:
        user_requests[user_id] = user_requests.get(user_id, 0) + 1

async def ask_chatgpt(prompt: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ ChatGPT –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"""
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model=CHATGPT_MODEL,
            messages=[
                {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=MAX_TOKENS,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ ChatGPT API: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ AI: {str(e)}"

async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /ai - –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –∫ ChatGPT"""
    if not CHATGPT_ENABLED:
        await update.message.reply_text("‚ùå ChatGPT —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å OPENAI_API_KEY.")
        return
    
    user_id = update.effective_user.id
    
    if not await check_user_limit(user_id):
        await update.message.reply_text(
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({MAX_REQUESTS_PER_USER})!\n"
            f"–¢–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã: {user_requests.get(user_id, 0)}"
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            "ü§ñ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ChatGPT!\n\n"
            "–ü—Ä–∏–º–µ—Ä: /ai –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É"
        )
        return
    
    question = " ".join(context.args)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await update.message.reply_text("ü§î –î—É–º–∞—é...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
    await increment_user_requests(user_id)
    answer = await ask_chatgpt(question)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {question}\n\nü§ñ <b>ChatGPT:</b>\n{answer}"
    
    if len(response) > 4000:  # –ª–∏–º–∏—Ç Telegram
        response = response[:3900] + "...\n\n‚ö†Ô∏è <i>–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω</i>"
    
    await update.message.reply_html(response)

async def gpt_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /gpt - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç ChatGPT"""
    if not CHATGPT_ENABLED:
        await update.message.reply_text("‚ùå ChatGPT —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return
    
    user_id = update.effective_user.id
    
    if not await check_user_limit(user_id):
        await update.message.reply_text(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({MAX_REQUESTS_PER_USER})!")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üß† –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT!\n\n"
            "–ü—Ä–∏–º–µ—Ä: /gpt –ù–∞–ø–∏—à–∏ –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è Python"
        )
        return
    
    question = " ".join(context.args)
    await update.message.reply_text("üß† –ì–æ—Ç–æ–≤–ª—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    detailed_prompt = f"–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}"
    
    await increment_user_requests(user_id)
    answer = await ask_chatgpt(detailed_prompt)
    
    response = f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {question}\n\nüß† <b>–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç:</b>\n{answer}"
    
    if len(response) > 4000:
        response = response[:3900] + "...\n\n‚ö†Ô∏è <i>–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω</i>"
    
    await update.message.reply_html(response)

async def reset_limits_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    user_requests.clear()
    await update.message.reply_text("‚úÖ –õ–∏–º–∏—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã!")

async def chatgpt_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    global MAX_REQUESTS_PER_USER, MAX_TOKENS, CHATGPT_MODEL
    
    if not context.args:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_info = f"""
ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT:</b>

üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if CHATGPT_ENABLED else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
üîÑ <b>–ú–æ–¥–µ–ª—å:</b> {CHATGPT_MODEL}
üéØ <b>–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤:</b> {MAX_TOKENS}
üë• <b>–õ–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {MAX_REQUESTS_PER_USER}

üí° <b>–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
/chatgpt_settings limit 20 - –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç
/chatgpt_settings tokens 1500 - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
/chatgpt_settings model gpt-4 - –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å
        """
        await update.message.reply_html(settings_info)
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–ü—Ä–∏–º–µ—Ä: /chatgpt_settings limit 20")
        return
    
    setting = context.args[0].lower()
    value = context.args[1]
    
    try:
        if setting == "limit":
            MAX_REQUESTS_PER_USER = int(value)
            await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {MAX_REQUESTS_PER_USER} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        elif setting == "tokens":
            MAX_TOKENS = int(value)
            await update.message.reply_text(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {MAX_TOKENS}")
        
        elif setting == "model":
            CHATGPT_MODEL = value
            await update.message.reply_text(f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {CHATGPT_MODEL}")
        
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞! –î–æ—Å—Ç—É–ø–Ω–æ: limit, tokens, model")
    
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º.")

# ========== –ö–û–ù–ï–¶ CHATGPT –§–£–ù–ö–¶–ò–ô ==========

async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    chatgpt_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if CHATGPT_ENABLED else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    
    admin_commands = f"""
üîß <b>–ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´:</b>

<b>üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
/admin_help - –≠—Ç–æ –º–µ–Ω—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º

<b>ü§ñ ChatGPT —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {chatgpt_status}
/ai [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT
/gpt [–≤–æ–ø—Ä–æ—Å] - –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
/reset_limits - –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/chatgpt_settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT

<b>üõ†Ô∏è –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞:</b>
/add_feature [–∫–æ–¥] - –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
/update_code [—Ñ–∞–π–ª] - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/ai –û–±—ä—è—Å–Ω–∏ –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
/broadcast –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
/reset_limits - –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
    """
    await update.message.reply_html(admin_commands)

async def add_feature(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏!\n–ü—Ä–∏–º–µ—Ä: /add_feature weather")
        return
    
    feature_name = " ".join(context.args)
    
    # –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    await update.message.reply_text(
        f"‚úÖ –§—É–Ω–∫—Ü–∏—è '{feature_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!\n"
        f"–°–∫–æ—Ä–æ —è –µ—ë —Ä–µ–∞–ª–∏–∑—É—é."
    )

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å ChatGPT
    total_ai_requests = sum(user_requests.values())
    active_ai_users = len([u for u in user_requests.values() if u > 0])
    chatgpt_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if CHATGPT_ENABLED else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    
    stats = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {len(user_data)}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç AI: {active_ai_users}

üîÑ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_requests}
‚Ä¢ AI –∑–∞–ø—Ä–æ—Å–æ–≤: {total_ai_requests}
‚Ä¢ –ú–æ–¥–µ–ª—å: {CHATGPT_MODEL if CHATGPT_ENABLED else '–ù–µ—Ç'}

ü§ñ <b>ChatGPT:</b> {chatgpt_status}
‚Ä¢ –õ–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {MAX_REQUESTS_PER_USER}
‚Ä¢ –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {MAX_TOKENS}

‚è∞ <b>–°—Ç–∞—Ç—É—Å:</b> –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    """
    await update.message.reply_html(stats)

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!\n–ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!")
        return
    
    message = " ".join(context.args)
    sent_count = 0
    
    # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for uid in user_data:
        try:
            await context.bot.send_message(chat_id=uid, text=f"üì¢ {message}")
            sent_count += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π.")

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
user_data = {}
total_requests = 0

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–º–Ω—ã–º —Ä–µ–∂–∏–º–æ–º"""
    global total_requests
    total_requests += 1
    
    user_id = update.effective_user.id
    user_data[user_id] = user_data.get(user_id, 0) + 1
    
    message_text = update.message.text.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
    question_indicators = ['?', '—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–∞–∫–æ–π', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏']
    is_question = any(indicator in message_text for indicator in question_indicators)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –∏ ChatGPT –≤–∫–ª—é—á–µ–Ω, –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ AI
    if is_question and CHATGPT_ENABLED and await check_user_limit(user_id):
        await update.message.reply_text("ü§î –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—á–∞—é —á–µ—Ä–µ–∑ ChatGPT...")
        
        await increment_user_requests(user_id)
        ai_answer = await ask_chatgpt(update.message.text)
        
        response = f"ü§ñ <b>AI –æ—Ç–≤–µ—Ç:</b>\n{ai_answer}\n\nüí° <i>–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π /ai –∏–ª–∏ /gpt</i>"
        
        if len(response) > 4000:
            response = response[:3900] + "...\n\n‚ö†Ô∏è <i>–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω</i>"
            
        await update.message.reply_html(response)
    else:
        # –û–±—ã—á–Ω—ã–π —ç—Ö–æ-–æ—Ç–≤–µ—Ç
        await update.message.reply_text(
            f"–ü–æ–ª—É—á–∏–ª: {update.message.text}\n\n"
            f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π /ai [–≤–æ–ø—Ä–æ—Å] –¥–ª—è ChatGPT –æ—Ç–≤–µ—Ç–æ–≤!"
        )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å ChatGPT –∏ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))
    application.add_handler(CommandHandler("my_id", my_id))

    # ChatGPT –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("ai", ai_command))
    application.add_handler(CommandHandler("gpt", gpt_command))

    # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("admin_help", admin_help))
    application.add_handler(CommandHandler("add_feature", add_feature))
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("reset_limits", reset_limits_command))
    application.add_handler(CommandHandler("chatgpt_settings", chatgpt_settings))

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    chatgpt_info = "‚úÖ ChatGPT –∞–∫—Ç–∏–≤–µ–Ω" if CHATGPT_ENABLED else "‚ùå ChatGPT –æ—Ç–∫–ª—é—á–µ–Ω"
    print(f"üöÄ –£–º–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! {chatgpt_info}")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 