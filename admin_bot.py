#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import asyncio
from datetime import datetime, time
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue
import json
import aiohttp
import requests
import threading

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç schedule (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
try:
    import schedule
    SCHEDULE_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å 'schedule' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ Timer")
    SCHEDULE_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '0'))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞—á
GLOBAL_JOB_QUEUE = None

# API –∫–ª—é—á–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–ª—é—á–∏)
METALPRICEAPI_KEY = os.getenv('METALPRICEAPI_KEY', 'demo')  # https://metalpriceapi.com/
API_NINJAS_KEY = os.getenv('API_NINJAS_KEY', 'demo')        # https://api.api-ninjas.com/
FMP_API_KEY = os.getenv('FMP_API_KEY', 'demo')              # https://financialmodelingprep.com/
ALPHA_VANTAGE_KEY = os.getenv('ALPHA_VANTAGE_KEY', 'demo')  # https://www.alphavantage.co/
EIA_API_KEY = os.getenv('EIA_API_KEY', 'demo')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if ADMIN_USER_ID == 0:
    logger.warning("‚ö†Ô∏è ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(moscow_tz)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
def format_price(price, decimal_places=2):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á –∏ –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π"""
    if isinstance(price, (int, float)):
        return f"{price:,.{decimal_places}f}".replace(',', ' ')
    return str(price)

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# –£–î–ê–õ–ï–ù–û: inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π —Å MOEX
async def get_moex_stocks():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏"""
    stocks_data = {}
    
    # –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    stocks = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏
        'SBER': {'name': '–°–±–µ—Ä', 'emoji': 'üü¢'},
        'YDEX': {'name': '–Ø–Ω–¥–µ–∫—Å', 'emoji': 'üî¥'},
        'VKCO': {'name': '–í–ö', 'emoji': 'üîµ'},
        'T': {'name': '–¢-–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'emoji': 'üü°'},
        'GAZP': {'name': '–ì–∞–∑–ø—Ä–æ–º', 'emoji': 'üíé'},
        'GMKN': {'name': '–ù–æ—Ä–Ω–∏–∫–µ–ª—å', 'emoji': '‚ö°'},
        'ROSN': {'name': '–†–æ—Å–Ω–µ—Ñ—Ç—å', 'emoji': 'üõ¢Ô∏è'},
        'LKOH': {'name': '–õ–£–ö–û–ô–õ', 'emoji': '‚õΩ'},
        'MTSS': {'name': '–ú–¢–°', 'emoji': 'üì±'},
        'MFON': {'name': '–ú–µ–≥–∞—Ñ–æ–Ω', 'emoji': 'üì∂'},
        # –ê–∫—Ü–∏–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
        'PIKK': {'name': '–ü–ò–ö', 'emoji': 'üèóÔ∏è'},
        'SMLT': {'name': '–°–∞–º–æ–ª—ë—Ç', 'emoji': '‚úàÔ∏è'}
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤
            trading_url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities.json"
            params = {
                'securities': ','.join(stocks.keys()),
                'iss.meta': 'off',
                'iss.only': 'securities,marketdata'
            }
            
            async with session.get(trading_url, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤
                    securities_data = {}
                    marketdata = {}
                    
                    if 'securities' in data and 'data' in data['securities']:
                        securities_cols = data['securities']['columns']
                        for row in data['securities']['data']:
                            row_data = dict(zip(securities_cols, row))
                            secid = row_data.get('SECID')
                            if secid in stocks:
                                securities_data[secid] = {
                                    'shortname': row_data.get('SHORTNAME', stocks[secid]['name']),
                                    'lotsize': row_data.get('LOTSIZE', 1)
                                }
                    
                    if 'marketdata' in data and 'data' in data['marketdata']:
                        marketdata_cols = data['marketdata']['columns']
                        for row in data['marketdata']['data']:
                            row_data = dict(zip(marketdata_cols, row))
                            secid = row_data.get('SECID')
                            if secid in stocks:
                                marketdata[secid] = {
                                    'last': row_data.get('LAST'),
                                    'change': row_data.get('CHANGE'),
                                    'changeprcnt': row_data.get('CHANGEPRCNT'),
                                    'volume': row_data.get('VALTODAY'),
                                    'open': row_data.get('OPEN'),
                                    'high': row_data.get('HIGH'),
                                    'low': row_data.get('LOW')
                                }
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    for ticker in stocks:
                        if ticker in securities_data or ticker in marketdata:
                            stocks_data[ticker] = {
                                'name': stocks[ticker]['name'],
                                'emoji': stocks[ticker]['emoji'],
                                'shortname': securities_data.get(ticker, {}).get('shortname', stocks[ticker]['name']),
                                'price': marketdata.get(ticker, {}).get('last'),
                                'change': marketdata.get(ticker, {}).get('change'),
                                'change_pct': marketdata.get(ticker, {}).get('changeprcnt'),
                                'volume': marketdata.get(ticker, {}).get('volume'),
                                'open': marketdata.get(ticker, {}).get('open'),
                                'high': marketdata.get(ticker, {}).get('high'),
                                'low': marketdata.get(ticker, {}).get('low')
                            }
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOEX: {e}")
    
    return stocks_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë –†–§ —É–±—Ä–∞–Ω–∞ - API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot_start_time = get_moscow_time()

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
user_data = {}

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_data
    try:
        if os.path.exists('user_data.json'):
            with open('user_data.json', 'r', encoding='utf-8') as f:
                user_data = json.load(f)
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}")
        else:
            user_data = {}
            logger.info("üìä –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        user_data = {}

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open('user_data.json', 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = user.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'username': user.username,
            'first_seen': get_moscow_time().isoformat(),
            'last_activity': get_moscow_time().isoformat()
        }
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user_id})")
        save_user_data()
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_data[user_id]['last_activity'] = get_moscow_time().isoformat()
        save_user_data()
    
    welcome_text = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
        f"ü§ñ –≠—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π Telegram –±–æ—Ç\n\n"
        f"üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"/help - –°–ø—Ä–∞–≤–∫–∞\n"
        f"/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        f"/rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∞–∫—Ü–∏–π\n\n"
        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        f"/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        f"/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        f"/set_alert - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
        f"/view_alerts - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã\n\n"
        f"üë§ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
        f"üìä <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(user_data)}"
    )
    
    await update.message.reply_html(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = (
        "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –±–æ—Ç—É</b>\n\n"
        "üí± <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∞–∫—Ü–∏–π\n"
        "‚Ä¢ –¢–æ–≤–∞—Ä—ã (–Ω–µ—Ñ—Ç—å Brent/Urals, –∑–æ–ª–æ—Ç–æ, —Å–µ—Ä–µ–±—Ä–æ)\n"
        "‚Ä¢ –§–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ 9:00 –ú–°–ö\n\n"
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        "/rates - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã\n\n"
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/set_alert - –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
        "/view_alerts - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id == ADMIN_USER_ID:
        help_text += (
            "üîß <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/test_daily - –¢–µ—Å—Ç–æ–≤–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞\n"
            "/check_subscribers - –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            "/set_daily_time HH:MM - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —Å–≤–æ–¥–∫–∏\n"
            "/get_daily_settings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/restart_daily_job - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É —Å–≤–æ–¥–∫–∏\n\n"
        )
    
    help_text += (
        "üîÑ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "‚Ä¢ –¶–ë –†–§ - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
        "‚Ä¢ CoinGecko - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n" 
        "‚Ä¢ MOEX - —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã\n"
        "‚Ä¢ Gold-API.com - –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã\n"
        "‚Ä¢ EIA API - —Ç–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –Ω–µ—Ñ—Ç–∏\n"
        "‚Ä¢ Alpha Vantage - —Ñ–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –í—ã–ø–æ–ª–Ω–∏—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –≤ 9:00 –ú–°–ö!"
    )
    
    await update.message.reply_html(help_text)

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /ping"""
    current_time = get_moscow_time().strftime("%d.%m.%Y %H:%M:%S")
    await update.message.reply_text(f"üèì –ü–æ–Ω–≥! –í—Ä–µ–º—è: {current_time}")

async def rates_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞–∫—Ü–∏–π, —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤"""
    try:
        await update.message.reply_text("üìä –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        
        # 1. –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§
        try:
            cbr_response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
            cbr_response.raise_for_status()
            cbr_data = cbr_response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (—Ç–æ–ª—å–∫–æ 4 –æ—Å–Ω–æ–≤–Ω—ã–µ)
            usd_rate = cbr_data.get('Valute', {}).get('USD', {}).get('Value', '–ù/–î')
            eur_rate = cbr_data.get('Valute', {}).get('EUR', {}).get('Value', '–ù/–î')
            cny_rate = cbr_data.get('Valute', {}).get('CNY', {}).get('Value', '–ù/–î')
            gbp_rate = cbr_data.get('Valute', {}).get('GBP', {}).get('Value', '–ù/–î')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ä—É–±–ª–∏
            usd_to_rub_rate = usd_rate if isinstance(usd_rate, (int, float)) else 0
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
            usd_str = f"{format_price(usd_rate)} ‚ÇΩ" if isinstance(usd_rate, (int, float)) else str(usd_rate)
            eur_str = f"{format_price(eur_rate)} ‚ÇΩ" if isinstance(eur_rate, (int, float)) else str(eur_rate)
            cny_str = f"{format_price(cny_rate)} ‚ÇΩ" if isinstance(cny_rate, (int, float)) else str(cny_rate)
            gbp_str = f"{format_price(gbp_rate)} ‚ÇΩ" if isinstance(gbp_rate, (int, float)) else str(gbp_rate)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –¶–ë –†–§: {e}")
            usd_str = eur_str = cny_str = gbp_str = "‚ùå –û—à–∏–±–∫–∞ API"
            usd_to_rub_rate = 80  # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        
        # 2. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç CoinGecko
        try:
            crypto_response = requests.get(
                "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,the-open-network,ripple,cardano,solana,dogecoin&vs_currencies=usd",
                timeout=10
            )
            crypto_response.raise_for_status()
            crypto_data = crypto_response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            bitcoin_price = crypto_data.get('bitcoin', {}).get('usd', '–ù/–î')
            ethereum_price = crypto_data.get('ethereum', {}).get('usd', '–ù/–î')
            ton_price = crypto_data.get('the-open-network', {}).get('usd', '–ù/–î')
            ripple_price = crypto_data.get('ripple', {}).get('usd', '–ù/–î')
            cardano_price = crypto_data.get('cardano', {}).get('usd', '–ù/–î')
            solana_price = crypto_data.get('solana', {}).get('usd', '–ù/–î')
            dogecoin_price = crypto_data.get('dogecoin', {}).get('usd', '–ù/–î')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ü–µ–Ω—ã (–¥–æ–ª–ª–∞—Ä—ã + —Ä—É–±–ª–∏)
            crypto_strings = {}
            
            # Bitcoin
            if isinstance(bitcoin_price, (int, float)) and usd_to_rub_rate > 0:
                btc_rub = bitcoin_price * usd_to_rub_rate
                crypto_strings['bitcoin'] = f"Bitcoin: ${format_price(bitcoin_price, 0)} ({format_price(btc_rub, 0)} ‚ÇΩ)"
            elif isinstance(bitcoin_price, (int, float)):
                crypto_strings['bitcoin'] = f"Bitcoin: ${format_price(bitcoin_price, 0)}"
            else:
                crypto_strings['bitcoin'] = "Bitcoin: ‚ùå –ù/–î"
                
            # Ethereum
            if isinstance(ethereum_price, (int, float)) and usd_to_rub_rate > 0:
                eth_rub = ethereum_price * usd_to_rub_rate
                crypto_strings['ethereum'] = f"Ethereum: ${format_price(ethereum_price, 0)} ({format_price(eth_rub, 0)} ‚ÇΩ)"
            elif isinstance(ethereum_price, (int, float)):
                crypto_strings['ethereum'] = f"Ethereum: ${format_price(ethereum_price, 0)}"
            else:
                crypto_strings['ethereum'] = "Ethereum: ‚ùå –ù/–î"
                
            # TON
            if isinstance(ton_price, (int, float)) and usd_to_rub_rate > 0:
                ton_rub = ton_price * usd_to_rub_rate
                crypto_strings['ton'] = f"TON: ${format_price(ton_price)} ({format_price(ton_rub)} ‚ÇΩ)"
            elif isinstance(ton_price, (int, float)):
                crypto_strings['ton'] = f"TON: ${format_price(ton_price)}"
            else:
                crypto_strings['ton'] = "TON: ‚ùå –ù/–î"
                
            # XRP
            if isinstance(ripple_price, (int, float)) and usd_to_rub_rate > 0:
                xrp_rub = ripple_price * usd_to_rub_rate
                crypto_strings['ripple'] = f"XRP: ${format_price(ripple_price, 3)} ({format_price(xrp_rub)} ‚ÇΩ)"
            elif isinstance(ripple_price, (int, float)):
                crypto_strings['ripple'] = f"XRP: ${format_price(ripple_price, 3)}"
            else:
                crypto_strings['ripple'] = "XRP: ‚ùå –ù/–î"
                
            # Cardano
            if isinstance(cardano_price, (int, float)) and usd_to_rub_rate > 0:
                ada_rub = cardano_price * usd_to_rub_rate
                crypto_strings['cardano'] = f"Cardano: ${format_price(cardano_price, 3)} ({format_price(ada_rub)} ‚ÇΩ)"
            elif isinstance(cardano_price, (int, float)):
                crypto_strings['cardano'] = f"Cardano: ${format_price(cardano_price, 3)}"
            else:
                crypto_strings['cardano'] = "Cardano: ‚ùå –ù/–î"
                
            # Solana
            if isinstance(solana_price, (int, float)) and usd_to_rub_rate > 0:
                sol_rub = solana_price * usd_to_rub_rate
                crypto_strings['solana'] = f"Solana: ${format_price(solana_price)} ({format_price(sol_rub)} ‚ÇΩ)"
            elif isinstance(solana_price, (int, float)):
                crypto_strings['solana'] = f"Solana: ${format_price(solana_price)}"
            else:
                crypto_strings['solana'] = "Solana: ‚ùå –ù/–î"
                
            # Dogecoin
            if isinstance(dogecoin_price, (int, float)) and usd_to_rub_rate > 0:
                doge_rub = dogecoin_price * usd_to_rub_rate
                crypto_strings['dogecoin'] = f"Dogecoin: ${format_price(dogecoin_price, 3)} ({format_price(doge_rub)} ‚ÇΩ)"
            elif isinstance(dogecoin_price, (int, float)):
                crypto_strings['dogecoin'] = f"Dogecoin: ${format_price(dogecoin_price, 3)}"
            else:
                crypto_strings['dogecoin'] = "Dogecoin: ‚ùå –ù/–î"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
            crypto_strings = {
                'bitcoin': 'Bitcoin: ‚ùå –û—à–∏–±–∫–∞ API',
                'ethereum': 'Ethereum: ‚ùå –û—à–∏–±–∫–∞ API',
                'ton': 'TON: ‚ùå –û—à–∏–±–∫–∞ API',
                'ripple': 'XRP: ‚ùå –û—à–∏–±–∫–∞ API',
                'cardano': 'Cardano: ‚ùå –û—à–∏–±–∫–∞ API',
                'solana': 'Solana: ‚ùå –û—à–∏–±–∫–∞ API',
                'dogecoin': 'Dogecoin: ‚ùå –û—à–∏–±–∫–∞ API'
            }
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π —Å MOEX
        moex_stocks = await get_moex_stocks()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
        main_stocks = {}
        real_estate_stocks = {}
        
        for ticker, data in moex_stocks.items():
            if ticker in ['PIKK', 'SMLT']:
                real_estate_stocks[ticker] = data
            else:
                main_stocks[ticker] = data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫—Ü–∏–∏
        def format_stock_data(stocks_dict):
            result = {}
            for ticker, data in stocks_dict.items():
                price = data.get('price')
                change_pct = data.get('change_pct')
                name = data.get('name', ticker)
                
                if price is not None:
                    price_str = f"{price:.2f} ‚ÇΩ"
                    
                    if change_pct is not None:
                        if change_pct > 0:
                            change_str = f"(+{change_pct:.2f}%)"
                        elif change_pct < 0:
                            change_str = f"({change_pct:.2f}%)"
                        else:
                            change_str = "(0.00%)"
                        
                        result[ticker] = f"{name}: {price_str} {change_str}"
                    else:
                        result[ticker] = f"{name}: {price_str}"
                else:
                    result[ticker] = f"{name}: ‚ùå –ù/–î"
            return result
        

        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        message = "üìä **–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∫—É—Ä—Å—ã —Ç–∞–∫–∏–µ:**\n\n"
        
        # –í–∞–ª—é—Ç—ã –¶–ë –†–§
        message += "üèõÔ∏è **–í–ê–õ–Æ–¢–´ (–ø–æ –∫—É—Ä—Å—É –¶–ë –†–§):**\n"
        message += f"‚îú USD: **{usd_str}**\n"
        message += f"‚îú EUR: **{eur_str}**\n"
        message += f"‚îú CNY: **{cny_str}**\n"
        message += f"‚îî GBP: **{gbp_str}**\n\n"
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        message += "üíé **–ö–†–ò–ü–¢–ê:**\n"
        crypto_items = ['bitcoin', 'ethereum', 'ton', 'ripple', 'cardano', 'solana', 'dogecoin']
        for i, crypto in enumerate(crypto_items):
            if crypto in crypto_strings:
                prefix = "‚îú" if i < len(crypto_items) - 1 else "‚îî"
                message += f"{prefix} {crypto_strings[crypto]}\n"
        message += "\n"
        
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏
        message += "üìà **–†–û–°–°–ò–ô–°–ö–ò–ï –ê–ö–¶–ò–ò (MOEX):**\n"
        stocks_data = await get_moex_stocks()
        stock_names = {
            'SBER': '–°–±–µ—Ä', 'YDEX': '–Ø–Ω–¥–µ–∫—Å', 'VKCO': '–í–ö', 
            'T': 'T-–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'GAZP': '–ì–∞–∑–ø—Ä–æ–º', 'GMKN': '–ù–æ—Ä–Ω–∏–∫–µ–ª—å',
            'ROSN': '–†–æ—Å–Ω–µ—Ñ—Ç—å', 'LKOH': '–õ–£–ö–û–ô–õ', 'MTSS': '–ú–¢–°', 'MFON': '–ú–µ–≥–∞—Ñ–æ–Ω'
        }
        stock_items = list(stock_names.keys())
        for i, ticker in enumerate(stock_items):
            if ticker in stocks_data and stocks_data[ticker].get('price'):
                name = stock_names[ticker]
                price = stocks_data[ticker]['price']
                prefix = "‚îú" if i < len(stock_items) - 1 else "‚îî"
                message += f"{prefix} {name}: **{format_price(price)} ‚ÇΩ**\n"
        message += "\n"
        
        # –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        message += "üè† **–ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨:**\n"
        real_estate_tickers = ['PIKK', 'SMLT']
        real_estate_names = {'PIKK': '–ü–ò–ö', 'SMLT': '–°–∞–º–æ–ª—ë—Ç'}
        for i, ticker in enumerate(real_estate_tickers):
            if ticker in stocks_data and stocks_data[ticker].get('price'):
                name = real_estate_names[ticker]
                price = stocks_data[ticker]['price']
                prefix = "‚îú" if i < len(real_estate_tickers) - 1 else "‚îî"
                message += f"{prefix} {name}: **{format_price(price)} ‚ÇΩ**\n"
        message += "\n"
        
        # –¢–æ–≤–∞—Ä—ã 
        message += "üõ†Ô∏è **–ó–û–õ–û–¢–û, –ù–ï–§–¢–¨:**\n"
        commodities_data = await get_commodities_data()
        commodity_items = ['gold', 'silver', 'brent', 'urals']  # –î–æ–±–∞–≤–ª—è–µ–º urals
        commodity_names = {
            'gold': '–ó–æ–ª–æ—Ç–æ', 
            'silver': '–°–µ—Ä–µ–±—Ä–æ', 
            'brent': '–ù–µ—Ñ—Ç—å Brent',
            'urals': '–ù–µ—Ñ—Ç—å Urals'
        }
        
        for i, commodity in enumerate(commodity_items):
            if commodity in commodities_data:
                name = commodity_names[commodity]
                price = commodities_data[commodity]['price']
                rub_price = price * usd_to_rub_rate if usd_to_rub_rate > 0 else 0
                prefix = "‚îú" if i < len(commodity_items) - 1 else "‚îî"
                if rub_price > 0:
                    message += f"{prefix} {name}: **${format_price(price)}** ({format_price(rub_price)} ‚ÇΩ)\n"
                else:
                    message += f"{prefix} {name}: **${format_price(price)}**\n"
        message += "\n"
        
        # –§–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        message += "üìä **–§–û–ù–î–û–í–´–ï –ò–ù–î–ï–ö–°–´:**\n"
        indices_data = await get_indices_data()
        index_items = ['imoex', 'rts', 'sp500']
        
        for i, index in enumerate(index_items):
            if index in indices_data:
                name = indices_data[index]['name']
                price = indices_data[index]['price']
                change = indices_data[index].get('change_pct', 0)
                prefix = "‚îú" if i < len(index_items) - 1 else "‚îî"
                change_str = f"({change:+.2f}%)" if change != 0 else ""
                message += f"{prefix} {name}: **{format_price(price)}** {change_str}\n"
        message += "\n"
        
        # –í—Ä–µ–º—è –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        current_time = get_moscow_time().strftime("%d.%m.%Y %H:%M")
        message += f"üïê **–í—Ä–µ–º—è:** {current_time}\n"
        message += f"üì° **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** –¶–ë –†–§, CoinGecko, MOEX, Gold-API, Alpha Vantage"

        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ rates_command: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {str(e)}\n\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_text = update.message.text
    user_id = update.effective_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        user_data[user_id]['last_activity'] = get_moscow_time().isoformat()
        save_user_data()
    
    # –ü—Ä–æ—Å—Ç–æ–π —ç—Ö–æ –æ—Ç–≤–µ—Ç
    await update.message.reply_text(
        f"–ü–æ–ª—É—á–∏–ª: {message_text}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤"""
    user_id = update.effective_user.id
    notifications = load_notification_data()
    
    if str(user_id) not in notifications:
        notifications[str(user_id)] = {
            'subscribed': True,
            'threshold': 2.0,  # 2% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'alerts': {},
            'daily_summary': True
        }
        save_notification_data(notifications)
        
        await update.message.reply_html(
            "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            "üìà –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            "‚Ä¢ –†–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤ >2%\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–µ –≤ 9:00 –ú–°–ö\n\n"
            "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_alert –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤\n"
            "üîï /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏"
        )
    else:
        notifications[str(user_id)]['subscribed'] = True
        save_notification_data(notifications)
        
        await update.message.reply_html(
            "üîî <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view_alerts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        )

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    notifications = load_notification_data()
    
    if str(user_id) in notifications:
        notifications[str(user_id)]['subscribed'] = False
        save_notification_data(notifications)
        
        await update.message.reply_html(
            "üîï <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n"
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )
    else:
        await update.message.reply_html(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
        )

async def set_alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_html(
            "‚öôÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤</b>\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ <code>/set_alert USD 85</code> - –¥–æ–ª–ª–∞—Ä –≤—ã—à–µ 85‚ÇΩ\n"
            "‚Ä¢ <code>/set_alert BTC 115000</code> - –±–∏—Ç–∫–æ–∏–Ω –Ω–∏–∂–µ 115K$\n"
            "‚Ä¢ <code>/set_alert SBER 200</code> - –°–±–µ—Ä –≤—ã—à–µ 200‚ÇΩ\n\n"
            "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã:\n"
            "‚Ä¢ –í–∞–ª—é—Ç—ã: USD, EUR, CNY, GBP\n"
            "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: BTC, ETH, TON, XRP, ADA, SOL, DOGE\n"
            "‚Ä¢ –ê–∫—Ü–∏–∏: SBER, YDEX, VKCO, T, GAZP, GMKN, ROSN, LKOH, MTSS, MFON, PIKK, SMLT"
        )
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç–∏–≤ –∏ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    
    asset = context.args[0].upper()
    try:
        threshold = float(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    notifications = load_notification_data()
    if str(user_id) not in notifications:
        notifications[str(user_id)] = {
            'subscribed': True,
            'threshold': 2.0,
            'alerts': {},
            'daily_summary': True
        }
    
    notifications[str(user_id)]['alerts'][asset] = threshold
    save_notification_data(notifications)
    
    await update.message.reply_html(
        f"‚úÖ <b>–ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"üéØ <b>–ê–∫—Ç–∏–≤:</b> {asset}\n"
        f"üìä <b>–ü–æ—Ä–æ–≥:</b> {threshold}\n\n"
        f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
    )

async def view_alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
    user_id = update.effective_user.id
    notifications = load_notification_data()
    
    if str(user_id) not in notifications:
        await update.message.reply_html(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        return
    
    user_notifications = notifications[str(user_id)]
    
    status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if user_notifications.get('subscribed', False) else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
    threshold = user_notifications.get('threshold', 2.0)
    daily = "‚úÖ –î–∞" if user_notifications.get('daily_summary', False) else "‚ùå –ù–µ—Ç"
    
    alerts_text = ""
    alerts = user_notifications.get('alerts', {})
    if alerts:
        alerts_text = "\n\nüìä <b>–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:</b>\n"
        for asset, value in alerts.items():
            alerts_text += f"‚Ä¢ {asset}: {value}\n"
    else:
        alerts_text = "\n\nüìä <b>–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:</b> –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    message = (
        f"‚öôÔ∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"üîî <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        f"üìà <b>–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b> {threshold}%\n"
        f"üåÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞:</b> {daily}"
        f"{alerts_text}"
    )
    
    await update.message.reply_html(message)

async def test_daily_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    await update.message.reply_text("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É...")
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –≤—Ä—É—á–Ω—É—é
        await daily_summary_job(context)
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–≤–æ–¥–∫–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")

async def check_subscribers_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        notifications = load_notification_data()
        
        if not notifications:
            await update.message.reply_html(
                "üìã **–°–¢–ê–¢–£–° –ü–û–î–ü–ò–°–û–ö**\n\n"
                "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                "üí° –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe"
            )
            return
        
        message = "üìã **–°–¢–ê–¢–£–° –ü–û–î–ü–ò–°–û–ö**\n\n"
        
        total_users = len(notifications)
        active_subscribers = 0
        daily_summary_subscribers = 0
        
        for uid, data in notifications.items():
            if data.get('subscribed', False):
                active_subscribers += 1
            if data.get('daily_summary', True) and data.get('subscribed', False):
                daily_summary_subscribers += 1
        
        message += f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}\n"
        message += f"üîî **–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:** {active_subscribers}\n"
        message += f"üåÖ **–ü–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É:** {daily_summary_subscribers}\n\n"
        
        if daily_summary_subscribers > 0:
            message += "üë§ **–î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:**\n"
            for uid, data in notifications.items():
                if data.get('subscribed', False) and data.get('daily_summary', True):
                    alerts_count = len(data.get('alerts', {}))
                    threshold = data.get('threshold', 2.0)
                    message += f"‚îú ID: {uid}\n"
                    message += f"‚îú –ü–æ—Ä–æ–≥: {threshold}%\n"
                    message += f"‚îî –ê–ª–µ—Ä—Ç–æ–≤: {alerts_count}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        import os
        file_exists = os.path.exists(NOTIFICATION_DATA_FILE)
        message += f"üíæ **–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö:** {'‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' if file_exists else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        
        if file_exists:
            file_size = os.path.getsize(NOTIFICATION_DATA_FILE)
            message += f"üìè **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {file_size} –±–∞–π—Ç"
        
        await update.message.reply_html(message)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ check_subscribers: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def get_commodities_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏–∑ –ü–û–õ–ù–û–°–¢–¨–Æ –ë–ï–°–ü–õ–ê–¢–ù–´–• –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    commodities_data = {}
    
    try:
        # ü•á Gold-API.com - –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–ª—è –∑–æ–ª–æ—Ç–∞ –∏ —Å–µ—Ä–µ–±—Ä–∞, –±–µ–∑ –∫–ª—é—á–µ–π!
        logger.info("ü•á –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –º–µ—Ç–∞–ª–ª—ã —Å Gold-API.com (100% –±–µ—Å–ø–ª–∞—Ç–Ω–æ)...")
        
        # –ó–æ–ª–æ—Ç–æ
        try:
            gold_response = requests.get("https://api.gold-api.com/price/XAU", timeout=10)
            logger.info(f"üìä Gold-API –∑–æ–ª–æ—Ç–æ —Å—Ç–∞—Ç—É—Å: {gold_response.status_code}")
            
            if gold_response.status_code == 200:
                gold_data = gold_response.json()
                logger.info(f"üìä Gold-API –∑–æ–ª–æ—Ç–æ –æ—Ç–≤–µ—Ç: {gold_data}")
                
                if 'price' in gold_data:
                    commodities_data['gold'] = {
                        'name': '–ó–æ–ª–æ—Ç–æ',
                        'price': gold_data['price'],
                        'currency': 'USD'
                    }
                    logger.info(f"‚úÖ –ó–æ–ª–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ: ${gold_data['price']:.2f}")
                else:
                    logger.warning("‚ùå Gold-API: –Ω–µ—Ç 'price' –≤ –æ—Ç–≤–µ—Ç–µ –∑–æ–ª–æ—Ç–∞")
            else:
                logger.error(f"‚ùå Gold-API –∑–æ–ª–æ—Ç–æ –æ—à–∏–±–∫–∞ {gold_response.status_code}: {gold_response.text}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–æ–ª–æ—Ç–∞: {e}")
        
        # –°–µ—Ä–µ–±—Ä–æ
        try:
            silver_response = requests.get("https://api.gold-api.com/price/XAG", timeout=10)
            logger.info(f"üìä Gold-API —Å–µ—Ä–µ–±—Ä–æ —Å—Ç–∞—Ç—É—Å: {silver_response.status_code}")
            
            if silver_response.status_code == 200:
                silver_data = silver_response.json()
                logger.info(f"üìä Gold-API —Å–µ—Ä–µ–±—Ä–æ –æ—Ç–≤–µ—Ç: {silver_data}")
                
                if 'price' in silver_data:
                    commodities_data['silver'] = {
                        'name': '–°–µ—Ä–µ–±—Ä–æ',
                        'price': silver_data['price'],
                        'currency': 'USD'
                    }
                    logger.info(f"‚úÖ –°–µ—Ä–µ–±—Ä–æ –ø–æ–ª—É—á–µ–Ω–æ: ${silver_data['price']:.2f}")
                else:
                    logger.warning("‚ùå Gold-API: –Ω–µ—Ç 'price' –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–µ–±—Ä–∞")
            else:
                logger.error(f"‚ùå Gold-API —Å–µ—Ä–µ–±—Ä–æ –æ—à–∏–±–∫–∞ {silver_response.status_code}: {silver_response.text}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–µ–±—Ä–∞: {e}")
        
        # üõ¢Ô∏è EIA API –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–µ—Ñ—Ç–∏ Brent (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –°–®–ê, –±–µ—Å–ø–ª–∞—Ç–Ω–æ!)
        logger.info(f"üõ¢Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–µ—Ñ—Ç—å Brent –∏–∑ EIA API, –∫–ª—é—á: {EIA_API_KEY[:10]}...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É Brent Europe –∏–∑ EIA
            brent_response = requests.get(
                f"https://api.eia.gov/v2/petroleum/pri/spt/data/?api_key={EIA_API_KEY}&facets[product][]=EPCBRENT&data[0]=value&sort[0][column]=period&sort[0][direction]=desc&length=1",
                timeout=10
            )
            logger.info(f"üìä EIA Brent —Å—Ç–∞—Ç—É—Å: {brent_response.status_code}")
            
            if brent_response.status_code == 200:
                brent_data = brent_response.json()
                logger.info(f"üìä EIA Brent –æ—Ç–≤–µ—Ç: {brent_data}")
                
                # EIA –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ "response.data"
                if 'response' in brent_data and 'data' in brent_data['response'] and len(brent_data['response']['data']) > 0:
                    brent_price = float(brent_data['response']['data'][0]['value'])
                    commodities_data['brent'] = {
                        'name': '–ù–µ—Ñ—Ç—å Brent',
                        'price': brent_price,
                        'currency': 'USD'
                    }
                    logger.info(f"‚úÖ –ù–µ—Ñ—Ç—å Brent –ø–æ–ª—É—á–µ–Ω–∞: ${brent_price:.2f}")
                else:
                    logger.warning(f"‚ùå EIA: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ: {brent_data}")
            else:
                logger.error(f"‚ùå EIA Brent –æ—à–∏–±–∫–∞ {brent_response.status_code}: {brent_response.text}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Brent –∏–∑ EIA: {e}")
        
        # Fallback: Alpha Vantage –¥–ª—è –Ω–µ—Ñ—Ç–∏ WTI —á–µ—Ä–µ–∑ USO ETF (–µ—Å–ª–∏ EIA –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
        if 'brent' not in commodities_data:
            logger.info("üîÑ EIA –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Alpha Vantage USO ETF...")
            try:
                oil_response = requests.get(
                    f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=USO&apikey={ALPHA_VANTAGE_KEY}",
                    timeout=10
                )
                logger.info(f"üìä Alpha Vantage USO —Å—Ç–∞—Ç—É—Å: {oil_response.status_code}")
                
                if oil_response.status_code == 200:
                    oil_data = oil_response.json()
                    logger.info(f"üìä Alpha Vantage USO –æ—Ç–≤–µ—Ç: {oil_data}")
                    
                    if 'Global Quote' in oil_data and '05. price' in oil_data['Global Quote']:
                        oil_price = float(oil_data['Global Quote']['05. price'])
                        estimated_oil_price = oil_price * 12  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USO ETF
                        commodities_data['brent'] = {
                            'name': '–ù–µ—Ñ—Ç—å Brent (–ø—Ä–∏–±–ª–∏–∑.)',
                            'price': estimated_oil_price,
                            'currency': 'USD'
                        }
                        logger.info(f"‚úÖ –ù–µ—Ñ—Ç—å Brent (USO fallback): ${estimated_oil_price:.2f}")
                    else:
                        logger.warning(f"‚ùå Alpha Vantage USO: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {oil_data}")
                else:
                    logger.error(f"‚ùå Alpha Vantage USO –æ—à–∏–±–∫–∞ {oil_response.status_code}: {oil_response.text}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Alpha Vantage USO: {e}")
        
        # Fallback —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–µ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö!)
        if 'silver' not in commodities_data and 'gold' in commodities_data:
            logger.info("üîÑ –°–µ—Ä–µ–±—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç –∑–æ–ª–æ—Ç–∞...")
            gold_price = commodities_data['gold']['price']
            silver_fallback = gold_price / 80  # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            commodities_data['silver'] = {
                'name': '–°–µ—Ä–µ–±—Ä–æ (—Ä–∞—Å—á–µ—Ç–Ω–æ–µ)',
                'price': silver_fallback,
                'currency': 'USD'
            }
            logger.info(f"‚úÖ –°–µ—Ä–µ–±—Ä–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ: ${silver_fallback:.2f}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Urals –æ—Ç Brent (—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –Ω–µ—Ñ—Ç—å —Ç–æ—Ä–≥—É–µ—Ç—Å—è —Å –¥–∏—Å–∫–æ–Ω—Ç–æ–º)
        if 'brent' in commodities_data:
            logger.info("üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Urals –æ—Ç Brent...")
            brent_price = commodities_data['brent']['price']
            # Urals –æ–±—ã—á–Ω–æ —Ç–æ—Ä–≥—É–µ—Ç—Å—è —Å –¥–∏—Å–∫–æ–Ω—Ç–æ–º $2-5 –∫ Brent
            urals_discount = 3.5  # –°—Ä–µ–¥–Ω–∏–π –¥–∏—Å–∫–æ–Ω—Ç
            urals_price = brent_price - urals_discount
            commodities_data['urals'] = {
                'name': '–ù–µ—Ñ—Ç—å Urals (—Ä–∞—Å—á–µ—Ç–Ω–∞—è)',
                'price': urals_price,
                'currency': 'USD'
            }
            logger.info(f"‚úÖ Urals —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: ${urals_price:.2f} (Brent ${brent_price:.2f} - ${urals_discount})")
        
        if 'brent' not in commodities_data:
            logger.warning("‚ö†Ô∏è –ù–µ—Ñ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ –≤—Å–µ—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    logger.info(f"üìä –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(commodities_data)} - {list(commodities_data.keys())}")
    return commodities_data

async def get_indices_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º: IMOEX, RTS, S&P 500"""
    indices_data = {}
    
    try:
        # 1. –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã —á–µ—Ä–µ–∑ MOEX (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ)
        logger.info("üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã —Å MOEX...")
        async with aiohttp.ClientSession() as session:
            # IMOEX
            imoex_url = "https://iss.moex.com/iss/engines/stock/markets/index/securities/IMOEX.json"
            logger.info(f"üìà –ó–∞–ø—Ä–∞—à–∏–≤–∞—é IMOEX: {imoex_url}")
            async with session.get(imoex_url) as resp:
                logger.info(f"üìä IMOEX —Å—Ç–∞—Ç—É—Å: {resp.status}")
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"üìä IMOEX —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys()) if isinstance(data, dict) else '–Ω–µ dict'}")
                    
                    if 'marketdata' in data and 'data' in data['marketdata'] and len(data['marketdata']['data']) > 0:
                        logger.info(f"üìä IMOEX marketdata –Ω–∞–π–¥–µ–Ω, —Å—Ç—Ä–æ–∫: {len(data['marketdata']['data'])}")
                        logger.info(f"üìä IMOEX –∫–æ–ª–æ–Ω–∫–∏: {data['marketdata']['columns']}")
                        logger.info(f"üìä IMOEX –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {data['marketdata']['data'][0]}")
                        
                        row_data = dict(zip(data['marketdata']['columns'], data['marketdata']['data'][0]))
                        logger.info(f"üìä IMOEX —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {row_data}")
                        
                        if 'LASTVALUE' in row_data and row_data['LASTVALUE']:
                            indices_data['imoex'] = {
                                'name': 'IMOEX',
                                'price': row_data['LASTVALUE'],
                                'change_pct': row_data.get('LASTCHANGEPRC', 0)
                            }
                            logger.info(f"‚úÖ IMOEX –ø–æ–ª—É—á–µ–Ω: {row_data['LASTVALUE']}")
                        else:
                            logger.warning(f"‚ùå IMOEX: –Ω–µ—Ç LASTVALUE –∏–ª–∏ LASTVALUE –ø—É—Å—Ç–æ–π: {row_data.get('LASTVALUE')}")
                    else:
                        logger.warning("‚ùå IMOEX: –Ω–µ—Ç marketdata –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    response_text = await resp.text()
                    logger.error(f"‚ùå IMOEX –æ—à–∏–±–∫–∞ {resp.status}: {response_text[:200]}...")
            
            # RTS
            rts_url = "https://iss.moex.com/iss/engines/stock/markets/index/securities/RTSI.json"
            logger.info(f"üìà –ó–∞–ø—Ä–∞—à–∏–≤–∞—é RTS: {rts_url}")
            async with session.get(rts_url) as resp:
                logger.info(f"üìä RTS —Å—Ç–∞—Ç—É—Å: {resp.status}")
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"üìä RTS —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys()) if isinstance(data, dict) else '–Ω–µ dict'}")
                    
                    if 'marketdata' in data and 'data' in data['marketdata'] and len(data['marketdata']['data']) > 0:
                        logger.info(f"üìä RTS marketdata –Ω–∞–π–¥–µ–Ω, —Å—Ç—Ä–æ–∫: {len(data['marketdata']['data'])}")
                        logger.info(f"üìä RTS –∫–æ–ª–æ–Ω–∫–∏: {data['marketdata']['columns']}")
                        logger.info(f"üìä RTS –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {data['marketdata']['data'][0]}")
                        
                        row_data = dict(zip(data['marketdata']['columns'], data['marketdata']['data'][0]))
                        logger.info(f"üìä RTS —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {row_data}")
                        
                        if 'LASTVALUE' in row_data and row_data['LASTVALUE']:
                            indices_data['rts'] = {
                                'name': 'RTS',
                                'price': row_data['LASTVALUE'],
                                'change_pct': row_data.get('LASTCHANGEPRC', 0)
                            }
                            logger.info(f"‚úÖ RTS –ø–æ–ª—É—á–µ–Ω: {row_data['LASTVALUE']}")
                        else:
                            logger.warning(f"‚ùå RTS: –Ω–µ—Ç LASTVALUE –∏–ª–∏ LASTVALUE –ø—É—Å—Ç–æ–π: {row_data.get('LASTVALUE')}")
                    else:
                        logger.warning("‚ùå RTS: –Ω–µ—Ç marketdata –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    response_text = await resp.text() 
                    logger.error(f"‚ùå RTS –æ—à–∏–±–∫–∞ {resp.status}: {response_text[:200]}...")
        
        # 2. S&P 500 —á–µ—Ä–µ–∑ Financial Modeling Prep (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
        logger.info(f"üìà –ó–∞–ø—Ä–∞—à–∏–≤–∞—é S&P 500 —Å FMP, –∫–ª—é—á: {FMP_API_KEY[:10]}...")
        sp500_response = requests.get(
            f"https://financialmodelingprep.com/api/v3/quote/%5EGSPC?apikey={FMP_API_KEY}",
            timeout=10
        )
        logger.info(f"üìä FMP —Å—Ç–∞—Ç—É—Å: {sp500_response.status_code}")
        
        if sp500_response.status_code == 200:
            sp500_data = sp500_response.json()
            logger.info(f"üìä FMP –æ—Ç–≤–µ—Ç: {sp500_data}")
            
            if isinstance(sp500_data, list) and len(sp500_data) > 0:
                sp500_info = sp500_data[0]
                if 'price' in sp500_info:
                    indices_data['sp500'] = {
                        'name': 'S&P 500',
                        'price': sp500_info['price'],
                        'change_pct': sp500_info.get('changesPercentage', 0)
                    }
                    logger.info(f"‚úÖ S&P 500 –ø–æ–ª—É—á–µ–Ω: {sp500_info['price']}")
                else:
                    logger.warning("‚ùå S&P 500: –Ω–µ—Ç 'price' –≤ –æ—Ç–≤–µ—Ç–µ FMP")
            else:
                logger.warning("‚ùå S&P 500: –æ—Ç–≤–µ—Ç FMP –Ω–µ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—É—Å—Ç–æ–π")
        else:
            logger.error(f"‚ùå FMP –æ—à–∏–±–∫–∞ {sp500_response.status_code}: {sp500_response.text}")
        
        # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º Alpha Vantage –¥–ª—è S&P 500 –µ—Å–ª–∏ FMP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if 'sp500' not in indices_data:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º fallback Alpha Vantage –¥–ª—è S&P 500, –∫–ª—é—á: {ALPHA_VANTAGE_KEY[:10]}...")
            try:
                alpha_response = requests.get(
                    f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=SPY&apikey={ALPHA_VANTAGE_KEY}",
                    timeout=10
                )
                logger.info(f"üìä Alpha Vantage —Å—Ç–∞—Ç—É—Å: {alpha_response.status_code}")
                
                if alpha_response.status_code == 200:
                    alpha_data = alpha_response.json()
                    logger.info(f"üìä Alpha Vantage –æ—Ç–≤–µ—Ç: {alpha_data}")
                    
                    if 'Global Quote' in alpha_data:
                        quote = alpha_data['Global Quote']
                        if '05. price' in quote:
                            price = float(quote['05. price'])
                            change_pct = float(quote['10. change percent'].replace('%', ''))
                            indices_data['sp500'] = {
                                'name': 'S&P 500 (SPY)',
                                'price': price,
                                'change_pct': change_pct
                            }
                            logger.info(f"‚úÖ S&P 500 –∏–∑ Alpha Vantage: {price}")
                        else:
                            logger.warning("‚ùå Alpha Vantage: –Ω–µ—Ç '05. price'")
                    else:
                        logger.warning("‚ùå Alpha Vantage: –Ω–µ—Ç 'Global Quote'")
                else:
                    logger.error(f"‚ùå Alpha Vantage –æ—à–∏–±–∫–∞ {alpha_response.status_code}: {alpha_response.text}")
            except Exception as fallback_e:
                logger.error(f"‚ùå Alpha Vantage fallback –æ—à–∏–±–∫–∞: {fallback_e}")
                    
        # Fallback: –µ—Å–ª–∏ S&P 500 –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (Alpha Vantage –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
        if 'sp500' not in indices_data:
            logger.warning("‚ö†Ô∏è S&P 500 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ –∏–∑ Alpha Vantage - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á API")
                    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
    
    logger.info(f"üìä –ò—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(indices_data)} - {list(indices_data.keys())}")
    return indices_data

# –§—É–Ω–∫—Ü–∏—è get_crypto_extended() —É–¥–∞–ª–µ–Ω–∞ - –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ CoinGecko

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
NOTIFICATION_DATA_FILE = 'notifications.json'
PRICE_HISTORY_FILE = 'price_history.json'
SETTINGS_FILE = 'bot_settings.json'

def load_notification_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        if os.path.exists(NOTIFICATION_DATA_FILE):
            with open(NOTIFICATION_DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {}

def save_notification_data(data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        with open(NOTIFICATION_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

def load_price_history():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω"""
    try:
        if os.path.exists(PRICE_HISTORY_FILE):
            with open(PRICE_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return {}

def save_price_history(data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω"""
    try:
        with open(PRICE_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def load_bot_settings():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            'daily_summary_time': '09:00',  # –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
            'timezone': 'Europe/Moscow'
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return {
            'daily_summary_time': '09:00',
            'timezone': 'Europe/Moscow'
        }

def save_bot_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {settings}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def validate_time_format(time_str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ HH:MM"""
    try:
        parts = time_str.split(':')
        if len(parts) != 2:
            return False
        
        hour = int(parts[0])
        minute = int(parts[1])
        
        if not (0 <= hour <= 23):
            return False
        if not (0 <= minute <= 59):
            return False
            
        return True
    except (ValueError, AttributeError):
        return False

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_price_changes(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_prices = {}
        
        # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
        cbr_response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
        if cbr_response.status_code == 200:
            cbr_data = cbr_response.json()
            current_prices.update({
                'USD': cbr_data.get('Valute', {}).get('USD', {}).get('Value'),
                'EUR': cbr_data.get('Valute', {}).get('EUR', {}).get('Value'),
                'CNY': cbr_data.get('Valute', {}).get('CNY', {}).get('Value'),
                'GBP': cbr_data.get('Valute', {}).get('GBP', {}).get('Value')
            })
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        crypto_response = requests.get(
            "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,the-open-network,ripple,cardano,solana,dogecoin&vs_currencies=usd",
            timeout=10
        )
        if crypto_response.status_code == 200:
            crypto_data = crypto_response.json()
            current_prices.update({
                'BTC': crypto_data.get('bitcoin', {}).get('usd'),
                'ETH': crypto_data.get('ethereum', {}).get('usd'),
                'TON': crypto_data.get('the-open-network', {}).get('usd'),
                'XRP': crypto_data.get('ripple', {}).get('usd'),
                'ADA': crypto_data.get('cardano', {}).get('usd'),
                'SOL': crypto_data.get('solana', {}).get('usd'),
                'DOGE': crypto_data.get('dogecoin', {}).get('usd')
            })
        
        # –ê–∫—Ü–∏–∏
        moex_data = await get_moex_stocks()
        for ticker, data in moex_data.items():
            current_prices[ticker] = data.get('price')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ü–µ–Ω—ã
        price_history = load_price_history()
        notifications = load_notification_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for user_id, user_notifications in notifications.items():
            if not user_notifications.get('subscribed', False):
                continue
            
            threshold = user_notifications.get('threshold', 2.0)
            alerts = user_notifications.get('alerts', {})
            
            notifications_to_send = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            for asset, current_price in current_prices.items():
                if current_price is None:
                    continue
                
                previous_price = price_history.get(asset)
                if previous_price is None:
                    continue
                
                change_pct = ((current_price - previous_price) / previous_price) * 100
                
                if abs(change_pct) >= threshold:
                    emoji = "üìà" if change_pct > 0 else "üìâ"
                    notifications_to_send.append(
                        f"{emoji} <b>{asset}</b>: {change_pct:+.2f}% "
                        f"({previous_price:.2f} ‚Üí {current_price:.2f})"
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
            for asset, alert_threshold in alerts.items():
                current_price = current_prices.get(asset)
                if current_price is None:
                    continue
                
                if current_price >= alert_threshold:
                    notifications_to_send.append(
                        f"üö® <b>–ê–õ–ï–†–¢:</b> {asset} –¥–æ—Å—Ç–∏–≥ {current_price:.2f} "
                        f"(–ø–æ—Ä–æ–≥: {alert_threshold})"
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if notifications_to_send:
                message = "üîî <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –¶–ï–ù–ê–•</b>\n\n" + "\n".join(notifications_to_send)
                try:
                    await context.bot.send_message(
                        chat_id=int(user_id),
                        text=message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—é
        price_history.update({k: v for k, v in current_prices.items() if v is not None})
        save_price_history(price_history)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω: {e}")

async def daily_summary_job(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –≤ 9:00 –ú–°–ö"""
    logger.info("üåÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏...")
    
    try:
        notifications = load_notification_data()
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications)}")
        
        if not notifications:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏")
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        active_subscribers = 0
        for user_id, user_notifications in notifications.items():
            if not user_notifications.get('subscribed', False):
                continue
            if not user_notifications.get('daily_summary', True):
                continue
            active_subscribers += 1
        
        logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É: {active_subscribers}")
        
        if active_subscribers == 0:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è —Å–≤–æ–¥–∫–∏
        logger.info("üì° –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏...")
        
        for user_id, user_notifications in notifications.items():
            if not user_notifications.get('subscribed', False):
                continue
            if not user_notifications.get('daily_summary', True):
                continue
            
            try:
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–≤–æ–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text="üåÖ **–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê**\n\nüìä –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...",
                    parse_mode='Markdown'
                )
                
                # –°–æ–∑–¥–∞–µ–º fake Update –¥–ª—è –≤—ã–∑–æ–≤–∞ rates_command
                # –ü–æ—Å–∫–æ–ª—å–∫—É rates_command –Ω—É–∂–µ–Ω Update –æ–±—ä–µ–∫—Ç, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π
                class FakeUpdate:
                    def __init__(self, user_id):
                        self.effective_user = type('obj', (object,), {'id': user_id})
                        self.message = type('obj', (object,), {
                            'reply_text': lambda text, parse_mode=None: context.bot.send_message(
                                chat_id=user_id, text=text, parse_mode=parse_mode
                            )
                        })
                
                fake_update = FakeUpdate(int(user_id))
                
                # –í—ã–∑—ã–≤–∞–µ–º rates_command –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å–≤–æ–¥–∫–∏
                await rates_command(fake_update, context)
                
                logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"üéâ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {active_subscribers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
        import traceback
        logger.error(f"üìã –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")

async def set_daily_time_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if not context.args:
        await update.message.reply_html(
            "‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏</b>\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "/set_daily_time HH:MM\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ /set_daily_time 09:00 - —Å–≤–æ–¥–∫–∞ –≤ 9:00 –ú–°–ö\n"
            "‚Ä¢ /set_daily_time 21:30 - —Å–≤–æ–¥–∫–∞ –≤ 21:30 –ú–°–ö\n"
            "‚Ä¢ /set_daily_time 06:15 - —Å–≤–æ–¥–∫–∞ –≤ 6:15 –ú–°–ö\n\n"
            "üí° –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"
        )
        return
    
    time_str = context.args[0]
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if not validate_time_format(time_str):
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>HH:MM</b> (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00, 15:30, 21:45\n\n"
            "–ß–∞—Å—ã: –æ—Ç 00 –¥–æ 23\n"
            "–ú–∏–Ω—É—Ç—ã: –æ—Ç 00 –¥–æ 59"
        )
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = load_bot_settings()
        old_time = settings.get('daily_summary_time', '09:00')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        settings['daily_summary_time'] = time_str
        save_bot_settings(settings)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        job_queue = get_job_queue(context)
        restart_success = False
        
        if job_queue:
            try:
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
                current_jobs = job_queue.get_jobs_by_name("daily_summary")
                if current_jobs:
                    for job in current_jobs:
                        job.schedule_removal()
                
                # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
                hour, minute = map(int, time_str.split(':'))
                moscow_tz = pytz.timezone('Europe/Moscow')
                daily_time = time(hour=hour, minute=minute, tzinfo=moscow_tz)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                job_queue.run_daily(
                    daily_summary_job,
                    time=daily_time,
                    name="daily_summary"
                )
                
                restart_success = True
                logger.info(f"üîÑ –ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ {time_str}")
                
            except Exception as restart_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {restart_error}")
        
        if restart_success:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            from datetime import datetime
            moscow_tz = pytz.timezone('Europe/Moscow')
            current_moscow_time = datetime.now(moscow_tz)
            hour, minute = map(int, time_str.split(':'))
            next_run = current_moscow_time.replace(hour=hour, minute=minute, second=0, microsecond=0)
            if current_moscow_time.hour > hour or (current_moscow_time.hour == hour and current_moscow_time.minute >= minute):
                next_run = next_run.replace(day=next_run.day + 1)
            
            time_until = next_run - current_moscow_time
            hours_until = int(time_until.total_seconds() // 3600)
            minutes_until = int((time_until.total_seconds() % 3600) // 60)
            
            await update.message.reply_html(
                f"‚úÖ <b>–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üïê <b>–ë—ã–ª–æ:</b> {old_time} –ú–°–ö\n"
                f"üïê <b>–°—Ç–∞–ª–æ:</b> {time_str} –ú–°–ö\n\n"
                f"üîÑ <b>–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞!</b>\n"
                f"‚è∞ <b>–î–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–æ–¥–∫–∏:</b> {hours_until}—á {minutes_until}–º–∏–Ω\n"
                f"üìä <b>–°–ª–µ–¥—É—é—â–∞—è —Å–≤–æ–¥–∫–∞:</b> {next_run.strftime('%H:%M %d.%m.%Y')}\n\n"
                f"üéâ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!"
            )
        else:
            await update.message.reply_html(
                f"‚úÖ <b>–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üïê <b>–ë—ã–ª–æ:</b> {old_time} –ú–°–ö\n"
                f"üïê <b>–°—Ç–∞–ª–æ:</b> {time_str} –ú–°–ö\n\n"
                f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É.\n"
                f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /restart_daily_job –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –Ω–∞ Railway."
            )
        
        logger.info(f"‚è∞ –ê–¥–º–∏–Ω {user_id} –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {old_time} ‚Üí {time_str}")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ set_daily_time: {e}")

async def get_daily_settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        settings = load_bot_settings()
        notifications = load_notification_data()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        total_users = len(notifications)
        active_subscribers = 0
        daily_summary_subscribers = 0
        
        for uid, data in notifications.items():
            if data.get('subscribed', False):
                active_subscribers += 1
            if data.get('daily_summary', True) and data.get('subscribed', False):
                daily_summary_subscribers += 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_tz = pytz.timezone(settings.get('timezone', 'Europe/Moscow'))
        current_time = datetime.now(moscow_tz)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–æ–¥–∫–∏
        daily_time_str = settings.get('daily_summary_time', '09:00')
        hour, minute = map(int, daily_time_str.split(':'))
        
        next_run = current_time.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if current_time.hour > hour or (current_time.hour == hour and current_time.minute >= minute):
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            next_run = next_run.replace(day=next_run.day + 1)
        
        time_until = next_run - current_time
        hours_until = int(time_until.total_seconds() // 3600)
        minutes_until = int((time_until.total_seconds() % 3600) // 60)
        
        message = (
            f"‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –ï–ñ–ï–î–ù–ï–í–ù–û–ô –°–í–û–î–ö–ò</b>\n\n"
            f"üïê <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {daily_time_str} –ú–°–ö\n"
            f"üåç <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {settings.get('timezone', 'Europe/Moscow')}\n"
            f"üìÖ <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> {current_time.strftime('%H:%M:%S %d.%m.%Y')}\n\n"
            f"‚è∞ <b>–î–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–æ–¥–∫–∏:</b> {hours_until}—á {minutes_until}–º–∏–Ω\n"
            f"üìä <b>–°–ª–µ–¥—É—é—â–∞—è —Å–≤–æ–¥–∫–∞:</b> {next_run.strftime('%H:%M %d.%m.%Y')}\n\n"
            f"üë• <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–î–ü–ò–°–ß–ò–ö–û–í:</b>\n"
            f"‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {active_subscribers}\n"
            f"‚îî –ü–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ —Å–≤–æ–¥–∫—É: {daily_summary_subscribers}\n\n"
            f"üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            f"‚Ä¢ /set_daily_time HH:MM - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è\n"
            f"‚Ä¢ /restart_daily_job - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É\n"
            f"‚Ä¢ /test_daily - —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫\n"
            f"‚Ä¢ /check_subscribers - –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
        )
        
        await update.message.reply_html(message)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ get_daily_settings: {e}")

async def restart_daily_job_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        await update.message.reply_html("üîÑ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏...</b>")
        
        # –ü–æ–ª—É—á–∞–µ–º job_queue –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        job_queue = get_job_queue(context)
        if not job_queue:
            await update.message.reply_html("‚ùå –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á: {type(job_queue).__name__}")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
        current_jobs = job_queue.get_jobs_by_name("daily_summary")
        if current_jobs:
            for job in current_jobs:
                job.schedule_removal()
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(current_jobs)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = load_bot_settings()
        daily_time_str = settings.get('daily_summary_time', '09:00')
        timezone_str = settings.get('timezone', 'Europe/Moscow')
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        hour, minute = map(int, daily_time_str.split(':'))
        moscow_tz = pytz.timezone(timezone_str)
        daily_time = time(hour=hour, minute=minute, tzinfo=moscow_tz)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        job_queue.run_daily(
            daily_summary_job,
            time=daily_time,
            name="daily_summary"
        )
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        from datetime import datetime
        current_moscow_time = datetime.now(moscow_tz)
        next_run = current_moscow_time.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if current_moscow_time.hour > hour or (current_moscow_time.hour == hour and current_moscow_time.minute >= minute):
            next_run = next_run.replace(day=next_run.day + 1)
        
        time_until = next_run - current_moscow_time
        hours_until = int(time_until.total_seconds() // 3600)
        minutes_until = int((time_until.total_seconds() % 3600) // 60)
        
        await update.message.reply_html(
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
            f"üïê <b>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è:</b> {daily_time_str} –ú–°–ö\n"
            f"üìÖ <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> {current_moscow_time.strftime('%H:%M:%S')}\n"
            f"‚è∞ <b>–î–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–æ–¥–∫–∏:</b> {hours_until}—á {minutes_until}–º–∏–Ω\n"
            f"üìä <b>–°–ª–µ–¥—É—é—â–∞—è —Å–≤–æ–¥–∫–∞:</b> {next_run.strftime('%H:%M %d.%m.%Y')}\n\n"
            f"üéâ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!"
        )
        
        logger.info(f"üîÑ –ê–¥–º–∏–Ω {user_id} –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –∑–∞–¥–∞—á—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –Ω–∞ {daily_time_str}")
        
    except Exception as e:
        await update.message.reply_html(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏:</b>\n{e}")
        logger.error(f"–û—à–∏–±–∫–∞ restart_daily_job: {e}")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –µ—Å–ª–∏ JobQueue –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
class AlternativeJob:
    """–≠–º—É–ª—è—Ü–∏—è Job –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self, name, callback, job_queue):
        self.name = name
        self.callback = callback
        self.job_queue = job_queue
        self.removed = False
        logger.debug(f"üîß –°–æ–∑–¥–∞–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: {name}")
    
    def schedule_removal(self):
        """–ü–æ–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        self.removed = True
        logger.info(f"üóëÔ∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ {self.name} –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

class AlternativeJobQueue:
    """–ü—Ä–æ—Å—Ç–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ threading"""
    
    def __init__(self, application):
        self.application = application
        self.jobs = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –∏–º–µ–Ω–∞–º
        self.running = False
        self.active_timers = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
        logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á")
    
    def run_daily(self, callback, time, name):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É"""
        import time as time_module
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        if name in self.jobs:
            old_job = self.jobs[name]
            old_job.schedule_removal()
            self._stop_timer(name)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        job = AlternativeJob(name, callback, self)
        self.jobs[name] = job
        
        time_str = time.strftime('%H:%M')
        logger.info(f"üìÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É '{name}' –Ω–∞ {time_str}")
        
        if SCHEDULE_AVAILABLE:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ schedule –∑–∞–¥–∞—á–∏
            schedule.clear(name)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º schedule –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            schedule.every().day.at(time_str).do(self._run_job, callback, name).tag(name)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
            if not self.running:
                self.running = True
                thread = threading.Thread(target=self._schedule_runner, daemon=True)
                thread.start()
                logger.info("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω (schedule)")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π Timer –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            self._setup_timer_daily(callback, time, name)
            logger.info("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω (timer)")
    
    def run_repeating(self, callback, interval, first, name):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É"""
        logger.info(f"‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É '{name}' –∫–∞–∂–¥—ã–µ {interval}—Å")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        if name in self.jobs:
            old_job = self.jobs[name]
            old_job.schedule_removal()
            self._stop_timer(name)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        job = AlternativeJob(name, callback, self)
        self.jobs[name] = job
        
        def run_job():
            import asyncio
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞
                if name in self.jobs and not self.jobs[name].removed:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
                    context = type('obj', (object,), {
                        'bot': self.application.bot,
                        'job_queue': self
                    })
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(callback(context))
                    loop.close()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ {name}: {e}")
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        timer = threading.Timer(first, run_job)
        timer.daemon = True
        timer.start()
        self.active_timers[name + "_first"] = timer
        
        # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–ø—É—Å–∫–∏
        def repeat_job():
            if name in self.jobs and not self.jobs[name].removed:
                run_job()
                if self.running and name in self.jobs and not self.jobs[name].removed:
                    timer = threading.Timer(interval, repeat_job)
                    timer.daemon = True
                    timer.start()
                    self.active_timers[name + "_repeat"] = timer
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        repeat_timer = threading.Timer(first + interval, repeat_job)
        repeat_timer.daemon = True
        repeat_timer.start()
        self.active_timers[name + "_repeat_start"] = repeat_timer
    
    def _run_job(self, callback, name):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"""
        import asyncio
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞
            if name in self.jobs and self.jobs[name].removed:
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {name}")
                return
                
            logger.info(f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É: {name}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏
            context = type('obj', (object,), {
                'bot': self.application.bot,
                'job_queue': self
            })
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(callback(context))
            loop.close()
            
            logger.info(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ {name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ {name}: {e}")
    
    def _setup_timer_daily(self, callback, target_time, name):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Timer (–±–µ–∑ schedule)"""
        from datetime import datetime, timedelta
        import time as time_module
        
        def calculate_next_run():
            """–í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
            now = datetime.now()
            
            # –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
            hour = target_time.hour
            minute = target_time.minute
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è
            today_target = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if now >= today_target:
                next_run = today_target + timedelta(days=1)
            else:
                next_run = today_target
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã –¥–æ –∑–∞–ø—É—Å–∫–∞
            time_diff = next_run - now
            return time_diff.total_seconds(), next_run
        
        def run_and_reschedule():
            """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞
                if name in self.jobs and not self.jobs[name].removed:
                    self._run_job(callback, name)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è timer –∑–∞–¥–∞—á–∏ {name}: {e}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫
            if self.running and name in self.jobs and not self.jobs[name].removed:
                seconds_until, next_run = calculate_next_run()
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ {name}: {next_run.strftime('%H:%M %d.%m.%Y')} (—á–µ—Ä–µ–∑ {int(seconds_until/3600)}—á {int((seconds_until%3600)/60)}–º–∏–Ω)")
                
                timer = threading.Timer(seconds_until, run_and_reschedule)
                timer.daemon = True
                timer.start()
                self.active_timers[name + "_daily"] = timer
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
        seconds_until, next_run = calculate_next_run()
        logger.info(f"‚è∞ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ {name}: {next_run.strftime('%H:%M %d.%m.%Y')} (—á–µ—Ä–µ–∑ {int(seconds_until/3600)}—á {int((seconds_until%3600)/60)}–º–∏–Ω)")
        
        timer = threading.Timer(seconds_until, run_and_reschedule)
        timer.daemon = True
        timer.start()
        self.active_timers[name + "_daily"] = timer
        
        self.running = True
    
    def _schedule_runner(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ schedule –¥–æ—Å—Ç—É–ø–µ–Ω)"""
        if not SCHEDULE_AVAILABLE:
            logger.error("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å schedule_runner –±–µ–∑ –º–æ–¥—É–ª—è schedule")
            return
            
        import time as time_module
        
        logger.info("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
        while self.running:
            try:
                schedule.run_pending()
                time_module.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á: {e}")
                time_module.sleep(60)
    
    def get_jobs_by_name(self, name):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –∏–º–µ–Ω–∏"""
        if name in self.jobs and not self.jobs[name].removed:
            return [self.jobs[name]]
        return []

    def _stop_timer(self, name):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∑–∞–¥–∞—á–∏"""
        timers_to_remove = []
        for timer_name, timer in self.active_timers.items():
            if timer_name.startswith(name):
                try:
                    timer.cancel()
                    logger.debug(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä: {timer_name}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ {timer_name}: {e}")
                timers_to_remove.append(timer_name)
        
        # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        for timer_name in timers_to_remove:
            del self.active_timers[timer_name]

def get_job_queue(context=None):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞–¥–∞—á"""
    global GLOBAL_JOB_QUEUE
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if context and hasattr(context, 'job_queue') and context.job_queue:
        logger.debug("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è job_queue –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        return context.job_queue
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é
    if GLOBAL_JOB_QUEUE:
        logger.debug("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á")
        return GLOBAL_JOB_QUEUE
    
    logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    return None

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    global GLOBAL_JOB_QUEUE
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_user_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —è–≤–Ω–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–º JobQueue
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å JobQueue –∏ –≤—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    job_queue = application.job_queue
    logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ JobQueue:")
    logger.info(f"   application.job_queue: {job_queue}")
    logger.info(f"   type: {type(job_queue)}")
    logger.info(f"   bool(job_queue): {bool(job_queue)}")
    
    if job_queue is None:
        logger.error("‚ùå JobQueue is None! –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ...")
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–º–ø–æ—Ä—Ç–∞ JobQueue
            job_queue_created = False
            
            # –°–ø–æ—Å–æ–± 1: –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç
            try:
                from telegram.ext import JobQueue as TelegramJobQueue
                job_queue = TelegramJobQueue()
                application._job_queue = job_queue
                job_queue_created = True
                logger.info("‚úÖ JobQueue —Å–æ–∑–¥–∞–Ω (—Å–ø–æ—Å–æ–± 1: –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç)")
            except Exception as e1:
                logger.warning(f"‚ö†Ô∏è –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e1}")
            
            # –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å
            if not job_queue_created:
                try:
                    from telegram.ext._jobqueue import JobQueue as PrivateJobQueue
                    job_queue = PrivateJobQueue()
                    application._job_queue = job_queue
                    job_queue_created = True
                    logger.info("‚úÖ JobQueue —Å–æ–∑–¥–∞–Ω (—Å–ø–æ—Å–æ–± 2: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–æ–¥—É–ª—å)")
                except Exception as e2:
                    logger.warning(f"‚ö†Ô∏è –°–ø–æ—Å–æ–± 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
            
            # –°–ø–æ—Å–æ–± 3: —á–µ—Ä–µ–∑ Application.builder()
            if not job_queue_created:
                try:
                    new_app = Application.builder().token(BOT_TOKEN).job_queue(None).build()
                    job_queue = new_app.job_queue
                    if job_queue:
                        application._job_queue = job_queue
                        job_queue_created = True
                        logger.info("‚úÖ JobQueue —Å–æ–∑–¥–∞–Ω (—Å–ø–æ—Å–æ–± 3: —á–µ—Ä–µ–∑ builder)")
                except Exception as e3:
                    logger.warning(f"‚ö†Ô∏è –°–ø–æ—Å–æ–± 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e3}")
            
            if not job_queue_created:
                logger.error("‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è JobQueue –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
                logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞–¥–∞—á...")
                job_queue = AlternativeJobQueue(application)
                GLOBAL_JOB_QUEUE = job_queue
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ JobQueue: {e}")
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞–¥–∞—á –∫–∞–∫ fallback...")
            job_queue = AlternativeJobQueue(application)
            GLOBAL_JOB_QUEUE = job_queue
    else:
        logger.info("‚úÖ JobQueue –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é JobQueue –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        GLOBAL_JOB_QUEUE = job_queue

    # JobQueue —É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤—ã—à–µ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("ping", ping_command))
    application.add_handler(CommandHandler("rates", rates_command))
    
    # –ö–æ–º–∞–Ω–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    application.add_handler(CommandHandler("set_alert", set_alert_command))
    application.add_handler(CommandHandler("view_alerts", view_alerts_command))
    application.add_handler(CommandHandler("test_daily", test_daily_command))
    application.add_handler(CommandHandler("check_subscribers", check_subscribers_command))
    application.add_handler(CommandHandler("set_daily_time", set_daily_time_command))
    application.add_handler(CommandHandler("get_daily_settings", get_daily_settings_command))
    application.add_handler(CommandHandler("restart_daily_job", restart_daily_job_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—ç—Ö–æ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    if job_queue:
        logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á: {type(job_queue).__name__}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        job_queue.run_repeating(
            check_price_changes,
            interval=1800,  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            first=60,  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
            name="price_changes_check"
        )
        logger.info("‚è∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ - –≤—Ä–µ–º—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = load_bot_settings()
        daily_time_str = settings.get('daily_summary_time', '09:00')
        timezone_str = settings.get('timezone', 'Europe/Moscow')
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            hour, minute = map(int, daily_time_str.split(':'))
            moscow_tz = pytz.timezone(timezone_str)
            daily_time = time(hour=hour, minute=minute, tzinfo=moscow_tz)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            from datetime import datetime
            current_moscow_time = datetime.now(moscow_tz)
            logger.info(f"üïê –¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {current_moscow_time.strftime('%H:%M:%S %d.%m.%Y')}")
            logger.info(f"üìÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –Ω–∞: {daily_time_str} –ú–°–ö (–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)")
            
            job_queue.run_daily(
                daily_summary_job,
                time=daily_time,
                name="daily_summary"
            )
            logger.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ {daily_time_str} –ú–°–ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            next_run = current_moscow_time.replace(hour=hour, minute=minute, second=0, microsecond=0)
            if current_moscow_time.hour > hour or (current_moscow_time.hour == hour and current_moscow_time.minute >= minute):
                next_run = next_run.replace(day=next_run.day + 1)
            time_until = next_run - current_moscow_time
            hours_until = int(time_until.total_seconds() // 3600)
            minutes_until = int((time_until.total_seconds() % 3600) // 60)
            logger.info(f"‚è∞ –î–æ —Å–ª–µ–¥—É—é—â–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {hours_until}—á {minutes_until}–º–∏–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 09:00 –ú–°–ö")
            
            # Fallback –Ω–∞ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            moscow_tz = pytz.timezone('Europe/Moscow')
            daily_time = time(hour=9, minute=0, tzinfo=moscow_tz)
            job_queue.run_daily(
                daily_summary_job,
                time=daily_time,
                name="daily_summary"
            )
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ 09:00 –ú–°–ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (fallback)")
    else:
        logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        logger.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: job_queue –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ!")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    logger.info("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞–∫—Ü–∏–π, —Ç–æ–≤–∞—Ä–æ–≤, –∏–Ω–¥–µ–∫—Å–æ–≤")
    logger.info("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã, –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 