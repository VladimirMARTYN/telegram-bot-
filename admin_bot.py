#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import asyncio
from datetime import datetime, time
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue
import json
import aiohttp
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '0'))

# API –∫–ª—é—á–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–ª—é—á–∏)
METALPRICEAPI_KEY = os.getenv('METALPRICEAPI_KEY', 'demo')  # https://metalpriceapi.com/
API_NINJAS_KEY = os.getenv('API_NINJAS_KEY', 'demo')        # https://api.api-ninjas.com/
FMP_API_KEY = os.getenv('FMP_API_KEY', 'demo')              # https://financialmodelingprep.com/
ALPHA_VANTAGE_KEY = os.getenv('ALPHA_VANTAGE_KEY', 'demo')  # https://www.alphavantage.co/
EIA_API_KEY = os.getenv('EIA_API_KEY', 'demo')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if ADMIN_USER_ID == 0:
    logger.warning("‚ö†Ô∏è ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(moscow_tz)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
def format_price(price, decimal_places=2):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á –∏ –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π"""
    if isinstance(price, (int, float)):
        return f"{price:,.{decimal_places}f}".replace(',', ' ')
    return str(price)

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# –£–î–ê–õ–ï–ù–û: inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π —Å MOEX
async def get_moex_stocks():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏"""
    stocks_data = {}
    
    # –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    stocks = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏
        'SBER': {'name': '–°–±–µ—Ä', 'emoji': 'üü¢'},
        'YDEX': {'name': '–Ø–Ω–¥–µ–∫—Å', 'emoji': 'üî¥'},
        'VKCO': {'name': '–í–ö', 'emoji': 'üîµ'},
        'T': {'name': '–¢-–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'emoji': 'üü°'},
        'GAZP': {'name': '–ì–∞–∑–ø—Ä–æ–º', 'emoji': 'üíé'},
        'GMKN': {'name': '–ù–æ—Ä–Ω–∏–∫–µ–ª—å', 'emoji': '‚ö°'},
        'ROSN': {'name': '–†–æ—Å–Ω–µ—Ñ—Ç—å', 'emoji': 'üõ¢Ô∏è'},
        'LKOH': {'name': '–õ–£–ö–û–ô–õ', 'emoji': '‚õΩ'},
        'MTSS': {'name': '–ú–¢–°', 'emoji': 'üì±'},
        'MFON': {'name': '–ú–µ–≥–∞—Ñ–æ–Ω', 'emoji': 'üì∂'},
        # –ê–∫—Ü–∏–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
        'PIKK': {'name': '–ü–ò–ö', 'emoji': 'üèóÔ∏è'},
        'SMLT': {'name': '–°–∞–º–æ–ª—ë—Ç', 'emoji': '‚úàÔ∏è'}
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤
            trading_url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities.json"
            params = {
                'securities': ','.join(stocks.keys()),
                'iss.meta': 'off',
                'iss.only': 'securities,marketdata'
            }
            
            async with session.get(trading_url, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤
                    securities_data = {}
                    marketdata = {}
                    
                    if 'securities' in data and 'data' in data['securities']:
                        securities_cols = data['securities']['columns']
                        for row in data['securities']['data']:
                            row_data = dict(zip(securities_cols, row))
                            secid = row_data.get('SECID')
                            if secid in stocks:
                                securities_data[secid] = {
                                    'shortname': row_data.get('SHORTNAME', stocks[secid]['name']),
                                    'lotsize': row_data.get('LOTSIZE', 1)
                                }
                    
                    if 'marketdata' in data and 'data' in data['marketdata']:
                        marketdata_cols = data['marketdata']['columns']
                        for row in data['marketdata']['data']:
                            row_data = dict(zip(marketdata_cols, row))
                            secid = row_data.get('SECID')
                            if secid in stocks:
                                marketdata[secid] = {
                                    'last': row_data.get('LAST'),
                                    'change': row_data.get('CHANGE'),
                                    'changeprcnt': row_data.get('CHANGEPRCNT'),
                                    'volume': row_data.get('VALTODAY'),
                                    'open': row_data.get('OPEN'),
                                    'high': row_data.get('HIGH'),
                                    'low': row_data.get('LOW')
                                }
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    for ticker in stocks:
                        if ticker in securities_data or ticker in marketdata:
                            stocks_data[ticker] = {
                                'name': stocks[ticker]['name'],
                                'emoji': stocks[ticker]['emoji'],
                                'shortname': securities_data.get(ticker, {}).get('shortname', stocks[ticker]['name']),
                                'price': marketdata.get(ticker, {}).get('last'),
                                'change': marketdata.get(ticker, {}).get('change'),
                                'change_pct': marketdata.get(ticker, {}).get('changeprcnt'),
                                'volume': marketdata.get(ticker, {}).get('volume'),
                                'open': marketdata.get(ticker, {}).get('open'),
                                'high': marketdata.get(ticker, {}).get('high'),
                                'low': marketdata.get(ticker, {}).get('low')
                            }
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOEX: {e}")
    
    return stocks_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë –†–§ —É–±—Ä–∞–Ω–∞ - API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot_start_time = get_moscow_time()

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
user_data = {}

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_data
    try:
        if os.path.exists('user_data.json'):
            with open('user_data.json', 'r', encoding='utf-8') as f:
                user_data = json.load(f)
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}")
        else:
            user_data = {}
            logger.info("üìä –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        user_data = {}

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open('user_data.json', 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = user.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'username': user.username,
            'first_seen': get_moscow_time().isoformat(),
            'last_activity': get_moscow_time().isoformat()
        }
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user_id})")
        save_user_data()
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_data[user_id]['last_activity'] = get_moscow_time().isoformat()
        save_user_data()
    
    welcome_text = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
        f"ü§ñ –≠—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π Telegram –±–æ—Ç\n\n"
        f"üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"/help - –°–ø—Ä–∞–≤–∫–∞\n"
        f"/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        f"/rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∞–∫—Ü–∏–π\n\n"
        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        f"/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        f"/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        f"/set_alert - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
        f"/view_alerts - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã\n\n"
        f"üë§ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
        f"üìä <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(user_data)}"
    )
    
    await update.message.reply_html(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = (
        "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –±–æ—Ç—É</b>\n\n"
        "üí± <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∞–∫—Ü–∏–π\n"
        "‚Ä¢ –¢–æ–≤–∞—Ä—ã (–Ω–µ—Ñ—Ç—å, –∑–æ–ª–æ—Ç–æ, —Å–µ—Ä–µ–±—Ä–æ)\n"
        "‚Ä¢ –§–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞\n\n"
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        "/rates - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã\n\n"
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/set_alert - –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
        "/view_alerts - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "üîÑ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "‚Ä¢ –¶–ë –†–§ - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
        "‚Ä¢ CoinGecko - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n" 
        "‚Ä¢ MOEX - —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã\n"
        "‚Ä¢ MetalpriceAPI - –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã\n"
        "‚Ä¢ API Ninjas - –Ω–µ—Ñ—Ç—å –∏ —Ç–æ–≤–∞—Ä—ã\n"
        "‚Ä¢ Financial Modeling Prep - –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã"
    )
    
    await update.message.reply_html(help_text)

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /ping"""
    current_time = get_moscow_time().strftime("%d.%m.%Y %H:%M:%S")
    await update.message.reply_text(f"üèì –ü–æ–Ω–≥! –í—Ä–µ–º—è: {current_time}")

async def rates_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞–∫—Ü–∏–π, —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤"""
    try:
        await update.message.reply_text("üìä –ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω—ã–µ –∫—É—Ä—Å—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # 1. –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§
        try:
            cbr_response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
            cbr_response.raise_for_status()
            cbr_data = cbr_response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (—Ç–æ–ª—å–∫–æ 4 –æ—Å–Ω–æ–≤–Ω—ã–µ)
            usd_rate = cbr_data.get('Valute', {}).get('USD', {}).get('Value', '–ù/–î')
            eur_rate = cbr_data.get('Valute', {}).get('EUR', {}).get('Value', '–ù/–î')
            cny_rate = cbr_data.get('Valute', {}).get('CNY', {}).get('Value', '–ù/–î')
            gbp_rate = cbr_data.get('Valute', {}).get('GBP', {}).get('Value', '–ù/–î')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ä—É–±–ª–∏
            usd_to_rub_rate = usd_rate if isinstance(usd_rate, (int, float)) else 0
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
            usd_str = f"{format_price(usd_rate)} ‚ÇΩ" if isinstance(usd_rate, (int, float)) else str(usd_rate)
            eur_str = f"{format_price(eur_rate)} ‚ÇΩ" if isinstance(eur_rate, (int, float)) else str(eur_rate)
            cny_str = f"{format_price(cny_rate)} ‚ÇΩ" if isinstance(cny_rate, (int, float)) else str(cny_rate)
            gbp_str = f"{format_price(gbp_rate)} ‚ÇΩ" if isinstance(gbp_rate, (int, float)) else str(gbp_rate)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –¶–ë –†–§: {e}")
            usd_str = eur_str = cny_str = gbp_str = "‚ùå –û—à–∏–±–∫–∞ API"
            usd_to_rub_rate = 80  # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        
        # 2. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç CoinGecko
        try:
            crypto_response = requests.get(
                "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,the-open-network,ripple,cardano,solana,dogecoin&vs_currencies=usd",
                timeout=10
            )
            crypto_response.raise_for_status()
            crypto_data = crypto_response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            bitcoin_price = crypto_data.get('bitcoin', {}).get('usd', '–ù/–î')
            ethereum_price = crypto_data.get('ethereum', {}).get('usd', '–ù/–î')
            ton_price = crypto_data.get('the-open-network', {}).get('usd', '–ù/–î')
            ripple_price = crypto_data.get('ripple', {}).get('usd', '–ù/–î')
            cardano_price = crypto_data.get('cardano', {}).get('usd', '–ù/–î')
            solana_price = crypto_data.get('solana', {}).get('usd', '–ù/–î')
            dogecoin_price = crypto_data.get('dogecoin', {}).get('usd', '–ù/–î')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ü–µ–Ω—ã (–¥–æ–ª–ª–∞—Ä—ã + —Ä—É–±–ª–∏)
            crypto_strings = {}
            
            # Bitcoin
            if isinstance(bitcoin_price, (int, float)) and usd_to_rub_rate > 0:
                btc_rub = bitcoin_price * usd_to_rub_rate
                crypto_strings['bitcoin'] = f"Bitcoin: ${format_price(bitcoin_price, 0)} ({format_price(btc_rub, 0)} ‚ÇΩ)"
            elif isinstance(bitcoin_price, (int, float)):
                crypto_strings['bitcoin'] = f"Bitcoin: ${format_price(bitcoin_price, 0)}"
            else:
                crypto_strings['bitcoin'] = "Bitcoin: ‚ùå –ù/–î"
                
            # Ethereum
            if isinstance(ethereum_price, (int, float)) and usd_to_rub_rate > 0:
                eth_rub = ethereum_price * usd_to_rub_rate
                crypto_strings['ethereum'] = f"Ethereum: ${format_price(ethereum_price, 0)} ({format_price(eth_rub, 0)} ‚ÇΩ)"
            elif isinstance(ethereum_price, (int, float)):
                crypto_strings['ethereum'] = f"Ethereum: ${format_price(ethereum_price, 0)}"
            else:
                crypto_strings['ethereum'] = "Ethereum: ‚ùå –ù/–î"
                
            # TON
            if isinstance(ton_price, (int, float)) and usd_to_rub_rate > 0:
                ton_rub = ton_price * usd_to_rub_rate
                crypto_strings['ton'] = f"TON: ${format_price(ton_price)} ({format_price(ton_rub)} ‚ÇΩ)"
            elif isinstance(ton_price, (int, float)):
                crypto_strings['ton'] = f"TON: ${format_price(ton_price)}"
            else:
                crypto_strings['ton'] = "TON: ‚ùå –ù/–î"
                
            # XRP
            if isinstance(ripple_price, (int, float)) and usd_to_rub_rate > 0:
                xrp_rub = ripple_price * usd_to_rub_rate
                crypto_strings['ripple'] = f"XRP: ${format_price(ripple_price, 3)} ({format_price(xrp_rub)} ‚ÇΩ)"
            elif isinstance(ripple_price, (int, float)):
                crypto_strings['ripple'] = f"XRP: ${format_price(ripple_price, 3)}"
            else:
                crypto_strings['ripple'] = "XRP: ‚ùå –ù/–î"
                
            # Cardano
            if isinstance(cardano_price, (int, float)) and usd_to_rub_rate > 0:
                ada_rub = cardano_price * usd_to_rub_rate
                crypto_strings['cardano'] = f"Cardano: ${format_price(cardano_price, 3)} ({format_price(ada_rub)} ‚ÇΩ)"
            elif isinstance(cardano_price, (int, float)):
                crypto_strings['cardano'] = f"Cardano: ${format_price(cardano_price, 3)}"
            else:
                crypto_strings['cardano'] = "Cardano: ‚ùå –ù/–î"
                
            # Solana
            if isinstance(solana_price, (int, float)) and usd_to_rub_rate > 0:
                sol_rub = solana_price * usd_to_rub_rate
                crypto_strings['solana'] = f"Solana: ${format_price(solana_price)} ({format_price(sol_rub)} ‚ÇΩ)"
            elif isinstance(solana_price, (int, float)):
                crypto_strings['solana'] = f"Solana: ${format_price(solana_price)}"
            else:
                crypto_strings['solana'] = "Solana: ‚ùå –ù/–î"
                
            # Dogecoin
            if isinstance(dogecoin_price, (int, float)) and usd_to_rub_rate > 0:
                doge_rub = dogecoin_price * usd_to_rub_rate
                crypto_strings['dogecoin'] = f"Dogecoin: ${format_price(dogecoin_price, 3)} ({format_price(doge_rub)} ‚ÇΩ)"
            elif isinstance(dogecoin_price, (int, float)):
                crypto_strings['dogecoin'] = f"Dogecoin: ${format_price(dogecoin_price, 3)}"
            else:
                crypto_strings['dogecoin'] = "Dogecoin: ‚ùå –ù/–î"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
            crypto_strings = {
                'bitcoin': 'Bitcoin: ‚ùå –û—à–∏–±–∫–∞ API',
                'ethereum': 'Ethereum: ‚ùå –û—à–∏–±–∫–∞ API',
                'ton': 'TON: ‚ùå –û—à–∏–±–∫–∞ API',
                'ripple': 'XRP: ‚ùå –û—à–∏–±–∫–∞ API',
                'cardano': 'Cardano: ‚ùå –û—à–∏–±–∫–∞ API',
                'solana': 'Solana: ‚ùå –û—à–∏–±–∫–∞ API',
                'dogecoin': 'Dogecoin: ‚ùå –û—à–∏–±–∫–∞ API'
            }
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π —Å MOEX
        moex_stocks = await get_moex_stocks()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
        main_stocks = {}
        real_estate_stocks = {}
        
        for ticker, data in moex_stocks.items():
            if ticker in ['PIKK', 'SMLT']:
                real_estate_stocks[ticker] = data
            else:
                main_stocks[ticker] = data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫—Ü–∏–∏
        def format_stock_data(stocks_dict):
            result = {}
            for ticker, data in stocks_dict.items():
                price = data.get('price')
                change_pct = data.get('change_pct')
                name = data.get('name', ticker)
                
                if price is not None:
                    price_str = f"{price:.2f} ‚ÇΩ"
                    
                    if change_pct is not None:
                        if change_pct > 0:
                            change_str = f"(+{change_pct:.2f}%)"
                        elif change_pct < 0:
                            change_str = f"({change_pct:.2f}%)"
                        else:
                            change_str = "(0.00%)"
                        
                        result[ticker] = f"{name}: {price_str} {change_str}"
                    else:
                        result[ticker] = f"{name}: {price_str}"
                else:
                    result[ticker] = f"{name}: ‚ùå –ù/–î"
            return result
        

        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        message = "üìä **–ö–£–†–°–´ –§–ò–ù–ê–ù–°–û–í–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í**\n\n"
        
        # –í–∞–ª—é—Ç—ã –¶–ë –†–§
        message += "üèõÔ∏è **–í–ê–õ–Æ–¢–´ –¶–ë –†–§:**\n"
        message += f"‚îú USD: **{usd_str}**\n"
        message += f"‚îú EUR: **{eur_str}**\n"
        message += f"‚îú CNY: **{cny_str}**\n"
        message += f"‚îî GBP: **{gbp_str}**\n\n"
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        message += "üíé **–ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:**\n"
        crypto_items = ['bitcoin', 'ethereum', 'ton', 'ripple', 'cardano', 'solana', 'dogecoin']
        for i, crypto in enumerate(crypto_items):
            if crypto in crypto_strings:
                prefix = "‚îú" if i < len(crypto_items) - 1 else "‚îî"
                message += f"{prefix} {crypto_strings[crypto]}\n"
        message += "\n"
        
        # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏
        message += "üìà **–†–û–°–°–ò–ô–°–ö–ò–ï –ê–ö–¶–ò–ò (MOEX):**\n"
        stocks_data = await get_moex_stocks()
        stock_names = {
            'SBER': '–°–±–µ—Ä', 'YDEX': '–Ø–Ω–¥–µ–∫—Å', 'VKCO': '–í–ö', 
            'T': 'T-–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'GAZP': '–ì–∞–∑–ø—Ä–æ–º', 'GMKN': '–ù–æ—Ä–Ω–∏–∫–µ–ª—å',
            'ROSN': '–†–æ—Å–Ω–µ—Ñ—Ç—å', 'LKOH': '–õ–£–ö–û–ô–õ', 'MTSS': '–ú–¢–°', 'MFON': '–ú–µ–≥–∞—Ñ–æ–Ω'
        }
        stock_items = list(stock_names.keys())
        for i, ticker in enumerate(stock_items):
            if ticker in stocks_data and stocks_data[ticker].get('price'):
                name = stock_names[ticker]
                price = stocks_data[ticker]['price']
                prefix = "‚îú" if i < len(stock_items) - 1 else "‚îî"
                message += f"{prefix} {name}: **{format_price(price)} ‚ÇΩ**\n"
        message += "\n"
        
        # –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        message += "üè† **–ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–¨:**\n"
        real_estate_tickers = ['PIKK', 'SMLT']
        real_estate_names = {'PIKK': '–ü–ò–ö', 'SMLT': '–°–∞–º–æ–ª—ë—Ç'}
        for i, ticker in enumerate(real_estate_tickers):
            if ticker in stocks_data and stocks_data[ticker].get('price'):
                name = real_estate_names[ticker]
                price = stocks_data[ticker]['price']
                prefix = "‚îú" if i < len(real_estate_tickers) - 1 else "‚îî"
                message += f"{prefix} {name}: **{format_price(price)} ‚ÇΩ**\n"
        message += "\n"
        
        # –¢–æ–≤–∞—Ä—ã 
        message += "üõ†Ô∏è **–¢–û–í–ê–†–´:**\n"
        commodities_data = await get_commodities_data()
        commodity_items = ['gold', 'silver', 'brent', 'urals']  # –î–æ–±–∞–≤–ª—è–µ–º urals
        commodity_names = {
            'gold': '–ó–æ–ª–æ—Ç–æ', 
            'silver': '–°–µ—Ä–µ–±—Ä–æ', 
            'brent': '–ù–µ—Ñ—Ç—å Brent',
            'urals': '–ù–µ—Ñ—Ç—å Urals'
        }
        
        for i, commodity in enumerate(commodity_items):
            if commodity in commodities_data:
                name = commodity_names[commodity]
                price = commodities_data[commodity]['price']
                rub_price = price * usd_to_rub_rate if usd_to_rub_rate > 0 else 0
                prefix = "‚îú" if i < len(commodity_items) - 1 else "‚îî"
                if rub_price > 0:
                    message += f"{prefix} {name}: **${format_price(price)}** ({format_price(rub_price)} ‚ÇΩ)\n"
                else:
                    message += f"{prefix} {name}: **${format_price(price)}**\n"
        message += "\n"
        
        # –§–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        message += "üìä **–§–û–ù–î–û–í–´–ï –ò–ù–î–ï–ö–°–´:**\n"
        indices_data = await get_indices_data()
        index_items = ['imoex', 'rts', 'sp500']
        
        for i, index in enumerate(index_items):
            if index in indices_data:
                name = indices_data[index]['name']
                price = indices_data[index]['price']
                change = indices_data[index].get('change_pct', 0)
                prefix = "‚îú" if i < len(index_items) - 1 else "‚îî"
                change_str = f"({change:+.2f}%)" if change != 0 else ""
                message += f"{prefix} {name}: **{format_price(price)}** {change_str}\n"
        message += "\n"
        
        # –í—Ä–µ–º—è –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        current_time = get_moscow_time().strftime("%d.%m.%Y %H:%M")
        message += f"üïê **–í—Ä–µ–º—è:** {current_time}\n"
        message += f"üì° **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** –¶–ë –†–§, CoinGecko, MOEX, Gold-API, Alpha Vantage"

        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ rates_command: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {str(e)}\n\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_text = update.message.text
    user_id = update.effective_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        user_data[user_id]['last_activity'] = get_moscow_time().isoformat()
        save_user_data()
    
    # –ü—Ä–æ—Å—Ç–æ–π —ç—Ö–æ –æ—Ç–≤–µ—Ç
    await update.message.reply_text(
        f"–ü–æ–ª—É—á–∏–ª: {message_text}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤"""
    user_id = update.effective_user.id
    notifications = load_notification_data()
    
    if str(user_id) not in notifications:
        notifications[str(user_id)] = {
            'subscribed': True,
            'threshold': 2.0,  # 2% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'alerts': {},
            'daily_summary': True
        }
        save_notification_data(notifications)
        
        await update.message.reply_html(
            "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            "üìà –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            "‚Ä¢ –†–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤ >2%\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–µ –≤ 9:00 –ú–°–ö\n\n"
            "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_alert –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤\n"
            "üîï /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏"
        )
    else:
        notifications[str(user_id)]['subscribed'] = True
        save_notification_data(notifications)
        
        await update.message.reply_html(
            "üîî <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view_alerts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        )

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    notifications = load_notification_data()
    
    if str(user_id) in notifications:
        notifications[str(user_id)]['subscribed'] = False
        save_notification_data(notifications)
        
        await update.message.reply_html(
            "üîï <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n"
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )
    else:
        await update.message.reply_html(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
        )

async def set_alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_html(
            "‚öôÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤</b>\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ <code>/set_alert USD 85</code> - –¥–æ–ª–ª–∞—Ä –≤—ã—à–µ 85‚ÇΩ\n"
            "‚Ä¢ <code>/set_alert BTC 115000</code> - –±–∏—Ç–∫–æ–∏–Ω –Ω–∏–∂–µ 115K$\n"
            "‚Ä¢ <code>/set_alert SBER 200</code> - –°–±–µ—Ä –≤—ã—à–µ 200‚ÇΩ\n\n"
            "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã:\n"
            "‚Ä¢ –í–∞–ª—é—Ç—ã: USD, EUR, CNY, GBP\n"
            "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: BTC, ETH, TON, XRP, ADA, SOL, DOGE\n"
            "‚Ä¢ –ê–∫—Ü–∏–∏: SBER, YDEX, VKCO, T, GAZP, GMKN, ROSN, LKOH, MTSS, MFON, PIKK, SMLT"
        )
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç–∏–≤ –∏ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    
    asset = context.args[0].upper()
    try:
        threshold = float(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    notifications = load_notification_data()
    if str(user_id) not in notifications:
        notifications[str(user_id)] = {
            'subscribed': True,
            'threshold': 2.0,
            'alerts': {},
            'daily_summary': True
        }
    
    notifications[str(user_id)]['alerts'][asset] = threshold
    save_notification_data(notifications)
    
    await update.message.reply_html(
        f"‚úÖ <b>–ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"üéØ <b>–ê–∫—Ç–∏–≤:</b> {asset}\n"
        f"üìä <b>–ü–æ—Ä–æ–≥:</b> {threshold}\n\n"
        f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
    )

async def view_alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
    user_id = update.effective_user.id
    notifications = load_notification_data()
    
    if str(user_id) not in notifications:
        await update.message.reply_html(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        return
    
    user_notifications = notifications[str(user_id)]
    
    status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if user_notifications.get('subscribed', False) else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
    threshold = user_notifications.get('threshold', 2.0)
    daily = "‚úÖ –î–∞" if user_notifications.get('daily_summary', False) else "‚ùå –ù–µ—Ç"
    
    alerts_text = ""
    alerts = user_notifications.get('alerts', {})
    if alerts:
        alerts_text = "\n\nüìä <b>–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:</b>\n"
        for asset, value in alerts.items():
            alerts_text += f"‚Ä¢ {asset}: {value}\n"
    else:
        alerts_text = "\n\nüìä <b>–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:</b> –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    message = (
        f"‚öôÔ∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"üîî <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        f"üìà <b>–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b> {threshold}%\n"
        f"üåÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞:</b> {daily}"
        f"{alerts_text}"
    )
    
    await update.message.reply_html(message)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def get_commodities_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏–∑ –ü–û–õ–ù–û–°–¢–¨–Æ –ë–ï–°–ü–õ–ê–¢–ù–´–• –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    commodities_data = {}
    
    try:
        # ü•á Gold-API.com - –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–ª—è –∑–æ–ª–æ—Ç–∞ –∏ —Å–µ—Ä–µ–±—Ä–∞, –±–µ–∑ –∫–ª—é—á–µ–π!
        logger.info("ü•á –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –º–µ—Ç–∞–ª–ª—ã —Å Gold-API.com (100% –±–µ—Å–ø–ª–∞—Ç–Ω–æ)...")
        
        # –ó–æ–ª–æ—Ç–æ
        try:
            gold_response = requests.get("https://api.gold-api.com/price/XAU", timeout=10)
            logger.info(f"üìä Gold-API –∑–æ–ª–æ—Ç–æ —Å—Ç–∞—Ç—É—Å: {gold_response.status_code}")
            
            if gold_response.status_code == 200:
                gold_data = gold_response.json()
                logger.info(f"üìä Gold-API –∑–æ–ª–æ—Ç–æ –æ—Ç–≤–µ—Ç: {gold_data}")
                
                if 'price' in gold_data:
                    commodities_data['gold'] = {
                        'name': '–ó–æ–ª–æ—Ç–æ',
                        'price': gold_data['price'],
                        'currency': 'USD'
                    }
                    logger.info(f"‚úÖ –ó–æ–ª–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ: ${gold_data['price']:.2f}")
                else:
                    logger.warning("‚ùå Gold-API: –Ω–µ—Ç 'price' –≤ –æ—Ç–≤–µ—Ç–µ –∑–æ–ª–æ—Ç–∞")
            else:
                logger.error(f"‚ùå Gold-API –∑–æ–ª–æ—Ç–æ –æ—à–∏–±–∫–∞ {gold_response.status_code}: {gold_response.text}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–æ–ª–æ—Ç–∞: {e}")
        
        # –°–µ—Ä–µ–±—Ä–æ
        try:
            silver_response = requests.get("https://api.gold-api.com/price/XAG", timeout=10)
            logger.info(f"üìä Gold-API —Å–µ—Ä–µ–±—Ä–æ —Å—Ç–∞—Ç—É—Å: {silver_response.status_code}")
            
            if silver_response.status_code == 200:
                silver_data = silver_response.json()
                logger.info(f"üìä Gold-API —Å–µ—Ä–µ–±—Ä–æ –æ—Ç–≤–µ—Ç: {silver_data}")
                
                if 'price' in silver_data:
                    commodities_data['silver'] = {
                        'name': '–°–µ—Ä–µ–±—Ä–æ',
                        'price': silver_data['price'],
                        'currency': 'USD'
                    }
                    logger.info(f"‚úÖ –°–µ—Ä–µ–±—Ä–æ –ø–æ–ª—É—á–µ–Ω–æ: ${silver_data['price']:.2f}")
                else:
                    logger.warning("‚ùå Gold-API: –Ω–µ—Ç 'price' –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–µ–±—Ä–∞")
            else:
                logger.error(f"‚ùå Gold-API —Å–µ—Ä–µ–±—Ä–æ –æ—à–∏–±–∫–∞ {silver_response.status_code}: {silver_response.text}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–µ–±—Ä–∞: {e}")
        
        # üõ¢Ô∏è EIA API –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–µ—Ñ—Ç–∏ Brent (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –°–®–ê, –±–µ—Å–ø–ª–∞—Ç–Ω–æ!)
        logger.info(f"üõ¢Ô∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–µ—Ñ—Ç—å Brent –∏–∑ EIA API, –∫–ª—é—á: {EIA_API_KEY[:10]}...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É Brent Europe –∏–∑ EIA
            brent_response = requests.get(
                f"https://api.eia.gov/v2/petroleum/pri/spt/data/?api_key={EIA_API_KEY}&facets[product][]=EPCBRENT&data[0]=value&sort[0][column]=period&sort[0][direction]=desc&length=1",
                timeout=10
            )
            logger.info(f"üìä EIA Brent —Å—Ç–∞—Ç—É—Å: {brent_response.status_code}")
            
            if brent_response.status_code == 200:
                brent_data = brent_response.json()
                logger.info(f"üìä EIA Brent –æ—Ç–≤–µ—Ç: {brent_data}")
                
                # EIA –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ "response.data"
                if 'response' in brent_data and 'data' in brent_data['response'] and len(brent_data['response']['data']) > 0:
                    brent_price = float(brent_data['response']['data'][0]['value'])
                    commodities_data['brent'] = {
                        'name': '–ù–µ—Ñ—Ç—å Brent',
                        'price': brent_price,
                        'currency': 'USD'
                    }
                    logger.info(f"‚úÖ –ù–µ—Ñ—Ç—å Brent –ø–æ–ª—É—á–µ–Ω–∞: ${brent_price:.2f}")
                else:
                    logger.warning(f"‚ùå EIA: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ: {brent_data}")
            else:
                logger.error(f"‚ùå EIA Brent –æ—à–∏–±–∫–∞ {brent_response.status_code}: {brent_response.text}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Brent –∏–∑ EIA: {e}")
        
        # Fallback: Alpha Vantage –¥–ª—è –Ω–µ—Ñ—Ç–∏ WTI —á–µ—Ä–µ–∑ USO ETF (–µ—Å–ª–∏ EIA –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
        if 'brent' not in commodities_data:
            logger.info("üîÑ EIA –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Alpha Vantage USO ETF...")
            try:
                oil_response = requests.get(
                    f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=USO&apikey={ALPHA_VANTAGE_KEY}",
                    timeout=10
                )
                logger.info(f"üìä Alpha Vantage USO —Å—Ç–∞—Ç—É—Å: {oil_response.status_code}")
                
                if oil_response.status_code == 200:
                    oil_data = oil_response.json()
                    logger.info(f"üìä Alpha Vantage USO –æ—Ç–≤–µ—Ç: {oil_data}")
                    
                    if 'Global Quote' in oil_data and '05. price' in oil_data['Global Quote']:
                        oil_price = float(oil_data['Global Quote']['05. price'])
                        estimated_oil_price = oil_price * 12  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USO ETF
                        commodities_data['brent'] = {
                            'name': '–ù–µ—Ñ—Ç—å Brent (–ø—Ä–∏–±–ª–∏–∑.)',
                            'price': estimated_oil_price,
                            'currency': 'USD'
                        }
                        logger.info(f"‚úÖ –ù–µ—Ñ—Ç—å Brent (USO fallback): ${estimated_oil_price:.2f}")
                    else:
                        logger.warning(f"‚ùå Alpha Vantage USO: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {oil_data}")
                else:
                    logger.error(f"‚ùå Alpha Vantage USO –æ—à–∏–±–∫–∞ {oil_response.status_code}: {oil_response.text}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Alpha Vantage USO: {e}")
        
        # Fallback —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–µ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö!)
        if 'silver' not in commodities_data and 'gold' in commodities_data:
            logger.info("üîÑ –°–µ—Ä–µ–±—Ä–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç –∑–æ–ª–æ—Ç–∞...")
            gold_price = commodities_data['gold']['price']
            silver_fallback = gold_price / 80  # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            commodities_data['silver'] = {
                'name': '–°–µ—Ä–µ–±—Ä–æ (—Ä–∞—Å—á–µ—Ç–Ω–æ–µ)',
                'price': silver_fallback,
                'currency': 'USD'
            }
            logger.info(f"‚úÖ –°–µ—Ä–µ–±—Ä–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ: ${silver_fallback:.2f}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Urals –æ—Ç Brent (—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –Ω–µ—Ñ—Ç—å —Ç–æ—Ä–≥—É–µ—Ç—Å—è —Å –¥–∏—Å–∫–æ–Ω—Ç–æ–º)
        if 'brent' in commodities_data:
            logger.info("üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Urals –æ—Ç Brent...")
            brent_price = commodities_data['brent']['price']
            # Urals –æ–±—ã—á–Ω–æ —Ç–æ—Ä–≥—É–µ—Ç—Å—è —Å –¥–∏—Å–∫–æ–Ω—Ç–æ–º $2-5 –∫ Brent
            urals_discount = 3.5  # –°—Ä–µ–¥–Ω–∏–π –¥–∏—Å–∫–æ–Ω—Ç
            urals_price = brent_price - urals_discount
            commodities_data['urals'] = {
                'name': '–ù–µ—Ñ—Ç—å Urals (—Ä–∞—Å—á–µ—Ç–Ω–∞—è)',
                'price': urals_price,
                'currency': 'USD'
            }
            logger.info(f"‚úÖ Urals —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: ${urals_price:.2f} (Brent ${brent_price:.2f} - ${urals_discount})")
        
        if 'brent' not in commodities_data:
            logger.warning("‚ö†Ô∏è –ù–µ—Ñ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ –≤—Å–µ—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    logger.info(f"üìä –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(commodities_data)} - {list(commodities_data.keys())}")
    return commodities_data

async def get_indices_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º: IMOEX, RTS, S&P 500"""
    indices_data = {}
    
    try:
        # 1. –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã —á–µ—Ä–µ–∑ MOEX (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ)
        logger.info("üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã —Å MOEX...")
        async with aiohttp.ClientSession() as session:
            # IMOEX
            imoex_url = "https://iss.moex.com/iss/engines/stock/markets/index/securities/IMOEX.json"
            logger.info(f"üìà –ó–∞–ø—Ä–∞—à–∏–≤–∞—é IMOEX: {imoex_url}")
            async with session.get(imoex_url) as resp:
                logger.info(f"üìä IMOEX —Å—Ç–∞—Ç—É—Å: {resp.status}")
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"üìä IMOEX —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys()) if isinstance(data, dict) else '–Ω–µ dict'}")
                    
                    if 'marketdata' in data and 'data' in data['marketdata'] and len(data['marketdata']['data']) > 0:
                        logger.info(f"üìä IMOEX marketdata –Ω–∞–π–¥–µ–Ω, —Å—Ç—Ä–æ–∫: {len(data['marketdata']['data'])}")
                        logger.info(f"üìä IMOEX –∫–æ–ª–æ–Ω–∫–∏: {data['marketdata']['columns']}")
                        logger.info(f"üìä IMOEX –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {data['marketdata']['data'][0]}")
                        
                        row_data = dict(zip(data['marketdata']['columns'], data['marketdata']['data'][0]))
                        logger.info(f"üìä IMOEX —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {row_data}")
                        
                        if 'LASTVALUE' in row_data and row_data['LASTVALUE']:
                            indices_data['imoex'] = {
                                'name': 'IMOEX',
                                'price': row_data['LASTVALUE'],
                                'change_pct': row_data.get('LASTCHANGEPRC', 0)
                            }
                            logger.info(f"‚úÖ IMOEX –ø–æ–ª—É—á–µ–Ω: {row_data['LASTVALUE']}")
                        else:
                            logger.warning(f"‚ùå IMOEX: –Ω–µ—Ç LASTVALUE –∏–ª–∏ LASTVALUE –ø—É—Å—Ç–æ–π: {row_data.get('LASTVALUE')}")
                    else:
                        logger.warning("‚ùå IMOEX: –Ω–µ—Ç marketdata –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    response_text = await resp.text()
                    logger.error(f"‚ùå IMOEX –æ—à–∏–±–∫–∞ {resp.status}: {response_text[:200]}...")
            
            # RTS
            rts_url = "https://iss.moex.com/iss/engines/stock/markets/index/securities/RTSI.json"
            logger.info(f"üìà –ó–∞–ø—Ä–∞—à–∏–≤–∞—é RTS: {rts_url}")
            async with session.get(rts_url) as resp:
                logger.info(f"üìä RTS —Å—Ç–∞—Ç—É—Å: {resp.status}")
                if resp.status == 200:
                    data = await resp.json()
                    logger.info(f"üìä RTS —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys()) if isinstance(data, dict) else '–Ω–µ dict'}")
                    
                    if 'marketdata' in data and 'data' in data['marketdata'] and len(data['marketdata']['data']) > 0:
                        logger.info(f"üìä RTS marketdata –Ω–∞–π–¥–µ–Ω, —Å—Ç—Ä–æ–∫: {len(data['marketdata']['data'])}")
                        logger.info(f"üìä RTS –∫–æ–ª–æ–Ω–∫–∏: {data['marketdata']['columns']}")
                        logger.info(f"üìä RTS –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {data['marketdata']['data'][0]}")
                        
                        row_data = dict(zip(data['marketdata']['columns'], data['marketdata']['data'][0]))
                        logger.info(f"üìä RTS —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {row_data}")
                        
                        if 'LASTVALUE' in row_data and row_data['LASTVALUE']:
                            indices_data['rts'] = {
                                'name': 'RTS',
                                'price': row_data['LASTVALUE'],
                                'change_pct': row_data.get('LASTCHANGEPRC', 0)
                            }
                            logger.info(f"‚úÖ RTS –ø–æ–ª—É—á–µ–Ω: {row_data['LASTVALUE']}")
                        else:
                            logger.warning(f"‚ùå RTS: –Ω–µ—Ç LASTVALUE –∏–ª–∏ LASTVALUE –ø—É—Å—Ç–æ–π: {row_data.get('LASTVALUE')}")
                    else:
                        logger.warning("‚ùå RTS: –Ω–µ—Ç marketdata –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    response_text = await resp.text() 
                    logger.error(f"‚ùå RTS –æ—à–∏–±–∫–∞ {resp.status}: {response_text[:200]}...")
        
        # 2. S&P 500 —á–µ—Ä–µ–∑ Financial Modeling Prep (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
        logger.info(f"üìà –ó–∞–ø—Ä–∞—à–∏–≤–∞—é S&P 500 —Å FMP, –∫–ª—é—á: {FMP_API_KEY[:10]}...")
        sp500_response = requests.get(
            f"https://financialmodelingprep.com/api/v3/quote/%5EGSPC?apikey={FMP_API_KEY}",
            timeout=10
        )
        logger.info(f"üìä FMP —Å—Ç–∞—Ç—É—Å: {sp500_response.status_code}")
        
        if sp500_response.status_code == 200:
            sp500_data = sp500_response.json()
            logger.info(f"üìä FMP –æ—Ç–≤–µ—Ç: {sp500_data}")
            
            if isinstance(sp500_data, list) and len(sp500_data) > 0:
                sp500_info = sp500_data[0]
                if 'price' in sp500_info:
                    indices_data['sp500'] = {
                        'name': 'S&P 500',
                        'price': sp500_info['price'],
                        'change_pct': sp500_info.get('changesPercentage', 0)
                    }
                    logger.info(f"‚úÖ S&P 500 –ø–æ–ª—É—á–µ–Ω: {sp500_info['price']}")
                else:
                    logger.warning("‚ùå S&P 500: –Ω–µ—Ç 'price' –≤ –æ—Ç–≤–µ—Ç–µ FMP")
            else:
                logger.warning("‚ùå S&P 500: –æ—Ç–≤–µ—Ç FMP –Ω–µ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø—É—Å—Ç–æ–π")
        else:
            logger.error(f"‚ùå FMP –æ—à–∏–±–∫–∞ {sp500_response.status_code}: {sp500_response.text}")
        
        # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º Alpha Vantage –¥–ª—è S&P 500 –µ—Å–ª–∏ FMP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if 'sp500' not in indices_data:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º fallback Alpha Vantage –¥–ª—è S&P 500, –∫–ª—é—á: {ALPHA_VANTAGE_KEY[:10]}...")
            try:
                alpha_response = requests.get(
                    f"https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=SPY&apikey={ALPHA_VANTAGE_KEY}",
                    timeout=10
                )
                logger.info(f"üìä Alpha Vantage —Å—Ç–∞—Ç—É—Å: {alpha_response.status_code}")
                
                if alpha_response.status_code == 200:
                    alpha_data = alpha_response.json()
                    logger.info(f"üìä Alpha Vantage –æ—Ç–≤–µ—Ç: {alpha_data}")
                    
                    if 'Global Quote' in alpha_data:
                        quote = alpha_data['Global Quote']
                        if '05. price' in quote:
                            price = float(quote['05. price'])
                            change_pct = float(quote['10. change percent'].replace('%', ''))
                            indices_data['sp500'] = {
                                'name': 'S&P 500 (SPY)',
                                'price': price,
                                'change_pct': change_pct
                            }
                            logger.info(f"‚úÖ S&P 500 –∏–∑ Alpha Vantage: {price}")
                        else:
                            logger.warning("‚ùå Alpha Vantage: –Ω–µ—Ç '05. price'")
                    else:
                        logger.warning("‚ùå Alpha Vantage: –Ω–µ—Ç 'Global Quote'")
                else:
                    logger.error(f"‚ùå Alpha Vantage –æ—à–∏–±–∫–∞ {alpha_response.status_code}: {alpha_response.text}")
            except Exception as fallback_e:
                logger.error(f"‚ùå Alpha Vantage fallback –æ—à–∏–±–∫–∞: {fallback_e}")
                    
        # Fallback: –µ—Å–ª–∏ S&P 500 –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (Alpha Vantage –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
        if 'sp500' not in indices_data:
            logger.warning("‚ö†Ô∏è S&P 500 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ –∏–∑ Alpha Vantage - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á API")
                    
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
    
    logger.info(f"üìä –ò—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(indices_data)} - {list(indices_data.keys())}")
    return indices_data

# –§—É–Ω–∫—Ü–∏—è get_crypto_extended() —É–¥–∞–ª–µ–Ω–∞ - –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ CoinGecko

# –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_DATA_FILE = 'notifications.json'
PRICE_HISTORY_FILE = 'price_history.json'

def load_notification_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        if os.path.exists(NOTIFICATION_DATA_FILE):
            with open(NOTIFICATION_DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {}

def save_notification_data(data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        with open(NOTIFICATION_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

def load_price_history():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω"""
    try:
        if os.path.exists(PRICE_HISTORY_FILE):
            with open(PRICE_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return {}

def save_price_history(data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω"""
    try:
        with open(PRICE_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_price_changes(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_prices = {}
        
        # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
        cbr_response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
        if cbr_response.status_code == 200:
            cbr_data = cbr_response.json()
            current_prices.update({
                'USD': cbr_data.get('Valute', {}).get('USD', {}).get('Value'),
                'EUR': cbr_data.get('Valute', {}).get('EUR', {}).get('Value'),
                'CNY': cbr_data.get('Valute', {}).get('CNY', {}).get('Value'),
                'GBP': cbr_data.get('Valute', {}).get('GBP', {}).get('Value')
            })
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        crypto_response = requests.get(
            "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,the-open-network,ripple,cardano,solana,dogecoin&vs_currencies=usd",
            timeout=10
        )
        if crypto_response.status_code == 200:
            crypto_data = crypto_response.json()
            current_prices.update({
                'BTC': crypto_data.get('bitcoin', {}).get('usd'),
                'ETH': crypto_data.get('ethereum', {}).get('usd'),
                'TON': crypto_data.get('the-open-network', {}).get('usd'),
                'XRP': crypto_data.get('ripple', {}).get('usd'),
                'ADA': crypto_data.get('cardano', {}).get('usd'),
                'SOL': crypto_data.get('solana', {}).get('usd'),
                'DOGE': crypto_data.get('dogecoin', {}).get('usd')
            })
        
        # –ê–∫—Ü–∏–∏
        moex_data = await get_moex_stocks()
        for ticker, data in moex_data.items():
            current_prices[ticker] = data.get('price')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ü–µ–Ω—ã
        price_history = load_price_history()
        notifications = load_notification_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for user_id, user_notifications in notifications.items():
            if not user_notifications.get('subscribed', False):
                continue
            
            threshold = user_notifications.get('threshold', 2.0)
            alerts = user_notifications.get('alerts', {})
            
            notifications_to_send = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            for asset, current_price in current_prices.items():
                if current_price is None:
                    continue
                
                previous_price = price_history.get(asset)
                if previous_price is None:
                    continue
                
                change_pct = ((current_price - previous_price) / previous_price) * 100
                
                if abs(change_pct) >= threshold:
                    emoji = "üìà" if change_pct > 0 else "üìâ"
                    notifications_to_send.append(
                        f"{emoji} <b>{asset}</b>: {change_pct:+.2f}% "
                        f"({previous_price:.2f} ‚Üí {current_price:.2f})"
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
            for asset, alert_threshold in alerts.items():
                current_price = current_prices.get(asset)
                if current_price is None:
                    continue
                
                if current_price >= alert_threshold:
                    notifications_to_send.append(
                        f"üö® <b>–ê–õ–ï–†–¢:</b> {asset} –¥–æ—Å—Ç–∏–≥ {current_price:.2f} "
                        f"(–ø–æ—Ä–æ–≥: {alert_threshold})"
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if notifications_to_send:
                message = "üîî <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –¶–ï–ù–ê–•</b>\n\n" + "\n".join(notifications_to_send)
                try:
                    await context.bot.send_message(
                        chat_id=int(user_id),
                        text=message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—é
        price_history.update({k: v for k, v in current_prices.items() if v is not None})
        save_price_history(price_history)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω: {e}")

async def daily_summary_job(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –≤ 9:00 –ú–°–ö"""
    try:
        notifications = load_notification_data()
        
        for user_id, user_notifications in notifications.items():
            if not user_notifications.get('subscribed', False):
                continue
            if not user_notifications.get('daily_summary', True):
                continue
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π rates
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text="üåÖ <b>–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê</b>\n\n–ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã...",
                    parse_mode='HTML'
                )
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é rates_command
                # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_user_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –ü–æ–ª—É—á–∞–µ–º JobQueue
    job_queue = application.job_queue

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("ping", ping_command))
    application.add_handler(CommandHandler("rates", rates_command))
    
    # –ö–æ–º–∞–Ω–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    application.add_handler(CommandHandler("set_alert", set_alert_command))
    application.add_handler(CommandHandler("view_alerts", view_alerts_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—ç—Ö–æ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    if job_queue:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        job_queue.run_repeating(
            check_price_changes,
            interval=1800,  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            first=60,  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
            name="price_changes_check"
        )
        logger.info("‚è∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ 9:00 –ú–°–ö
        moscow_tz = pytz.timezone('Europe/Moscow')
        daily_time = time(hour=9, minute=0, tzinfo=moscow_tz)
        
        job_queue.run_daily(
            daily_summary_job,
            time=daily_time,
            name="daily_summary"
        )
        logger.info("üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ 9:00 –ú–°–ö")
    else:
        logger.warning("‚ö†Ô∏è JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    logger.info("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞–∫—Ü–∏–π, —Ç–æ–≤–∞—Ä–æ–≤, –∏–Ω–¥–µ–∫—Å–æ–≤")
    logger.info("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã, –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 