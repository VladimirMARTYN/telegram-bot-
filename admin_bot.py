#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import asyncio
from datetime import datetime, time
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue
import json
import aiohttp
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '0'))

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if ADMIN_USER_ID == 0:
    logger.warning("‚ö†Ô∏è ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(moscow_tz)

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# –£–î–ê–õ–ï–ù–û: inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ü–∏–π —Å MOEX
async def get_moex_stocks():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏"""
    stocks_data = {}
    
    # –°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    stocks = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏
        'SBER': {'name': '–°–±–µ—Ä', 'emoji': 'üü¢'},
        'YDEX': {'name': '–Ø–Ω–¥–µ–∫—Å', 'emoji': 'üî¥'},
        'VKCO': {'name': '–í–ö', 'emoji': 'üîµ'},
        'T': {'name': '–¢-–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'emoji': 'üü°'},
        'GAZP': {'name': '–ì–∞–∑–ø—Ä–æ–º', 'emoji': 'üíé'},
        'GMKN': {'name': '–ù–æ—Ä–Ω–∏–∫–µ–ª—å', 'emoji': '‚ö°'},
        'ROSN': {'name': '–†–æ—Å–Ω–µ—Ñ—Ç—å', 'emoji': 'üõ¢Ô∏è'},
        'LKOH': {'name': '–õ–£–ö–û–ô–õ', 'emoji': '‚õΩ'},
        'MTSS': {'name': '–ú–¢–°', 'emoji': 'üì±'},
        'MFON': {'name': '–ú–µ–≥–∞—Ñ–æ–Ω', 'emoji': 'üì∂'},
        # –ê–∫—Ü–∏–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
        'PIKK': {'name': '–ü–ò–ö', 'emoji': 'üèóÔ∏è'},
        'SMLT': {'name': '–°–∞–º–æ–ª—ë—Ç', 'emoji': '‚úàÔ∏è'}
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤
            trading_url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities.json"
            params = {
                'securities': ','.join(stocks.keys()),
                'iss.meta': 'off',
                'iss.only': 'securities,marketdata'
            }
            
            async with session.get(trading_url, params=params) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤
                    securities_data = {}
                    marketdata = {}
                    
                    if 'securities' in data and 'data' in data['securities']:
                        securities_cols = data['securities']['columns']
                        for row in data['securities']['data']:
                            row_data = dict(zip(securities_cols, row))
                            secid = row_data.get('SECID')
                            if secid in stocks:
                                securities_data[secid] = {
                                    'shortname': row_data.get('SHORTNAME', stocks[secid]['name']),
                                    'lotsize': row_data.get('LOTSIZE', 1)
                                }
                    
                    if 'marketdata' in data and 'data' in data['marketdata']:
                        marketdata_cols = data['marketdata']['columns']
                        for row in data['marketdata']['data']:
                            row_data = dict(zip(marketdata_cols, row))
                            secid = row_data.get('SECID')
                            if secid in stocks:
                                marketdata[secid] = {
                                    'last': row_data.get('LAST'),
                                    'change': row_data.get('CHANGE'),
                                    'changeprcnt': row_data.get('CHANGEPRCNT'),
                                    'volume': row_data.get('VALTODAY'),
                                    'open': row_data.get('OPEN'),
                                    'high': row_data.get('HIGH'),
                                    'low': row_data.get('LOW')
                                }
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    for ticker in stocks:
                        if ticker in securities_data or ticker in marketdata:
                            stocks_data[ticker] = {
                                'name': stocks[ticker]['name'],
                                'emoji': stocks[ticker]['emoji'],
                                'shortname': securities_data.get(ticker, {}).get('shortname', stocks[ticker]['name']),
                                'price': marketdata.get(ticker, {}).get('last'),
                                'change': marketdata.get(ticker, {}).get('change'),
                                'change_pct': marketdata.get(ticker, {}).get('changeprcnt'),
                                'volume': marketdata.get(ticker, {}).get('volume'),
                                'open': marketdata.get(ticker, {}).get('open'),
                                'high': marketdata.get(ticker, {}).get('high'),
                                'low': marketdata.get(ticker, {}).get('low')
                            }
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOEX: {e}")
    
    return stocks_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¶–ë –†–§ —É–±—Ä–∞–Ω–∞ - API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot_start_time = get_moscow_time()

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
user_data = {}

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_data
    try:
        if os.path.exists('user_data.json'):
            with open('user_data.json', 'r', encoding='utf-8') as f:
                user_data = json.load(f)
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}")
        else:
            user_data = {}
            logger.info("üìä –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        user_data = {}

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open('user_data.json', 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = user.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'username': user.username,
            'first_seen': get_moscow_time().isoformat(),
            'last_activity': get_moscow_time().isoformat()
        }
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user_id})")
        save_user_data()
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_data[user_id]['last_activity'] = get_moscow_time().isoformat()
        save_user_data()
    
    welcome_text = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
        f"ü§ñ –≠—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π Telegram –±–æ—Ç\n\n"
        f"üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"/help - –°–ø—Ä–∞–≤–∫–∞\n"
        f"/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        f"/rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∞–∫—Ü–∏–π\n\n"
        f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        f"/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        f"/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        f"/set_alert - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
        f"/view_alerts - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã\n\n"
        f"üë§ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
        f"üìä <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(user_data)}"
    )
    
    await update.message.reply_html(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = (
        "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –±–æ—Ç—É</b>\n\n"
        "üí± <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∞–∫—Ü–∏–π\n"
        "‚Ä¢ –¢–æ–≤–∞—Ä—ã (–Ω–µ—Ñ—Ç—å, –∑–æ–ª–æ—Ç–æ, —Å–µ—Ä–µ–±—Ä–æ)\n"
        "‚Ä¢ –§–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞\n\n"
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        "/rates - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã\n\n"
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/set_alert - –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã\n"
        "/view_alerts - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "üîÑ <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "‚Ä¢ –¶–ë –†–§ - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
        "‚Ä¢ CoinGecko - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n" 
        "‚Ä¢ MOEX - —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã\n"
        "‚Ä¢ Yahoo Finance - —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω–¥–µ–∫—Å—ã"
    )
    
    await update.message.reply_html(help_text)

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /ping"""
    current_time = get_moscow_time().strftime("%d.%m.%Y %H:%M:%S")
    await update.message.reply_text(f"üèì –ü–æ–Ω–≥! –í—Ä–µ–º—è: {current_time}")

async def rates_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞–∫—Ü–∏–π, —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–æ–≤"""
    try:
        await update.message.reply_text("üìä –ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω—ã–µ –∫—É—Ä—Å—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # 1. –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§
        try:
            cbr_response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
            cbr_response.raise_for_status()
            cbr_data = cbr_response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (—Ç–æ–ª—å–∫–æ 4 –æ—Å–Ω–æ–≤–Ω—ã–µ)
            usd_rate = cbr_data.get('Valute', {}).get('USD', {}).get('Value', '–ù/–î')
            eur_rate = cbr_data.get('Valute', {}).get('EUR', {}).get('Value', '–ù/–î')
            cny_rate = cbr_data.get('Valute', {}).get('CNY', {}).get('Value', '–ù/–î')
            gbp_rate = cbr_data.get('Valute', {}).get('GBP', {}).get('Value', '–ù/–î')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ä—É–±–ª–∏
            usd_to_rub_rate = usd_rate if isinstance(usd_rate, (int, float)) else 0
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
            usd_str = f"{usd_rate:.2f} ‚ÇΩ" if isinstance(usd_rate, (int, float)) else str(usd_rate)
            eur_str = f"{eur_rate:.2f} ‚ÇΩ" if isinstance(eur_rate, (int, float)) else str(eur_rate)
            cny_str = f"{cny_rate:.2f} ‚ÇΩ" if isinstance(cny_rate, (int, float)) else str(cny_rate)
            gbp_str = f"{gbp_rate:.2f} ‚ÇΩ" if isinstance(gbp_rate, (int, float)) else str(gbp_rate)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –¶–ë –†–§: {e}")
            usd_str = eur_str = cny_str = gbp_str = "‚ùå –û—à–∏–±–∫–∞ API"
            usd_to_rub_rate = 80  # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        
        # 2. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        try:
            crypto_data = await get_crypto_extended()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ü–µ–Ω—ã
            crypto_strings = {}
            crypto_names = {
                'bitcoin': 'Bitcoin',
                'ethereum': 'Ethereum', 
                'ton': 'TON',
                'ripple': 'XRP',
                'cardano': 'Cardano',
                'solana': 'Solana',
                'dogecoin': 'Dogecoin'
            }
            
            for crypto_id, price in crypto_data.items():
                name = crypto_names.get(crypto_id, crypto_id.upper())
                if isinstance(price, (int, float)) and usd_to_rub_rate > 0:
                    rub_price = price * usd_to_rub_rate
                    if price >= 1:
                        crypto_strings[crypto_id] = f"{name}: ${price:,.0f} ({rub_price:,.0f} ‚ÇΩ)"
                    else:
                        crypto_strings[crypto_id] = f"{name}: ${price:.3f} ({rub_price:.2f} ‚ÇΩ)"
                elif isinstance(price, (int, float)):
                    if price >= 1:
                        crypto_strings[crypto_id] = f"{name}: ${price:,.0f}"
                    else:
                        crypto_strings[crypto_id] = f"{name}: ${price:.3f}"
                else:
                    crypto_strings[crypto_id] = f"{name}: ‚ùå –ù/–î"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
            crypto_strings = {
                'bitcoin': 'Bitcoin: ‚ùå –û—à–∏–±–∫–∞ API',
                'ethereum': 'Ethereum: ‚ùå –û—à–∏–±–∫–∞ API',
                'ton': 'TON: ‚ùå –û—à–∏–±–∫–∞ API',
                'ripple': 'XRP: ‚ùå –û—à–∏–±–∫–∞ API',
                'cardano': 'Cardano: ‚ùå –û—à–∏–±–∫–∞ API',
                'solana': 'Solana: ‚ùå –û—à–∏–±–∫–∞ API',
                'dogecoin': 'Dogecoin: ‚ùå –û—à–∏–±–∫–∞ API'
            }
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π —Å MOEX
        moex_stocks = await get_moex_stocks()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤
        main_stocks = {}
        real_estate_stocks = {}
        
        for ticker, data in moex_stocks.items():
            if ticker in ['PIKK', 'SMLT']:
                real_estate_stocks[ticker] = data
            else:
                main_stocks[ticker] = data
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–∫—Ü–∏–∏
        def format_stock_data(stocks_dict):
            result = {}
            for ticker, data in stocks_dict.items():
                price = data.get('price')
                change_pct = data.get('change_pct')
                name = data.get('name', ticker)
                
                if price is not None:
                    price_str = f"{price:.2f} ‚ÇΩ"
                    
                    if change_pct is not None:
                        if change_pct > 0:
                            change_str = f"(+{change_pct:.2f}%)"
                        elif change_pct < 0:
                            change_str = f"({change_pct:.2f}%)"
                        else:
                            change_str = "(0.00%)"
                        
                        result[ticker] = f"{name}: {price_str} {change_str}"
                    else:
                        result[ticker] = f"{name}: {price_str}"
                else:
                    result[ticker] = f"{name}: ‚ùå –ù/–î"
            return result
        
        main_stock_strings = format_stock_data(main_stocks)
        real_estate_stock_strings = format_stock_data(real_estate_stocks)
        
        # 4. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
        try:
            commodities = await get_commodities_data()
            commodity_strings = {}
            
            for commodity_id, data in commodities.items():
                name = data.get('name')
                price = data.get('price')
                currency = data.get('currency', 'USD')
                
                if isinstance(price, (int, float)):
                    if usd_to_rub_rate > 0 and currency == 'USD':
                        rub_price = price * usd_to_rub_rate
                        commodity_strings[commodity_id] = f"{name}: ${price:.2f} ({rub_price:.2f} ‚ÇΩ)"
                    else:
                        commodity_strings[commodity_id] = f"{name}: ${price:.2f}"
                else:
                    commodity_strings[commodity_id] = f"{name}: ‚ùå –ù/–î"
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            commodity_strings = {
                'brent': '–ù–µ—Ñ—Ç—å Brent: ‚ùå –û—à–∏–±–∫–∞ API',
                'gold': '–ó–æ–ª–æ—Ç–æ: ‚ùå –û—à–∏–±–∫–∞ API', 
                'silver': '–°–µ—Ä–µ–±—Ä–æ: ‚ùå –û—à–∏–±–∫–∞ API'
            }
        
        # 5. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        try:
            indices = await get_indices_data()
            index_strings = {}
            
            for index_id, data in indices.items():
                name = data.get('name')
                price = data.get('price')
                change_pct = data.get('change_pct', 0)
                
                if isinstance(price, (int, float)):
                    price_str = f"{price:.2f}"
                    
                    if isinstance(change_pct, (int, float)):
                        if change_pct > 0:
                            change_str = f"(+{change_pct:.2f}%)"
                        elif change_pct < 0:
                            change_str = f"({change_pct:.2f}%)"
                        else:
                            change_str = "(0.00%)"
                        
                        index_strings[index_id] = f"{name}: {price_str} {change_str}"
                    else:
                        index_strings[index_id] = f"{name}: {price_str}"
                else:
                    index_strings[index_id] = f"{name}: ‚ùå –ù/–î"
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
            index_strings = {
                'imoex': 'IMOEX: ‚ùå –û—à–∏–±–∫–∞ API',
                'rts': 'RTS: ‚ùå –û—à–∏–±–∫–∞ API',
                'sp500': 'S&P 500: ‚ùå –û—à–∏–±–∫–∞ API'
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        current_time = get_moscow_time().strftime("%d.%m.%Y %H:%M")

        message = f"""<b>–ü–û–õ–ù–´–ï –ö–£–†–°–´ –§–ò–ù–ê–ù–°–û–í–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¶–ë –†–§:</b>
USD: {usd_str}
EUR: {eur_str}
CNY: {cny_str}
GBP: {gbp_str}

<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>
{chr(10).join(crypto_strings.values())}

<b>–†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏ (MOEX):</b>
{chr(10).join(main_stock_strings.values()) if main_stock_strings else "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"}

<b>–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:</b>
{chr(10).join(real_estate_stock_strings.values()) if real_estate_stock_strings else "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"}

<b>–¢–æ–≤–∞—Ä—ã:</b>
{chr(10).join(commodity_strings.values()) if commodity_strings else "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"}

<b>–§–æ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã:</b>
{chr(10).join(index_strings.values()) if index_strings else "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"}

<b>–í—Ä–µ–º—è:</b> {current_time}
<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> –¶–ë –†–§, CoinGecko, MOEX, Yahoo Finance"""

        await update.message.reply_html(message)
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ rates_command: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {str(e)}\n\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_text = update.message.text
    user_id = update.effective_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        user_data[user_id]['last_activity'] = get_moscow_time().isoformat()
        save_user_data()
    
    # –ü—Ä–æ—Å—Ç–æ–π —ç—Ö–æ –æ—Ç–≤–µ—Ç
    await update.message.reply_text(
        f"–ü–æ–ª—É—á–∏–ª: {message_text}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )

async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤"""
    user_id = update.effective_user.id
    notifications = load_notification_data()
    
    if str(user_id) not in notifications:
        notifications[str(user_id)] = {
            'subscribed': True,
            'threshold': 2.0,  # 2% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'alerts': {},
            'daily_summary': True
        }
        save_notification_data(notifications)
        
        await update.message.reply_html(
            "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            "üìà –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            "‚Ä¢ –†–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–æ–≤ >2%\n"
            "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–µ –≤ 9:00 –ú–°–ö\n\n"
            "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_alert –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤\n"
            "üîï /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏"
        )
    else:
        notifications[str(user_id)]['subscribed'] = True
        save_notification_data(notifications)
        
        await update.message.reply_html(
            "üîî <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view_alerts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        )

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    notifications = load_notification_data()
    
    if str(user_id) in notifications:
        notifications[str(user_id)]['subscribed'] = False
        save_notification_data(notifications)
        
        await update.message.reply_html(
            "üîï <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n"
            "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
        )
    else:
        await update.message.reply_html(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
        )

async def set_alert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_html(
            "‚öôÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤</b>\n\n"
            "üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ <code>/set_alert USD 85</code> - –¥–æ–ª–ª–∞—Ä –≤—ã—à–µ 85‚ÇΩ\n"
            "‚Ä¢ <code>/set_alert BTC 115000</code> - –±–∏—Ç–∫–æ–∏–Ω –Ω–∏–∂–µ 115K$\n"
            "‚Ä¢ <code>/set_alert SBER 200</code> - –°–±–µ—Ä –≤—ã—à–µ 200‚ÇΩ\n\n"
            "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã:\n"
            "‚Ä¢ –í–∞–ª—é—Ç—ã: USD, EUR, CNY, GBP\n"
            "‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: BTC, ETH, TON, XRP, ADA, SOL, DOGE\n"
            "‚Ä¢ –ê–∫—Ü–∏–∏: SBER, YDEX, VKCO, T, GAZP, GMKN, ROSN, LKOH, MTSS, MFON, PIKK, SMLT"
        )
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç–∏–≤ –∏ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    
    asset = context.args[0].upper()
    try:
        threshold = float(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    notifications = load_notification_data()
    if str(user_id) not in notifications:
        notifications[str(user_id)] = {
            'subscribed': True,
            'threshold': 2.0,
            'alerts': {},
            'daily_summary': True
        }
    
    notifications[str(user_id)]['alerts'][asset] = threshold
    save_notification_data(notifications)
    
    await update.message.reply_html(
        f"‚úÖ <b>–ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"üéØ <b>–ê–∫—Ç–∏–≤:</b> {asset}\n"
        f"üìä <b>–ü–æ—Ä–æ–≥:</b> {threshold}\n\n"
        f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
    )

async def view_alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
    user_id = update.effective_user.id
    notifications = load_notification_data()
    
    if str(user_id) not in notifications:
        await update.message.reply_html(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        return
    
    user_notifications = notifications[str(user_id)]
    
    status = "üîî –í–∫–ª—é—á–µ–Ω—ã" if user_notifications.get('subscribed', False) else "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
    threshold = user_notifications.get('threshold', 2.0)
    daily = "‚úÖ –î–∞" if user_notifications.get('daily_summary', False) else "‚ùå –ù–µ—Ç"
    
    alerts_text = ""
    alerts = user_notifications.get('alerts', {})
    if alerts:
        alerts_text = "\n\nüìä <b>–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:</b>\n"
        for asset, value in alerts.items():
            alerts_text += f"‚Ä¢ {asset}: {value}\n"
    else:
        alerts_text = "\n\nüìä <b>–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:</b> –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    message = (
        f"‚öôÔ∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"üîî <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        f"üìà <b>–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b> {threshold}%\n"
        f"üåÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞:</b> {daily}"
        f"{alerts_text}"
    )
    
    await update.message.reply_html(message)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def get_commodities_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º: –Ω–µ—Ñ—Ç—å Brent, –∑–æ–ª–æ—Ç–æ, —Å–µ—Ä–µ–±—Ä–æ"""
    commodities_data = {}
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Yahoo Finance API –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        import requests
        
        # –ù–µ—Ñ—Ç—å Brent
        brent_response = requests.get("https://query1.finance.yahoo.com/v8/finance/chart/BZ=F", timeout=10)
        if brent_response.status_code == 200:
            brent_data = brent_response.json()
            if 'chart' in brent_data and 'result' in brent_data['chart'] and len(brent_data['chart']['result']) > 0:
                result = brent_data['chart']['result'][0]
                if 'meta' in result and 'regularMarketPrice' in result['meta']:
                    commodities_data['brent'] = {
                        'name': '–ù–µ—Ñ—Ç—å Brent',
                        'price': result['meta']['regularMarketPrice'],
                        'currency': 'USD'
                    }
        
        # –ó–æ–ª–æ—Ç–æ
        gold_response = requests.get("https://query1.finance.yahoo.com/v8/finance/chart/GC=F", timeout=10)
        if gold_response.status_code == 200:
            gold_data = gold_response.json()
            if 'chart' in gold_data and 'result' in gold_data['chart'] and len(gold_data['chart']['result']) > 0:
                result = gold_data['chart']['result'][0]
                if 'meta' in result and 'regularMarketPrice' in result['meta']:
                    commodities_data['gold'] = {
                        'name': '–ó–æ–ª–æ—Ç–æ',
                        'price': result['meta']['regularMarketPrice'],
                        'currency': 'USD'
                    }
        
        # –°–µ—Ä–µ–±—Ä–æ
        silver_response = requests.get("https://query1.finance.yahoo.com/v8/finance/chart/SI=F", timeout=10)
        if silver_response.status_code == 200:
            silver_data = silver_response.json()
            if 'chart' in silver_data and 'result' in silver_data['chart'] and len(silver_data['chart']['result']) > 0:
                result = silver_data['chart']['result'][0]
                if 'meta' in result and 'regularMarketPrice' in result['meta']:
                    commodities_data['silver'] = {
                        'name': '–°–µ—Ä–µ–±—Ä–æ',
                        'price': result['meta']['regularMarketPrice'],
                        'currency': 'USD'
                    }
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    return commodities_data

async def get_indices_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º: IMOEX, RTS, S&P 500"""
    indices_data = {}
    
    try:
        # MOEX –∏–Ω–¥–µ–∫—Å—ã
        async with aiohttp.ClientSession() as session:
            # IMOEX
            imoex_url = "https://iss.moex.com/iss/engines/stock/markets/index/securities/IMOEX.json"
            async with session.get(imoex_url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if 'marketdata' in data and 'data' in data['marketdata'] and len(data['marketdata']['data']) > 0:
                        row_data = dict(zip(data['marketdata']['columns'], data['marketdata']['data'][0]))
                        if 'LAST' in row_data and row_data['LAST']:
                            indices_data['imoex'] = {
                                'name': 'IMOEX',
                                'price': row_data['LAST'],
                                'change_pct': row_data.get('LASTTOPREVPRICE', 0)
                            }
            
            # RTS
            rts_url = "https://iss.moex.com/iss/engines/stock/markets/index/securities/RTSI.json"
            async with session.get(rts_url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if 'marketdata' in data and 'data' in data['marketdata'] and len(data['marketdata']['data']) > 0:
                        row_data = dict(zip(data['marketdata']['columns'], data['marketdata']['data'][0]))
                        if 'LAST' in row_data and row_data['LAST']:
                            indices_data['rts'] = {
                                'name': 'RTS',
                                'price': row_data['LAST'],
                                'change_pct': row_data.get('LASTTOPREVPRICE', 0)
                            }
        
        # S&P 500 —á–µ—Ä–µ–∑ Yahoo Finance
        sp500_response = requests.get("https://query1.finance.yahoo.com/v8/finance/chart/%5EGSPC", timeout=10)
        if sp500_response.status_code == 200:
            sp500_data = sp500_response.json()
            if 'chart' in sp500_data and 'result' in sp500_data['chart'] and len(sp500_data['chart']['result']) > 0:
                result = sp500_data['chart']['result'][0]
                if 'meta' in result and 'regularMarketPrice' in result['meta']:
                    indices_data['sp500'] = {
                        'name': 'S&P 500',
                        'price': result['meta']['regularMarketPrice'],
                        'change_pct': result['meta'].get('regularMarketChangePercent', 0)
                    }
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
    
    return indices_data

async def get_crypto_extended(backup_api=False):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å backup API"""
    crypto_data = {}
    
    if not backup_api:
        # –û—Å–Ω–æ–≤–Ω–æ–π API - CoinGecko
        try:
            crypto_response = requests.get(
                "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,the-open-network,ripple,cardano,solana,dogecoin&vs_currencies=usd",
                timeout=10
            )
            crypto_response.raise_for_status()
            data = crypto_response.json()
            
            crypto_data = {
                'bitcoin': data.get('bitcoin', {}).get('usd'),
                'ethereum': data.get('ethereum', {}).get('usd'),
                'ton': data.get('the-open-network', {}).get('usd'),
                'ripple': data.get('ripple', {}).get('usd'),
                'cardano': data.get('cardano', {}).get('usd'),
                'solana': data.get('solana', {}).get('usd'),
                'dogecoin': data.get('dogecoin', {}).get('usd')
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ CoinGecko API: {e}")
            return await get_crypto_extended(backup_api=True)
    else:
        # Backup API - CoinMarketCap (–ø–æ—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        crypto_data = {
            'bitcoin': None,
            'ethereum': None,
            'ton': None,
            'ripple': None,
            'cardano': None,
            'solana': None,
            'dogecoin': None
        }
    
    return crypto_data

# –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_DATA_FILE = 'notifications.json'
PRICE_HISTORY_FILE = 'price_history.json'

def load_notification_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        if os.path.exists(NOTIFICATION_DATA_FILE):
            with open(NOTIFICATION_DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {}

def save_notification_data(data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        with open(NOTIFICATION_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

def load_price_history():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω"""
    try:
        if os.path.exists(PRICE_HISTORY_FILE):
            with open(PRICE_HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return {}

def save_price_history(data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω"""
    try:
        with open(PRICE_HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_price_changes(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_prices = {}
        
        # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
        cbr_response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
        if cbr_response.status_code == 200:
            cbr_data = cbr_response.json()
            current_prices.update({
                'USD': cbr_data.get('Valute', {}).get('USD', {}).get('Value'),
                'EUR': cbr_data.get('Valute', {}).get('EUR', {}).get('Value'),
                'CNY': cbr_data.get('Valute', {}).get('CNY', {}).get('Value'),
                'GBP': cbr_data.get('Valute', {}).get('GBP', {}).get('Value')
            })
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        crypto_data = await get_crypto_extended()
        current_prices.update({
            'BTC': crypto_data.get('bitcoin'),
            'ETH': crypto_data.get('ethereum'),
            'TON': crypto_data.get('ton'),
            'XRP': crypto_data.get('ripple'),
            'ADA': crypto_data.get('cardano'),
            'SOL': crypto_data.get('solana'),
            'DOGE': crypto_data.get('dogecoin')
        })
        
        # –ê–∫—Ü–∏–∏
        moex_data = await get_moex_stocks()
        for ticker, data in moex_data.items():
            current_prices[ticker] = data.get('price')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ü–µ–Ω—ã
        price_history = load_price_history()
        notifications = load_notification_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for user_id, user_notifications in notifications.items():
            if not user_notifications.get('subscribed', False):
                continue
            
            threshold = user_notifications.get('threshold', 2.0)
            alerts = user_notifications.get('alerts', {})
            
            notifications_to_send = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            for asset, current_price in current_prices.items():
                if current_price is None:
                    continue
                
                previous_price = price_history.get(asset)
                if previous_price is None:
                    continue
                
                change_pct = ((current_price - previous_price) / previous_price) * 100
                
                if abs(change_pct) >= threshold:
                    emoji = "üìà" if change_pct > 0 else "üìâ"
                    notifications_to_send.append(
                        f"{emoji} <b>{asset}</b>: {change_pct:+.2f}% "
                        f"({previous_price:.2f} ‚Üí {current_price:.2f})"
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
            for asset, alert_threshold in alerts.items():
                current_price = current_prices.get(asset)
                if current_price is None:
                    continue
                
                if current_price >= alert_threshold:
                    notifications_to_send.append(
                        f"üö® <b>–ê–õ–ï–†–¢:</b> {asset} –¥–æ—Å—Ç–∏–≥ {current_price:.2f} "
                        f"(–ø–æ—Ä–æ–≥: {alert_threshold})"
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if notifications_to_send:
                message = "üîî <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –¶–ï–ù–ê–•</b>\n\n" + "\n".join(notifications_to_send)
                try:
                    await context.bot.send_message(
                        chat_id=int(user_id),
                        text=message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—é
        price_history.update({k: v for k, v in current_prices.items() if v is not None})
        save_price_history(price_history)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω: {e}")

async def daily_summary_job(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –≤ 9:00 –ú–°–ö"""
    try:
        notifications = load_notification_data()
        
        for user_id, user_notifications in notifications.items():
            if not user_notifications.get('subscribed', False):
                continue
            if not user_notifications.get('daily_summary', True):
                continue
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π rates
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text="üåÖ <b>–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê</b>\n\n–ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã...",
                    parse_mode='HTML'
                )
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é rates_command
                # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–º –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_user_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ü–æ–ª—É—á–∞–µ–º JobQueue
    job_queue = application.job_queue

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("ping", ping_command))
    application.add_handler(CommandHandler("rates", rates_command))
    
    # –ö–æ–º–∞–Ω–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    application.add_handler(CommandHandler("set_alert", set_alert_command))
    application.add_handler(CommandHandler("view_alerts", view_alerts_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—ç—Ö–æ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    if job_queue:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        job_queue.run_repeating(
            check_price_changes,
            interval=1800,  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            first=60,  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
            name="price_changes_check"
        )
        logger.info("‚è∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ 9:00 –ú–°–ö
        moscow_tz = pytz.timezone('Europe/Moscow')
        daily_time = time(hour=9, minute=0, tzinfo=moscow_tz)
        
        job_queue.run_daily(
            daily_summary_job,
            time=daily_time,
            name="daily_summary"
        )
        logger.info("üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ 9:00 –ú–°–ö")
    else:
        logger.warning("‚ö†Ô∏è JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    logger.info("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞–∫—Ü–∏–π, —Ç–æ–≤–∞—Ä–æ–≤, –∏–Ω–¥–µ–∫—Å–æ–≤")
    logger.info("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã, –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 