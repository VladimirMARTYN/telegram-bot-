#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import asyncio
import os
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '0'))

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if ADMIN_USER_ID == 0:
    logger.warning("‚ö†Ô∏è ADMIN_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot_start_time = datetime.now()

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = "user_data.json"

# –°–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞)
user_data = {}

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
        logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ {len(user_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {USER_DATA_FILE}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_data
    try:
        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                loaded_data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int
                user_data = {int(user_id): user_info for user_id, user_info in loaded_data.items()}
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {len(user_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {USER_DATA_FILE}")
        else:
            logger.info(f"üìÇ –§–∞–π–ª {USER_DATA_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            user_data = {}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        user_data = {}

# –§—É–Ω–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = user.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'username': user.username,
            'first_seen': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat()
        }
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user_id})")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ
        save_user_data()
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        user_data[user_id]['last_activity'] = datetime.now().isoformat()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        save_user_data()
    
    welcome_text = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
        f"ü§ñ –≠—Ç–æ —á–∏—Å—Ç—ã–π Telegram –±–æ—Ç\n\n"
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/help - –°–ø—Ä–∞–≤–∫–∞\n"
        f"/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        f"/rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        f"/convert - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n"
        f"/compare - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤\n"
        f"/trending - –¢—Ä–µ–Ω–¥—ã –∏ –ª–∏–¥–µ—Ä—ã –¥–Ω—è\n"
        f"/stocks - –¢–æ–ø —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π\n"
        f"/my_id - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\n"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if user_id == ADMIN_USER_ID:
        welcome_text += f"/fix_admin_id - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
    elif ADMIN_USER_ID == 0:
        # –ï—Å–ª–∏ ADMIN_USER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        welcome_text += f"/fix_admin_id - –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)\n"
    
    welcome_text += "\n"
    
    if user_id == ADMIN_USER_ID:
        welcome_text += "üë®‚Äçüíª <b>–°—Ç–∞—Ç—É—Å:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
    else:
        welcome_text += "üë§ <b>–°—Ç–∞—Ç—É—Å:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
    
    welcome_text += f"üìä <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(user_data)}"
    
    await update.message.reply_html(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    user_id = update.effective_user.id
    is_admin = user_id == ADMIN_USER_ID
    
    help_text = (
        "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        "/rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/convert - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n"
        "/compare - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤\n"
        "/trending - –¢—Ä–µ–Ω–¥—ã –∏ –ª–∏–¥–µ—Ä—ã –¥–Ω—è\n"
        "/stocks - –¢–æ–ø —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π\n"
        "/my_id - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\n"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if is_admin:
        help_text += "/fix_admin_id - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
    elif ADMIN_USER_ID == 0:
        # –ï—Å–ª–∏ ADMIN_USER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º
        help_text += "/fix_admin_id - –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)\n"
    
    help_text += (
        "\nüí± <b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§ (9 –≤–∞–ª—é—Ç)\n"
        "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏\n"
        "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ª–∏–¥–µ—Ä–æ–≤ –¥–Ω—è\n"
        "‚Ä¢ –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (Bitcoin, Ethereum, Dogecoin, TON)\n"
        "‚Ä¢ –¢–æ–ø —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞)\n"
    )
    
    help_text += (
        "\n‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞."
    )
    
    if is_admin:
        help_text += f"\n\nüë®‚Äçüíª <b>–°—Ç–∞—Ç—É—Å:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\nüìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(user_data)}"
    
    await update.message.reply_html(help_text)

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /ping"""
    current_time = datetime.now().strftime("%H:%M:%S")
    await update.message.reply_text(f"üèì –ü–æ–Ω–≥! –í—Ä–µ–º—è: {current_time}")

async def my_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /my_id"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    
    id_text = (
        f"üÜî <b>–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        f"üë§ <b>ID:</b> <code>{user_id}</code>\n"
        f"üìù <b>–ò–º—è:</b> {first_name}\n"
    )
    
    if username:
        id_text += f"üî§ <b>Username:</b> @{username}\n"
    
    if user_id == ADMIN_USER_ID:
        id_text += f"\nüë®‚Äçüíª <b>–°—Ç–∞—Ç—É—Å:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    await update.message.reply_html(id_text)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    uptime = datetime.now() - bot_start_time
    uptime_str = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
    
    admin_text = (
        f"üë®‚Äçüíª <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
        
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}\n"
        f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
        f"‚Ä¢ –ó–∞–ø—É—â–µ–Ω: {bot_start_time.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        f"üîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/admin - –≠—Ç–∞ –ø–∞–Ω–µ–ª—å\n"
        f"/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        f"/rates - –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        f"/convert - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç\n"
        f"/compare - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤\n"
        f"/trending - –¢—Ä–µ–Ω–¥—ã –∏ –ª–∏–¥–µ—Ä—ã –¥–Ω—è\n"
        f"/stocks - –¢–æ–ø —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π\n"
        f"/fix_admin_id - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        
        f"üí± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        f"‚Ä¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§ (9 –≤–∞–ª—é—Ç)\n"
        f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏\n"
        f"‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏\n"
        f"‚Ä¢ –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (BTC, ETH, DOGE, TON)\n"
        f"‚Ä¢ –¢–æ–ø —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞)\n\n"
        
        f"üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(user_data)}\n\n"
        
        f"üîß <b>ADMIN_USER_ID:</b> {ADMIN_USER_ID}\n"
        f"üÜî <b>–í–∞—à ID:</b> {user_id}\n"
        f"‚úÖ <b>–ü—Ä–∞–≤–∞:</b> {'–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ' if user_id == ADMIN_USER_ID else '‚ùå –¢—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (/fix_admin_id)'}\n\n"
        
        f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"
    )
    
    await update.message.reply_html(admin_text)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_text = update.message.text
    user_id = update.effective_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        user_data[user_id]['last_active'] = datetime.now().isoformat()
    
    # –ü—Ä–æ—Å—Ç–æ–π —ç—Ö–æ –æ—Ç–≤–µ—Ç
    await update.message.reply_text(
        f"–ü–æ–ª—É—á–∏–ª: {message_text}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )

async def rates_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    try:
        await update.message.reply_text("üìä –ü–æ–ª—É—á–∞—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
        
        import requests
        
        # 1. –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§
        try:
            cbr_response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
            cbr_response.raise_for_status()
            cbr_data = cbr_response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            usd_rate = cbr_data.get('Valute', {}).get('USD', {}).get('Value', '–ù/–î')
            eur_rate = cbr_data.get('Valute', {}).get('EUR', {}).get('Value', '–ù/–î')
            cny_rate = cbr_data.get('Valute', {}).get('CNY', {}).get('Value', '–ù/–î')
            gbp_rate = cbr_data.get('Valute', {}).get('GBP', {}).get('Value', '–ù/–î')
            jpy_rate = cbr_data.get('Valute', {}).get('JPY', {}).get('Value', '–ù/–î')
            chf_rate = cbr_data.get('Valute', {}).get('CHF', {}).get('Value', '–ù/–î')
            cad_rate = cbr_data.get('Valute', {}).get('CAD', {}).get('Value', '–ù/–î')
            aud_rate = cbr_data.get('Valute', {}).get('AUD', {}).get('Value', '–ù/–î')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
            usd_str = f"{usd_rate:.2f} ‚ÇΩ" if isinstance(usd_rate, (int, float)) else str(usd_rate)
            eur_str = f"{eur_rate:.2f} ‚ÇΩ" if isinstance(eur_rate, (int, float)) else str(eur_rate)
            cny_str = f"{cny_rate:.2f} ‚ÇΩ" if isinstance(cny_rate, (int, float)) else str(cny_rate)
            gbp_str = f"{gbp_rate:.2f} ‚ÇΩ" if isinstance(gbp_rate, (int, float)) else str(gbp_rate)
            jpy_str = f"{jpy_rate:.4f} ‚ÇΩ" if isinstance(jpy_rate, (int, float)) else str(jpy_rate)  # JPY –æ–±—ã—á–Ω–æ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            chf_str = f"{chf_rate:.2f} ‚ÇΩ" if isinstance(chf_rate, (int, float)) else str(chf_rate)
            cad_str = f"{cad_rate:.2f} ‚ÇΩ" if isinstance(cad_rate, (int, float)) else str(cad_rate)
            aud_str = f"{aud_rate:.2f} ‚ÇΩ" if isinstance(aud_rate, (int, float)) else str(aud_rate)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –¶–ë –†–§: {e}")
            usd_str = eur_str = cny_str = gbp_str = jpy_str = chf_str = cad_str = aud_str = "‚ùå –û—à–∏–±–∫–∞ API"
        
        # 2. –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç CoinGecko
        try:
            crypto_response = requests.get(
                "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,dogecoin,the-open-network&vs_currencies=usd",
                timeout=10
            )
            crypto_response.raise_for_status()
            crypto_data = crypto_response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            bitcoin_price = crypto_data.get('bitcoin', {}).get('usd', '–ù/–î')
            ethereum_price = crypto_data.get('ethereum', {}).get('usd', '–ù/–î')
            dogecoin_price = crypto_data.get('dogecoin', {}).get('usd', '–ù/–î')
            ton_price = crypto_data.get('the-open-network', {}).get('usd', '–ù/–î')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ü–µ–Ω—ã
            btc_str = f"${bitcoin_price:,.0f}" if isinstance(bitcoin_price, (int, float)) else str(bitcoin_price)
            eth_str = f"${ethereum_price:,.0f}" if isinstance(ethereum_price, (int, float)) else str(ethereum_price)
            doge_str = f"${dogecoin_price:.4f}" if isinstance(dogecoin_price, (int, float)) else str(dogecoin_price)
            ton_str = f"${ton_price:.2f}" if isinstance(ton_price, (int, float)) else str(ton_price)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
            btc_str = eth_str = doge_str = ton_str = "‚ùå –û—à–∏–±–∫–∞ API"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        
        message = f"""üìä <b>–ö–£–†–°–´ –í–ê–õ–Æ–¢ –ò –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢</b>

üí± <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¶–ë –†–§:</b>
üá∫üá∏ USD: {usd_str}
üá™üá∫ EUR: {eur_str}
üá®üá≥ CNY: {cny_str}

üåç <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b>
üá¨üáß GBP: {gbp_str}
üáØüáµ JPY: {jpy_str}
üá®üá≠ CHF: {chf_str}
üá®üá¶ CAD: {cad_str}
üá¶üá∫ AUD: {aud_str}

‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>
üü† Bitcoin: {btc_str}
üî∑ Ethereum: {eth_str}
üêï Dogecoin: {doge_str}
üíé TON: {ton_str}

‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time}
üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> –¶–ë –†–§, CoinGecko"""

        await update.message.reply_html(message)
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ rates_command: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {str(e)}\n\n"
            f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )



async def fix_admin_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ADMIN_USER_ID"""
    global ADMIN_USER_ID
    user_id = update.effective_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_info = (
        f"üîß <b>–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ADMIN_USER_ID</b>\n\n"
        f"üìä <b>–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n"
        f"‚Ä¢ –í–∞—à ID: <code>{user_id}</code>\n"
        f"‚Ä¢ ADMIN_USER_ID: <code>{ADMIN_USER_ID}</code>\n"
        f"‚Ä¢ –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: <code>{os.getenv('ADMIN_USER_ID', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')}</code>\n\n"
    )
    
    # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if ADMIN_USER_ID == user_id:
        await update.message.reply_html(
            current_info +
            f"‚úÖ <b>–£–ñ–ï –ù–ê–°–¢–†–û–ï–ù–û –ü–†–ê–í–ò–õ–¨–ù–û!</b>\n\n"
            f"ADMIN_USER_ID = {ADMIN_USER_ID} —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º ID.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /broadcast —Å–Ω–æ–≤–∞."
        )
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ADMIN_USER_ID
    old_admin_id = ADMIN_USER_ID
    ADMIN_USER_ID = user_id
    
    success_msg = (
        current_info +
        f"‚úÖ <b>–ò–°–ü–†–ê–í–õ–ï–ù–û –£–°–ü–ï–®–ù–û!</b>\n\n"
        f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
        f"‚Ä¢ –ë—ã–ª–æ: <code>{old_admin_id}</code>\n"
        f"‚Ä¢ –°—Ç–∞–ª–æ: <code>{ADMIN_USER_ID}</code>\n\n"
        f"üéâ <b>–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n"
        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /broadcast\n\n"
        f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!\n"
        f"–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç:\n"
        f"1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_USER_ID = {user_id} –Ω–∞ Railway\n"
        f"2. –ò–ª–∏ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /fix_admin_id"
    )
    
    await update.message.reply_html(success_msg)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    logger.info(f"üîß ADMIN_USER_ID –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: {old_admin_id} ‚Üí {ADMIN_USER_ID}")







async def stocks_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /stocks - —Ç–æ–ø 10 —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π"""
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'username': user.username,
            'first_seen': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat()
        }
        save_user_data()
    else:
        user_data[user_id]['last_activity'] = datetime.now().isoformat()
        save_user_data()
    
    loading_msg = await update.message.reply_html("üìà <b>–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∞–∫—Ü–∏–π...</b>")
    
    try:
        # API –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ü–∏–π
        moex_url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities.json"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(moex_url) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"MOEX API error {response.status}: {error_text[:200]}")
                    raise Exception(f"–û—à–∏–±–∫–∞ API MOEX: —Å—Ç–∞—Ç—É—Å {response.status}")
                
                data = await response.json()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if not data or 'securities' not in data or 'marketdata' not in data:
                    raise Exception("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç MOEX API")
                
                securities_data = data.get('securities', {}).get('data', [])
                marketdata_data = data.get('marketdata', {}).get('data', [])
                
                if not securities_data or not marketdata_data:
                    raise Exception("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç MOEX API")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ü–∏—è—Ö
                securities = data['securities']['data']
                marketdata = data['marketdata']['data']
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                stocks_info = {}
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö
                security_columns = data['securities']['columns']
                for stock in securities:
                    stock_dict = dict(zip(security_columns, stock))
                    secid = stock_dict.get('SECID')
                    if secid:
                        stocks_info[secid] = {
                            'secid': secid,
                            'shortname': stock_dict.get('SHORTNAME', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                            'regnumber': stock_dict.get('REGNUMBER', ''),
                            'lotsize': stock_dict.get('LOTSIZE', 1),
                            'facevalue': stock_dict.get('FACEVALUE', 0)
                        }
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                marketdata_columns = data['marketdata']['columns']
                for market in marketdata:
                    market_dict = dict(zip(marketdata_columns, market))
                    secid = market_dict.get('SECID')
                    if secid and secid in stocks_info:
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Å–ª–∞
                        def safe_float(value, default=0.0):
                            if value is None or value == '':
                                return default
                            try:
                                return float(value)
                            except (ValueError, TypeError):
                                return default
                        
                        def safe_int(value, default=0):
                            if value is None or value == '':
                                return default
                            try:
                                return int(float(value))
                            except (ValueError, TypeError):
                                return default
                        
                        stocks_info[secid].update({
                            'last': safe_float(market_dict.get('LAST'), 0),
                            'change': safe_float(market_dict.get('CHANGE'), 0),
                            'changeprcnt': safe_float(market_dict.get('CHANGEPRCNT'), 0),
                            'voltoday': safe_int(market_dict.get('VOLTODAY'), 0),
                            'valtoday': safe_float(market_dict.get('VALTODAY'), 0),
                            'marketcap': safe_float(market_dict.get('MARKETCAP'), 0),
                            'time': str(market_dict.get('TIME', '')),
                            'updatetime': str(market_dict.get('UPDATETIME', ''))
                        })
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ü–∏–∏ —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                active_stocks = []
                for secid, info in stocks_info.items():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∞–∫—Ü–∏–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞ –∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
                    last_price = info.get('last', 0)
                    market_cap = info.get('marketcap', 0)
                    
                    if (last_price and last_price > 0 and market_cap and market_cap > 0):
                        active_stocks.append(info)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
                active_stocks.sort(key=lambda x: float(x.get('marketcap', 0)), reverse=True)
                
                # –ë–µ—Ä–µ–º —Ç–æ–ø 10
                top_stocks = active_stocks[:10]
                
                if not top_stocks:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ü–∏–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –±–µ—Ä–µ–º –ª—é–±—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
                    all_stocks = list(stocks_info.values())
                    available_stocks = [s for s in all_stocks if s.get('last', 0) and float(s.get('last', 0)) > 0]
                    
                    if available_stocks:
                        available_stocks.sort(key=lambda x: float(x.get('last', 0)), reverse=True)
                        top_stocks = available_stocks[:10]
                    else:
                        raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∞–∫—Ü–∏—è–º")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_text = "üìà <b>–¢–û–ü-10 –†–û–°–°–ò–ô–°–ö–ò–• –ê–ö–¶–ò–ô</b>\n"
                result_text += f"üèõÔ∏è <b>–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞ (MOEX)</b>\n\n"
                
                for i, stock in enumerate(top_stocks, 1):
                    name = stock.get('shortname', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    price = stock.get('last', 0)
                    change = stock.get('change', 0)
                    change_pct = stock.get('changeprcnt', 0)
                    marketcap = stock.get('marketcap', 0)
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    try:
                        price = float(price) if price else 0
                        change = float(change) if change else 0
                        change_pct = float(change_pct) if change_pct else 0
                        marketcap = float(marketcap) if marketcap else 0
                    except (ValueError, TypeError):
                        price = change = change_pct = marketcap = 0
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
                    if len(str(name)) > 25:
                        name = str(name)[:22] + "..."
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if change > 0:
                        change_emoji = "üìà"
                        change_color = "üü¢"
                    elif change < 0:
                        change_emoji = "üìâ"
                        change_color = "üî¥"
                    else:
                        change_emoji = "‚û°Ô∏è"
                        change_color = "‚ö™"
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
                    if marketcap >= 1_000_000_000_000:  # —Ç—Ä–∏–ª–ª–∏–æ–Ω—ã
                        cap_formatted = f"{marketcap/1_000_000_000_000:.1f} —Ç—Ä–ª–Ω ‚ÇΩ"
                    elif marketcap >= 1_000_000_000:  # –º–∏–ª–ª–∏–∞—Ä–¥—ã
                        cap_formatted = f"{marketcap/1_000_000_000:.1f} –º–ª—Ä–¥ ‚ÇΩ"
                    elif marketcap >= 1_000_000:  # –º–∏–ª–ª–∏–æ–Ω—ã
                        cap_formatted = f"{marketcap/1_000_000:.1f} –º–ª–Ω ‚ÇΩ"
                    else:
                        cap_formatted = f"{marketcap:.0f} ‚ÇΩ" if marketcap > 0 else "–Ω/–¥"
                    
                    result_text += f"{i}. <b>{name}</b> ({stock.get('secid', '')})\n"
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
                    if price > 0:
                        result_text += f"   üí∞ <b>{price:.2f} ‚ÇΩ</b>\n"
                    else:
                        result_text += f"   üí∞ <b>–Ω/–¥</b>\n"
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if price > 0:
                        result_text += f"   {change_color} {change:+.2f} ‚ÇΩ ({change_pct:+.2f}%) {change_emoji}\n"
                    else:
                        result_text += f"   ‚ö™ –Ω/–¥ ‚û°Ô∏è\n"
                    
                    result_text += f"   üè¢ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {cap_formatted}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
                result_text += f"üìä <b>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</b> –ü–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n"
                result_text += f"‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {current_time} (–ú–°–ö)\n"
                result_text += f"üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –±–∏—Ä–∂–∞ (MOEX)\n\n"
                result_text += f"üí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n"
                result_text += f"‚Ä¢ –¶–µ–Ω—ã –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö\n"
                result_text += f"‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
                result_text += f"‚Ä¢ üü¢ —Ä–æ—Å—Ç, üî¥ –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –¥–µ–Ω—å"
                
                await loading_msg.edit_text(result_text, parse_mode='HTML')
                
    except Exception as e:
        error_text = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏—è—Ö</b>\n\n"
            f"üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {str(e)}\n\n"
            f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏\n"
            f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å–µ—Ç–∏\n"
            f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ\n\n"
            f"üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
            f"/rates - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            f"/stocks - —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏"
        )
        
        await loading_msg.edit_text(error_text, parse_mode='HTML')
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ü–∏–π: {e}")

async def convert_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç - /convert [—Å—É–º–º–∞] [–∏–∑] [–≤]"""
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'username': user.username,
            'first_seen': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat()
        }
        save_user_data()
    else:
        user_data[user_id]['last_activity'] = datetime.now().isoformat()
        save_user_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if len(context.args) != 3:
        await update.message.reply_html(
            "üí± <b>–ö–û–ù–í–ï–†–¢–ï–† –í–ê–õ–Æ–¢</b>\n\n"
            "üîç <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/convert [—Å—É–º–º–∞] [–∏–∑ –≤–∞–ª—é—Ç—ã] [–≤ –≤–∞–ª—é—Ç—É]</code>\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>/convert 100 USD RUB</code> - –¥–æ–ª–ª–∞—Ä—ã –≤ —Ä—É–±–ª–∏\n"
            "‚Ä¢ <code>/convert 5000 RUB EUR</code> - —Ä—É–±–ª–∏ –≤ –µ–≤—Ä–æ\n"
            "‚Ä¢ <code>/convert 1000 CNY USD</code> - —é–∞–Ω–∏ –≤ –¥–æ–ª–ª–∞—Ä—ã\n"
            "‚Ä¢ <code>/convert 50 EUR CNY</code> - –µ–≤—Ä–æ –≤ —é–∞–Ω–∏\n\n"
            "üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n"
            "üá∑üá∫ <code>RUB</code> - –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å\n"
            "üá∫üá∏ <code>USD</code> - –î–æ–ª–ª–∞—Ä –°–®–ê\n"
            "üá™üá∫ <code>EUR</code> - –ï–≤—Ä–æ\n"
            "üá®üá≥ <code>CNY</code> - –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å\n"
            "üá¨üáß <code>GBP</code> - –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç\n"
            "üáØüáµ <code>JPY</code> - –Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞\n"
            "üá®üá≠ <code>CHF</code> - –®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫\n"
            "üá®üá¶ <code>CAD</code> - –ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä\n"
            "üá¶üá∫ <code>AUD</code> - –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä\n\n"
            "üìä <b>–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –¶–ë –†–§</b>"
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        amount_str, from_currency, to_currency = context.args
        amount = float(amount_str)
        from_currency = from_currency.upper()
        to_currency = to_currency.upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—É–º–º—ã
        if amount <= 0:
            await update.message.reply_html("‚ùå <b>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!</b>")
            return
            
        if amount > 1_000_000_000:
            await update.message.reply_html("‚ùå <b>–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞! –ú–∞–∫—Å–∏–º—É–º 1 –º–∏–ª–ª–∏–∞—Ä–¥.</b>")
            return
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
        supported_currencies = ['RUB', 'USD', 'EUR', 'CNY', 'GBP', 'JPY', 'CHF', 'CAD', 'AUD']
        if from_currency not in supported_currencies or to_currency not in supported_currencies:
            await update.message.reply_html(
                f"‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞!</b>\n\n"
                f"üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ:</b> {', '.join(supported_currencies)}\n"
                f"üö´ <b>–ü–æ–ª—É—á–µ–Ω–æ:</b> {from_currency} ‚Üí {to_currency}"
            )
            return
            
        # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–¥–Ω—É –∏ —Ç—É –∂–µ –≤–∞–ª—é—Ç—É
        if from_currency == to_currency:
            await update.message.reply_html(
                f"üí± <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò</b>\n\n"
                f"üí∞ <b>{amount:,.2f} {from_currency} = {amount:,.2f} {to_currency}</b>\n\n"
                f"üí° –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ç—É –∂–µ –≤–∞–ª—é—Ç—É üòä"
            )
            return
        
        loading_msg = await update.message.reply_html("üí± <b>–ü–æ–ª—É—á–∞—é –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...</b>")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§
        import requests
        
        cbr_response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
        cbr_response.raise_for_status()
        cbr_data = cbr_response.json()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫—É—Ä—Å–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä—É–±–ª—è
        rates = {
            'RUB': 1.0,  # –†—É–±–ª—å –∫–∞–∫ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            'USD': cbr_data.get('Valute', {}).get('USD', {}).get('Value', 0),
            'EUR': cbr_data.get('Valute', {}).get('EUR', {}).get('Value', 0),
            'CNY': cbr_data.get('Valute', {}).get('CNY', {}).get('Value', 0),
            'GBP': cbr_data.get('Valute', {}).get('GBP', {}).get('Value', 0),
            'JPY': cbr_data.get('Valute', {}).get('JPY', {}).get('Value', 0),
            'CHF': cbr_data.get('Valute', {}).get('CHF', {}).get('Value', 0),
            'CAD': cbr_data.get('Valute', {}).get('CAD', {}).get('Value', 0),
            'AUD': cbr_data.get('Valute', {}).get('AUD', {}).get('Value', 0)
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫—É—Ä—Å—ã
        if not rates[from_currency] or not rates[to_currency]:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä—É–±–ª–∏
        if from_currency == 'RUB':
            # –ò–∑ —Ä—É–±–ª–µ–π –≤ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É
            result = amount / rates[to_currency]
        elif to_currency == 'RUB':
            # –ò–∑ –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç—ã –≤ —Ä—É–±–ª–∏
            result = amount * rates[from_currency]
        else:
            # –ú–µ–∂–¥—É –¥–≤—É–º—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏ —á–µ—Ä–µ–∑ —Ä—É–±–ª–∏
            rub_amount = amount * rates[from_currency]
            result = rub_amount / rates[to_currency]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∞–ª—é—Ç
        currency_emoji = {
            'RUB': 'üá∑üá∫',
            'USD': 'üá∫üá∏', 
            'EUR': 'üá™üá∫',
            'CNY': 'üá®üá≥',
            'GBP': 'üá¨üáß',
            'JPY': 'üáØüáµ',
            'CHF': 'üá®üá≠',
            'CAD': 'üá®üá¶',
            'AUD': 'üá¶üá∫'
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
        
        result_text = f"üí± <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò</b>\n\n"
        result_text += f"{currency_emoji[from_currency]} <b>{amount:,.2f} {from_currency}</b>\n"
        result_text += f"                    ‚¨áÔ∏è\n"
        result_text += f"{currency_emoji[to_currency]} <b>{result:,.2f} {to_currency}</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å
        if from_currency == 'RUB':
            rate_display = f"1 {to_currency} = {rates[to_currency]:.4f} RUB"
        elif to_currency == 'RUB':
            rate_display = f"1 {from_currency} = {rates[from_currency]:.4f} RUB"
        else:
            cross_rate = rates[from_currency] / rates[to_currency]
            rate_display = f"1 {from_currency} = {cross_rate:.4f} {to_currency}"
        
        result_text += f"üìä <b>–ö—É—Ä—Å:</b> {rate_display}\n"
        result_text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time} (–ú–°–ö)\n"
        result_text += f"üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –¶–ë –†–§\n\n"
        result_text += f"üí° <b>–î—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
        result_text += f"<code>/convert 1000 {to_currency} {from_currency}</code>\n"
        result_text += f"<code>/convert {amount} {from_currency} EUR</code>"
        
        await loading_msg.edit_text(result_text, parse_mode='HTML')
        
    except ValueError:
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!</b>\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:</b>\n"
            "‚Ä¢ <code>/convert 100 USD RUB</code>\n"
            "‚Ä¢ <code>/convert 50.5 EUR CNY</code>\n"
            "‚Ä¢ <code>/convert 1000 RUB USD</code>"
        )
    except Exception as e:
        error_text = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç</b>\n\n"
            f"üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {str(e)}\n\n"
            f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API –¶–ë –†–§\n"
            f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å–µ—Ç–∏\n"
            f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
            f"üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
            f"/rates - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"
        )
        
        if 'loading_msg' in locals():
            await loading_msg.edit_text(error_text, parse_mode='HTML')
        else:
            await update.message.reply_html(error_text)
        
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç: {e}")

async def compare_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç - /compare [–∞–∫—Ç–∏–≤1] [–∞–∫—Ç–∏–≤2]"""
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'username': user.username,
            'first_seen': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat()
        }
        save_user_data()
    else:
        user_data[user_id]['last_activity'] = datetime.now().isoformat()
        save_user_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if len(context.args) != 2:
        await update.message.reply_html(
            "‚öñÔ∏è <b>–°–†–ê–í–ù–ï–ù–ò–ï –ê–ö–¢–ò–í–û–í</b>\n\n"
            "üîç <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/compare [–∞–∫—Ç–∏–≤1] [–∞–∫—Ç–∏–≤2]</code>\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "<b>–í–∞–ª—é—Ç—ã:</b>\n"
            "‚Ä¢ <code>/compare USD EUR</code> - –¥–æ–ª–ª–∞—Ä vs –µ–≤—Ä–æ\n"
            "‚Ä¢ <code>/compare GBP JPY</code> - —Ñ—É–Ω—Ç vs –∏–µ–Ω–∞\n"
            "‚Ä¢ <code>/compare RUB CNY</code> - —Ä—É–±–ª—å vs —é–∞–Ω—å\n\n"
            "<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n"
            "‚Ä¢ <code>/compare BTC ETH</code> - Bitcoin vs Ethereum\n"
            "‚Ä¢ <code>/compare ETH TON</code> - Ethereum vs TON\n"
            "‚Ä¢ <code>/compare BTC DOGE</code> - Bitcoin vs Dogecoin\n\n"
            "üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã:</b>\n"
            "<b>–í–∞–ª—é—Ç—ã:</b> RUB, USD, EUR, CNY, GBP, JPY, CHF, CAD, AUD\n"
            "<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b> BTC, ETH, DOGE, TON\n\n"
            "üìä <b>–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ</b>"
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        asset1, asset2 = context.args
        asset1 = asset1.upper()
        asset2 = asset2.upper()
        
        # –ï—Å–ª–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∞–∫—Ç–∏–≤
        if asset1 == asset2:
            await update.message.reply_html(
                f"‚öñÔ∏è <b>–°–†–ê–í–ù–ï–ù–ò–ï –ê–ö–¢–ò–í–û–í</b>\n\n"
                f"üí° <b>{asset1} = {asset2}</b>\n\n"
                f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π üòä\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã!"
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã
        currencies = ['RUB', 'USD', 'EUR', 'CNY', 'GBP', 'JPY', 'CHF', 'CAD', 'AUD']
        crypto_assets = ['BTC', 'ETH', 'DOGE', 'TON']
        all_assets = currencies + crypto_assets
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫—Ç–∏–≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
        if asset1 not in all_assets or asset2 not in all_assets:
            unsupported = []
            if asset1 not in all_assets:
                unsupported.append(asset1)
            if asset2 not in all_assets:
                unsupported.append(asset2)
                
            await update.message.reply_html(
                f"‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã!</b>\n\n"
                f"üö´ <b>–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:</b> {', '.join(unsupported)}\n\n"
                f"üí∞ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n{', '.join(currencies)}\n\n"
                f"‚Çø <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n{', '.join(crypto_assets)}\n\n"
                f"üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b> <code>/compare BTC ETH</code>"
            )
            return
        
        loading_msg = await update.message.reply_html("‚öñÔ∏è <b>–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...</b>")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        import requests
        
        # –î–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§
        currency_data = {}
        if asset1 in currencies or asset2 in currencies:
            try:
                cbr_response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
                cbr_response.raise_for_status()
                cbr_data = cbr_response.json()
                
                currency_data = {
                    'RUB': {'value': 1.0, 'name': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', 'flag': 'üá∑üá∫'},
                    'USD': {'value': cbr_data.get('Valute', {}).get('USD', {}).get('Value', 0), 'name': '–î–æ–ª–ª–∞—Ä –°–®–ê', 'flag': 'üá∫üá∏'},
                    'EUR': {'value': cbr_data.get('Valute', {}).get('EUR', {}).get('Value', 0), 'name': '–ï–≤—Ä–æ', 'flag': 'üá™üá∫'},
                    'CNY': {'value': cbr_data.get('Valute', {}).get('CNY', {}).get('Value', 0), 'name': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', 'flag': 'üá®üá≥'},
                    'GBP': {'value': cbr_data.get('Valute', {}).get('GBP', {}).get('Value', 0), 'name': '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç', 'flag': 'üá¨üáß'},
                    'JPY': {'value': cbr_data.get('Valute', {}).get('JPY', {}).get('Value', 0), 'name': '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞', 'flag': 'üáØüáµ'},
                    'CHF': {'value': cbr_data.get('Valute', {}).get('CHF', {}).get('Value', 0), 'name': '–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫', 'flag': 'üá®üá≠'},
                    'CAD': {'value': cbr_data.get('Valute', {}).get('CAD', {}).get('Value', 0), 'name': '–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', 'flag': 'üá®üá¶'},
                    'AUD': {'value': cbr_data.get('Valute', {}).get('AUD', {}).get('Value', 0), 'name': '–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', 'flag': 'üá¶üá∫'}
                }
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç")
        
        # –î–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ—Ç CoinGecko
        crypto_data = {}
        if asset1 in crypto_assets or asset2 in crypto_assets:
            try:
                crypto_response = requests.get(
                    "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,dogecoin,the-open-network&vs_currencies=usd&include_24hr_change=true&include_market_cap=true",
                    timeout=10
                )
                crypto_response.raise_for_status()
                crypto_json = crypto_response.json()
                
                crypto_data = {
                    'BTC': {
                        'value': crypto_json.get('bitcoin', {}).get('usd', 0),
                        'change': crypto_json.get('bitcoin', {}).get('usd_24h_change', 0),
                        'market_cap': crypto_json.get('bitcoin', {}).get('usd_market_cap', 0),
                        'name': 'Bitcoin',
                        'emoji': 'üü†'
                    },
                    'ETH': {
                        'value': crypto_json.get('ethereum', {}).get('usd', 0),
                        'change': crypto_json.get('ethereum', {}).get('usd_24h_change', 0),
                        'market_cap': crypto_json.get('ethereum', {}).get('usd_market_cap', 0),
                        'name': 'Ethereum',
                        'emoji': 'üî∑'
                    },
                    'DOGE': {
                        'value': crypto_json.get('dogecoin', {}).get('usd', 0),
                        'change': crypto_json.get('dogecoin', {}).get('usd_24h_change', 0),
                        'market_cap': crypto_json.get('dogecoin', {}).get('usd_market_cap', 0),
                        'name': 'Dogecoin',
                        'emoji': 'üêï'
                    },
                    'TON': {
                        'value': crypto_json.get('the-open-network', {}).get('usd', 0),
                        'change': crypto_json.get('the-open-network', {}).get('usd_24h_change', 0),
                        'market_cap': crypto_json.get('the-open-network', {}).get('usd_market_cap', 0),
                        'name': 'TON',
                        'emoji': 'üíé'
                    }
                }
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
        result_text = f"‚öñÔ∏è <b>–°–†–ê–í–ù–ï–ù–ò–ï –ê–ö–¢–ò–í–û–í</b>\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
        def get_asset_info(asset):
            if asset in currencies:
                data = currency_data[asset]
                return {
                    'type': 'currency',
                    'symbol': data['flag'],
                    'name': data['name'],
                    'value_rub': data['value'],
                    'code': asset
                }
            else:
                data = crypto_data[asset]
                return {
                    'type': 'crypto',
                    'symbol': data['emoji'],
                    'name': data['name'],
                    'value_usd': data['value'],
                    'change_24h': data['change'],
                    'market_cap': data['market_cap'],
                    'code': asset
                }
        
        info1 = get_asset_info(asset1)
        info2 = get_asset_info(asset2)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–æ–≤
        result_text += f"{info1['symbol']} <b>{info1['name']} ({asset1})</b>\n"
        
        if info1['type'] == 'currency':
            if asset1 == 'RUB':
                result_text += f"üí∞ –ö—É—Ä—Å: 1.00 ‚ÇΩ (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)\n"
            else:
                result_text += f"üí∞ –ö—É—Ä—Å: {info1['value_rub']:.4f} ‚ÇΩ\n"
        else:
            change_emoji = "üìà" if info1['change_24h'] > 0 else "üìâ" if info1['change_24h'] < 0 else "‚û°Ô∏è"
            result_text += f"üí∞ –¶–µ–Ω–∞: ${info1['value_usd']:,.2f}\n"
            result_text += f"üìä 24—á: {info1['change_24h']:+.2f}% {change_emoji}\n"
            if info1['market_cap'] > 0:
                market_cap_b = info1['market_cap'] / 1_000_000_000
                result_text += f"üèõÔ∏è –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${market_cap_b:.1f}B\n"
        
        result_text += f"\n              üÜö\n\n"
        
        result_text += f"{info2['symbol']} <b>{info2['name']} ({asset2})</b>\n"
        
        if info2['type'] == 'currency':
            if asset2 == 'RUB':
                result_text += f"üí∞ –ö—É—Ä—Å: 1.00 ‚ÇΩ (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)\n"
            else:
                result_text += f"üí∞ –ö—É—Ä—Å: {info2['value_rub']:.4f} ‚ÇΩ\n"
        else:
            change_emoji = "üìà" if info2['change_24h'] > 0 else "üìâ" if info2['change_24h'] < 0 else "‚û°Ô∏è"
            result_text += f"üí∞ –¶–µ–Ω–∞: ${info2['value_usd']:,.2f}\n"
            result_text += f"üìä 24—á: {info2['change_24h']:+.2f}% {change_emoji}\n"
            if info2['market_cap'] > 0:
                market_cap_b = info2['market_cap'] / 1_000_000_000
                result_text += f"üèõÔ∏è –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${market_cap_b:.1f}B\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        result_text += f"\nüìä <b>–ê–ù–ê–õ–ò–ó –°–†–ê–í–ù–ï–ù–ò–Ø:</b>\n"
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç
        if info1['type'] == 'currency' and info2['type'] == 'currency':
            if asset1 == 'RUB':
                rate = 1 / info2['value_rub']
                result_text += f"‚Ä¢ 1 {asset2} = {info2['value_rub']:.4f} {asset1}\n"
                result_text += f"‚Ä¢ 1 {asset1} = {rate:.4f} {asset2}\n"
            elif asset2 == 'RUB':
                rate = 1 / info1['value_rub']
                result_text += f"‚Ä¢ 1 {asset1} = {info1['value_rub']:.4f} {asset2}\n"
                result_text += f"‚Ä¢ 1 {asset2} = {rate:.4f} {asset1}\n"
            else:
                cross_rate = info1['value_rub'] / info2['value_rub']
                reverse_rate = info2['value_rub'] / info1['value_rub']
                result_text += f"‚Ä¢ 1 {asset1} = {cross_rate:.4f} {asset2}\n"
                result_text += f"‚Ä¢ 1 {asset2} = {reverse_rate:.4f} {asset1}\n"
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        elif info1['type'] == 'crypto' and info2['type'] == 'crypto':
            ratio = info1['value_usd'] / info2['value_usd'] if info2['value_usd'] > 0 else 0
            reverse_ratio = info2['value_usd'] / info1['value_usd'] if info1['value_usd'] > 0 else 0
            
            result_text += f"‚Ä¢ 1 {asset1} = {ratio:.4f} {asset2}\n"
            result_text += f"‚Ä¢ 1 {asset2} = {reverse_ratio:.4f} {asset1}\n"
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏
            if abs(info1['change_24h']) > abs(info2['change_24h']):
                result_text += f"‚Ä¢ {asset1} –±–æ–ª–µ–µ –≤–æ–ª–∞—Ç–∏–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è\n"
            elif abs(info2['change_24h']) > abs(info1['change_24h']):
                result_text += f"‚Ä¢ {asset2} –±–æ–ª–µ–µ –≤–æ–ª–∞—Ç–∏–ª–µ–Ω —Å–µ–≥–æ–¥–Ω—è\n"
            else:
                result_text += f"‚Ä¢ –ü–æ—Ö–æ–∂–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n"
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            if info1['market_cap'] > info2['market_cap'] * 2:
                result_text += f"‚Ä¢ {asset1} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∫—Ä—É–ø–Ω–µ–µ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n"
            elif info2['market_cap'] > info1['market_cap'] * 2:
                result_text += f"‚Ä¢ {asset2} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∫—Ä—É–ø–Ω–µ–µ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n"
            else:
                result_text += f"‚Ä¢ –°–æ–ø–æ—Å—Ç–∞–≤–∏–º—ã–µ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏\n"
        
        # –°–º–µ—à–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–≤–∞–ª—é—Ç–∞ vs –∫—Ä–∏–ø—Ç–æ)
        else:
            result_text += f"‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
            result_text += f"‚Ä¢ –†–∞–∑–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∞–∫—Ç–∏–≤–æ–≤\n"
            result_text += f"‚Ä¢ –†–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n"
        
        result_text += f"\n‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time} (–ú–°–ö)\n"
        result_text += f"üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> "
        
        sources = []
        if any(info['type'] == 'currency' for info in [info1, info2]):
            sources.append("–¶–ë –†–§")
        if any(info['type'] == 'crypto' for info in [info1, info2]):
            sources.append("CoinGecko")
        
        result_text += ", ".join(sources)
        
        result_text += f"\n\nüí° <b>–î—Ä—É–≥–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:</b>\n"
        result_text += f"<code>/compare BTC ETH</code>\n"
        result_text += f"<code>/compare USD EUR</code>"
        
        await loading_msg.edit_text(result_text, parse_mode='HTML')
        
    except Exception as e:
        error_text = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤</b>\n\n"
            f"üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {str(e)}\n\n"
            f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API (–¶–ë –†–§ –∏–ª–∏ CoinGecko)\n"
            f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å–µ—Ç–∏\n"
            f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
            f"üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
            f"/rates - –ø—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–æ–≤\n"
            f"/convert - –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"
        )
        
        if 'loading_msg' in locals():
            await loading_msg.edit_text(error_text, parse_mode='HTML')
        else:
            await update.message.reply_html(error_text)
        
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤: {e}")

async def trending_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢—Ä–µ–Ω–¥—ã –¥–Ω—è - –ª–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞ –∏ –ø–∞–¥–µ–Ω–∏—è /trending"""
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'username': user.username,
            'first_seen': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat()
        }
        save_user_data()
    else:
        user_data[user_id]['last_activity'] = datetime.now().isoformat()
        save_user_data()
    
    loading_msg = await update.message.reply_html("üî• <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞...</b>")
    
    try:
        import requests
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∑–∞ 24—á
        crypto_response = requests.get(
            "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,dogecoin,the-open-network&vs_currencies=usd&include_24hr_change=true&include_market_cap=true",
            timeout=10
        )
        crypto_response.raise_for_status()
        crypto_data = crypto_response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (–æ–Ω–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –ø–æ—ç—Ç–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏)
        cbr_response = requests.get("https://www.cbr-xml-daily.ru/daily_json.js", timeout=10)
        cbr_response.raise_for_status()
        cbr_data = cbr_response.json()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        crypto_assets = []
        
        bitcoin_data = crypto_data.get('bitcoin', {})
        if bitcoin_data:
            crypto_assets.append({
                'symbol': 'BTC',
                'name': 'Bitcoin',
                'emoji': 'üü†',
                'price': bitcoin_data.get('usd', 0),
                'change_24h': bitcoin_data.get('usd_24h_change', 0),
                'market_cap': bitcoin_data.get('usd_market_cap', 0)
            })
        
        ethereum_data = crypto_data.get('ethereum', {})
        if ethereum_data:
            crypto_assets.append({
                'symbol': 'ETH',
                'name': 'Ethereum',
                'emoji': 'üî∑',
                'price': ethereum_data.get('usd', 0),
                'change_24h': ethereum_data.get('usd_24h_change', 0),
                'market_cap': ethereum_data.get('usd_market_cap', 0)
            })
        
        dogecoin_data = crypto_data.get('dogecoin', {})
        if dogecoin_data:
            crypto_assets.append({
                'symbol': 'DOGE',
                'name': 'Dogecoin',
                'emoji': 'üêï',
                'price': dogecoin_data.get('usd', 0),
                'change_24h': dogecoin_data.get('usd_24h_change', 0),
                'market_cap': dogecoin_data.get('usd_market_cap', 0)
            })
        
        ton_data = crypto_data.get('the-open-network', {})
        if ton_data:
            crypto_assets.append({
                'symbol': 'TON',
                'name': 'TON',
                'emoji': 'üíé',
                'price': ton_data.get('usd', 0),
                'change_24h': ton_data.get('usd_24h_change', 0),
                'market_cap': ton_data.get('usd_market_cap', 0)
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∑–∞ 24—á
        crypto_assets.sort(key=lambda x: x['change_24h'], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –≤–∞–ª—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã, –Ω–æ –ø–æ–∫–∞–∂–µ–º –∫—É—Ä—Å—ã)
        currency_assets = []
        
        currencies_info = {
            'USD': {'name': '–î–æ–ª–ª–∞—Ä –°–®–ê', 'flag': 'üá∫üá∏', 'rate': cbr_data.get('Valute', {}).get('USD', {}).get('Value', 0)},
            'EUR': {'name': '–ï–≤—Ä–æ', 'flag': 'üá™üá∫', 'rate': cbr_data.get('Valute', {}).get('EUR', {}).get('Value', 0)},
            'GBP': {'name': '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç', 'flag': 'üá¨üáß', 'rate': cbr_data.get('Valute', {}).get('GBP', {}).get('Value', 0)},
            'CNY': {'name': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', 'flag': 'üá®üá≥', 'rate': cbr_data.get('Valute', {}).get('CNY', {}).get('Value', 0)},
            'JPY': {'name': '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞', 'flag': 'üáØüáµ', 'rate': cbr_data.get('Valute', {}).get('JPY', {}).get('Value', 0)}
        }
        
        for symbol, info in currencies_info.items():
            if info['rate']:
                currency_assets.append({
                    'symbol': symbol,
                    'name': info['name'],
                    'flag': info['flag'],
                    'rate': info['rate']
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
        result_text = f"üî• <b>–¢–†–ï–ù–î–´ –î–ù–Ø</b>\n\n"
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
        result_text += f"‚Çø <b>–ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ (24 —á–∞—Å–∞):</b>\n\n"
        
        if crypto_assets:
            # –õ–∏–¥–µ—Ä —Ä–æ—Å—Ç–∞
            best_crypto = crypto_assets[0]
            if best_crypto['change_24h'] > 0:
                result_text += f"üìà <b>–õ–ò–î–ï–† –†–û–°–¢–ê:</b>\n"
                result_text += f"{best_crypto['emoji']} <b>{best_crypto['name']} ({best_crypto['symbol']})</b>\n"
                result_text += f"üí∞ ${best_crypto['price']:,.2f}\n"
                result_text += f"üöÄ <b>+{best_crypto['change_24h']:.2f}%</b> üìà\n"
                if best_crypto['market_cap'] > 0:
                    cap_b = best_crypto['market_cap'] / 1_000_000_000
                    result_text += f"üèõÔ∏è ${cap_b:.1f}B\n"
                result_text += f"\n"
            
            # –õ–∏–¥–µ—Ä –ø–∞–¥–µ–Ω–∏—è  
            worst_crypto = crypto_assets[-1]
            if worst_crypto['change_24h'] < 0:
                result_text += f"üìâ <b>–õ–ò–î–ï–† –ü–ê–î–ï–ù–ò–Ø:</b>\n"
                result_text += f"{worst_crypto['emoji']} <b>{worst_crypto['name']} ({worst_crypto['symbol']})</b>\n"
                result_text += f"üí∞ ${worst_crypto['price']:,.2f}\n"
                result_text += f"üî¥ <b>{worst_crypto['change_24h']:.2f}%</b> üìâ\n"
                if worst_crypto['market_cap'] > 0:
                    cap_b = worst_crypto['market_cap'] / 1_000_000_000
                    result_text += f"üèõÔ∏è ${cap_b:.1f}B\n"
                result_text += f"\n"
            
            # –í—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
            result_text += f"üìä <b>–í–°–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´:</b>\n"
            for i, asset in enumerate(crypto_assets, 1):
                change = asset['change_24h']
                if change > 0:
                    change_emoji = "üìà"
                    change_str = f"+{change:.2f}%"
                    change_color = "üü¢"
                elif change < 0:
                    change_emoji = "üìâ"
                    change_str = f"{change:.2f}%"
                    change_color = "üî¥"
                else:
                    change_emoji = "‚û°Ô∏è"
                    change_str = "0.00%"
                    change_color = "‚ö™"
                
                result_text += f"{i}. {asset['emoji']} <b>{asset['symbol']}</b> {change_color} {change_str} {change_emoji}\n"
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑
        if crypto_assets:
            volatilities = [abs(asset['change_24h']) for asset in crypto_assets]
            max_volatility = max(volatilities)
            most_volatile = next(asset for asset in crypto_assets if abs(asset['change_24h']) == max_volatility)
            
            result_text += f"\nüå°Ô∏è <b>–í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨:</b>\n"
            result_text += f"üî• –°–∞–º—ã–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π: <b>{most_volatile['symbol']}</b> (¬±{max_volatility:.2f}%)\n"
            
            # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            avg_volatility = sum(volatilities) / len(volatilities)
            result_text += f"üìä –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {avg_volatility:.2f}%\n"
        
        # –í–∞–ª—é—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è
        result_text += f"\nüí± <b>–û–°–ù–û–í–ù–´–ï –í–ê–õ–Æ–¢–´ (–¶–ë –†–§):</b>\n"
        
        if currency_assets:
            for i, currency in enumerate(currency_assets[:5], 1):
                if currency['symbol'] == 'JPY':
                    rate_str = f"{currency['rate']:.4f} ‚ÇΩ"
                else:
                    rate_str = f"{currency['rate']:.2f} ‚ÇΩ"
                
                result_text += f"{i}. {currency['flag']} <b>{currency['symbol']}</b> - {rate_str}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        result_text += f"\nüéØ <b>–†–´–ù–û–ß–ù–ê–Ø –°–í–û–î–ö–ê:</b>\n"
        
        if crypto_assets:
            positive_count = sum(1 for asset in crypto_assets if asset['change_24h'] > 0)
            negative_count = sum(1 for asset in crypto_assets if asset['change_24h'] < 0)
            
            if positive_count > negative_count:
                result_text += f"‚úÖ –†—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: <b>–†–∞—Å—Ç—É—â–∏–π</b> ({positive_count} —Ä–∞—Å—Ç—É—Ç, {negative_count} –ø–∞–¥–∞—é—Ç)\n"
            elif negative_count > positive_count:
                result_text += f"‚ùå –†—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: <b>–ü–∞–¥–∞—é—â–∏–π</b> ({negative_count} –ø–∞–¥–∞—é—Ç, {positive_count} —Ä–∞—Å—Ç—É—Ç)\n"
            else:
                result_text += f"‚öñÔ∏è –†—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: <b>–°–º–µ—à–∞–Ω–Ω—ã–π</b> ({positive_count} —Ä–∞—Å—Ç—É—Ç, {negative_count} –ø–∞–¥–∞—é—Ç)\n"
            
            # –û–±—â–∏–π —Ç—Ä–µ–Ω–¥
            avg_change = sum(asset['change_24h'] for asset in crypto_assets) / len(crypto_assets)
            if avg_change > 1:
                result_text += f"üìà –û–±—â–∏–π —Ç—Ä–µ–Ω–¥: <b>–°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç</b> (+{avg_change:.2f}%)\n"
            elif avg_change > 0:
                result_text += f"üìà –û–±—â–∏–π —Ç—Ä–µ–Ω–¥: <b>–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç</b> (+{avg_change:.2f}%)\n"
            elif avg_change < -1:
                result_text += f"üìâ –û–±—â–∏–π —Ç—Ä–µ–Ω–¥: <b>–°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ</b> ({avg_change:.2f}%)\n"
            elif avg_change < 0:
                result_text += f"üìâ –û–±—â–∏–π —Ç—Ä–µ–Ω–¥: <b>–£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ</b> ({avg_change:.2f}%)\n"
            else:
                result_text += f"‚û°Ô∏è –û–±—â–∏–π —Ç—Ä–µ–Ω–¥: <b>–ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ</b> ({avg_change:.2f}%)\n"
        
        result_text += f"\n‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time} (–ú–°–ö)\n"
        result_text += f"üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b> CoinGecko, –¶–ë –†–§\n\n"
        result_text += f"üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:</b>\n"
        result_text += f"<code>/compare BTC ETH</code> - —Å—Ä–∞–≤–Ω–∏—Ç—å –∞–∫—Ç–∏–≤—ã\n"
        result_text += f"<code>/rates</code> - —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã"
        
        await loading_msg.edit_text(result_text, parse_mode='HTML')
        
    except Exception as e:
        error_text = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤</b>\n\n"
            f"üö´ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {str(e)}\n\n"
            f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API CoinGecko –∏–ª–∏ –¶–ë –†–§\n"
            f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å–µ—Ç–∏\n"
            f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –±–∏—Ä–∂–∞—Ö\n\n"
            f"üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
            f"/rates - —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã\n"
            f"/compare BTC ETH - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤"
        )
        
        await loading_msg.edit_text(error_text, parse_mode='HTML')
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_user_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("ping", ping_command))
    application.add_handler(CommandHandler("my_id", my_id_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("rates", rates_command))
    application.add_handler(CommandHandler("convert", convert_command))
    application.add_handler(CommandHandler("compare", compare_command))
    application.add_handler(CommandHandler("trending", trending_command))
    application.add_handler(CommandHandler("fix_admin_id", fix_admin_id_command))
    application.add_handler(CommandHandler("stocks", stocks_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—ç—Ö–æ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 