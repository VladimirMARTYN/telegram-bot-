#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏
"""

import asyncio
import os
from datetime import datetime
import pytz
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ admin_bot
import sys
sys.path.append('.')

from admin_bot import (
    get_indices_data,
    get_moex_stocks,
    get_commodities_data
)

async def test_weekend_data():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    moscow_tz = pytz.timezone('Europe/Moscow')
    current_moscow = datetime.now(moscow_tz)
    is_weekend = current_moscow.weekday() >= 5
    
    print(f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_moscow.strftime('%H:%M:%S %d.%m.%Y')}")
    print(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {current_moscow.strftime('%A')}")
    print(f"üìÖ –í—ã—Ö–æ–¥–Ω–æ–π: {'–î–∞' if is_weekend else '–ù–µ—Ç'}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤:")
    print("-" * 30)
    indices_data = await get_indices_data()
    
    for index_name, data in indices_data.items():
        name = data.get('name', index_name)
        price = data.get('price')
        is_live = data.get('is_live', True)
        note = data.get('note', '')
        
        if price is not None:
            status = "üü¢ –ñ–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ" if is_live else "üü° –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ"
            print(f"   {name}: {price} {status}")
        else:
            print(f"   {name}: üî¥ –¢–æ—Ä–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã {note}")
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫—Ü–∏–∏
    print("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–π:")
    print("-" * 30)
    stocks_data = await get_moex_stocks()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    sample_stocks = ['SBER', 'YDEX', 'GAZP', 'PIKK']
    
    for ticker in sample_stocks:
        if ticker in stocks_data:
            data = stocks_data[ticker]
            name = data.get('name', ticker)
            price = data.get('price')
            is_live = data.get('is_live', True)
            note = data.get('note', '')
            
            if price is not None:
                status = "üü¢ –ñ–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ" if is_live else "üü° –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ"
                print(f"   {name}: {price} ‚ÇΩ {status}")
            else:
                print(f"   {name}: üî¥ –¢–æ—Ä–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã {note}")
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã (–¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞)
    print("üõ†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:")
    print("-" * 30)
    commodities_data = await get_commodities_data()
    
    for commodity_name, data in commodities_data.items():
        name = data.get('name', commodity_name)
        price = data.get('price')
        if price is not None:
            print(f"   {name}: ${price}")
        else:
            print(f"   {name}: ‚ùå –ù/–î")
    
    print()
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_weekend_data())
    
    print("\n" + "=" * 60)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤")
    print("‚Ä¢ –ê–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º")
    print("‚Ä¢ –¢–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞")
    print("‚Ä¢ S&P 500 –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞")

if __name__ == '__main__':
    main() 