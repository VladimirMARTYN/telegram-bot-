#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
from flask_socketio import SocketIO, emit
import json
import os
import threading
import time
from datetime import datetime, timedelta
import pytz
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('WEB_SECRET_KEY', 'your-secret-key-here')
socketio = SocketIO(app, cors_allowed_origins="*")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
bot_status = {
    'is_running': False,
    'last_activity': None,
    'users_count': 0,
    'notifications_count': 0,
    'alerts_count': 0,
    'uptime': None,
    'start_time': None
}

def serialize_bot_status():
    """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç bot_status –¥–ª—è JSON"""
    status = bot_status.copy()
    if status['start_time']:
        status['start_time'] = status['start_time'].isoformat()
    if status['last_activity']:
        status['last_activity'] = status['last_activity']
    return status

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –±–æ—Ç–∞
def load_bot_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
    data = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        with open('notifications.json', 'r', encoding='utf-8') as f:
            users_data = json.load(f)
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if isinstance(users_data, list):
                data['users'] = users_data
            else:
                data['users'] = []
    except (FileNotFoundError, json.JSONDecodeError):
        data['users'] = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    try:
        with open('bot_settings.json', 'r', encoding='utf-8') as f:
            settings_data = json.load(f)
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            if isinstance(settings_data, dict):
                data['settings'] = settings_data
            else:
                data['settings'] = {}
    except (FileNotFoundError, json.JSONDecodeError):
        data['settings'] = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
    try:
        with open('price_history.json', 'r', encoding='utf-8') as f:
            history_data = json.load(f)
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            if isinstance(history_data, dict):
                data['price_history'] = history_data
            else:
                data['price_history'] = {}
    except (FileNotFoundError, json.JSONDecodeError):
        data['price_history'] = {}
    
    return data

def save_bot_data(data_type, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –≤ JSON —Ñ–∞–π–ª—ã"""
    if data_type == 'users':
        with open('notifications.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    elif data_type == 'settings':
        with open('bot_settings.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(moscow_tz)

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    bot_data = load_bot_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    bot_status['users_count'] = len(bot_data.get('users', []))
    bot_status['notifications_count'] = sum(1 for user in bot_data.get('users', []) if user.get('subscribed', False))
    bot_status['alerts_count'] = sum(len(user.get('alerts', [])) for user in bot_data.get('users', []))
    
    if bot_status['start_time']:
        uptime = datetime.now() - bot_status['start_time']
        bot_status['uptime'] = str(uptime).split('.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
    
    return render_template('dashboard.html', 
                         bot_status=bot_status, 
                         bot_data=bot_data,
                         current_time=get_moscow_time())

@app.route('/users')
def users():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    bot_data = load_bot_data()
    return render_template('users.html', 
                         users=bot_data.get('users', []),
                         current_time=get_moscow_time())

@app.route('/settings')
def settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    bot_data = load_bot_data()
    return render_template('settings.html', 
                         settings=bot_data.get('settings', {}),
                         current_time=get_moscow_time())

@app.route('/logs')
def logs():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤ –±–æ—Ç–∞"""
    return render_template('logs.html', current_time=get_moscow_time())

@app.route('/api/status')
def api_status():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    return jsonify(bot_status)

@app.route('/api/users')
def api_users():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    bot_data = load_bot_data()
    return jsonify(bot_data.get('users', []))

@app.route('/api/settings', methods=['GET', 'POST'])
def api_settings():
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    if request.method == 'POST':
        data = request.json
        bot_data = load_bot_data()
        bot_data['settings'].update(data)
        save_bot_data('settings', bot_data['settings'])
        return jsonify({'status': 'success'})
    
    bot_data = load_bot_data()
    return jsonify(bot_data.get('settings', {}))

@app.route('/api/user/<int:user_id>', methods=['DELETE'])
def api_delete_user(user_id):
    """API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    bot_data = load_bot_data()
    users = bot_data.get('users', [])
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = [user for user in users if user.get('user_id') != user_id]
    bot_data['users'] = users
    save_bot_data('users', users)
    
    return jsonify({'status': 'success'})

@app.route('/api/user/<int:user_id>/toggle_subscription', methods=['POST'])
def api_toggle_subscription(user_id):
    """API –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    bot_data = load_bot_data()
    users = bot_data.get('users', [])
    
    for user in users:
        if user.get('user_id') == user_id:
            user['subscribed'] = not user.get('subscribed', False)
            break
    
    save_bot_data('users', users)
    return jsonify({'status': 'success'})

# WebSocket —Å–æ–±—ã—Ç–∏—è
@socketio.on('connect')
def handle_connect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    print('Client connected')
    emit('status_update', serialize_bot_status())

@socketio.on('disconnect')
def handle_disconnect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    print('Client disconnected')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
def update_bot_status():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥"""
    while True:
        time.sleep(5)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
        bot_status['last_activity'] = get_moscow_time().strftime('%H:%M:%S')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        socketio.emit('status_update', serialize_bot_status())

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
def start_status_updater():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    thread = threading.Thread(target=update_bot_status, daemon=True)
    thread.start()

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    bot_status['start_time'] = datetime.now()
    bot_status['is_running'] = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    start_status_updater()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    print("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üìä –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5001")
    print("üîß API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5001/api/")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Railway)
    port = int(os.getenv('PORT', 5001))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ –Ω–∞ Railway
    socketio.run(app, host='0.0.0.0', port=port, debug=False) 