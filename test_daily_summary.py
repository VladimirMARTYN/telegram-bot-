#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏
"""

import os
import json
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ admin_bot.py
import sys
sys.path.append('.')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ admin_bot
from admin_bot import (
    load_notification_data, 
    save_notification_data,
    daily_summary_job,
    load_bot_settings
)

async def test_daily_summary():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = load_bot_settings()
    print(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    notifications = load_notification_data()
    print(f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(notifications)}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç
    admin_id = os.getenv('ADMIN_USER_ID')
    if not notifications:
        print("üìù –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞...")
        notifications[str(admin_id)] = {
            'subscribed': True,
            'daily_summary': True,
            'price_alerts': True,
            'alerts': {}
        }
        save_notification_data(notifications)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫ —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º mock context –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockBot:
        async def send_message(self, chat_id, text, parse_mode=None):
            print(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}:")
            print(f"   {text}")
            print("-" * 40)
    
    class MockContext:
        def __init__(self):
            self.bot = MockBot()
    
    mock_context = MockContext()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏...")
    try:
        await daily_summary_job(mock_context)
        print("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"üìã –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_daily_summary())
    
    print("\n" + "=" * 60)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    print("2. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö")
    print("3. –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

if __name__ == '__main__':
    main() 