import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    user = update.effective_user
    user_id = user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'name': user.first_name,
            'messages_count': 0,
            'registration_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
            InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ", callback_data='random'),
        ],
        [
            InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data='datetime'),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help'),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!

–Ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Telegram –±–æ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
    """
    
    await update.message.reply_html(welcome_text, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è
    
    user_id = query.from_user.id
    
    if query.data == 'stats':
        if user_id in user_data:
            stats_text = f"""
üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üë§ –ò–º—è: {user_data[user_id]['name']}
üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user_data[user_id]['messages_count']}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data[user_id]['registration_date']}
            """
        else:
            stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        await query.edit_message_text(stats_text, parse_mode='HTML')
        
    elif query.data == 'random':
        import random
        random_number = random.randint(1, 100)
        await query.edit_message_text(f"üé≤ –¢–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: <b>{random_number}</b>", parse_mode='HTML')
        
    elif query.data == 'datetime':
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        await query.edit_message_text(f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{current_time}</b>", parse_mode='HTML')
        
    elif query.data == 'help':
        help_text = """
‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/weather - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É (–ø—Ä–∏–º–µ—Ä)
/joke - –ü–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É
/count - –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π

<b>Inline –∫–Ω–æ–ø–∫–∏:</b>
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ - –æ—Ç 1 –¥–æ 100
üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        """
        await query.edit_message_text(help_text, parse_mode='HTML')

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –ø–æ–≥–æ–¥—ã (–∑–∞–≥–ª—É—à–∫–∞)"""
    await update.message.reply_text(
        "üå§ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
        "–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–∏ API –ø–æ–≥–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, OpenWeatherMap)"
    )

async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à—É—Ç–∫–∏"""
    jokes = [
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç iOS? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –ª—é–±—è—Ç Swift —Ä–µ—à–µ–Ω–∏—è! üòÑ",
        "- –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ª–∞–º–ø–æ—á–∫—É?\n- –ù–æ–ª—å, —ç—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞! üîß",
        "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—É—Å–∫–∞? –û—Ç–ª–∞–∂–µ–Ω–Ω—ã–π! üòé",
        "–£ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–≤–∞ —Ç–≤–µ—Ä–¥—ã—Ö —á–∏—Å–ª–∞: 0, 1 –∏ 2! ü§ì",
    ]
    
    import random
    joke = random.choice(jokes)
    await update.message.reply_text(f"üòÇ {joke}")

async def count_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    if user_id in user_data:
        count = user_data[user_id]['messages_count']
        await update.message.reply_text(f"üìä –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –º–Ω–µ {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        await update.message.reply_text("üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def echo_advanced(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —ç—Ö–æ-—Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    user_message = update.message.text
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id not in user_data:
        user_data[user_id] = {
            'name': update.effective_user.first_name,
            'messages_count': 0,
            'registration_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    
    user_data[user_id]['messages_count'] += 1
    
    # –†–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    message_lower = user_message.lower()
    
    if "–ø—Ä–∏–≤–µ—Ç" in message_lower or "hello" in message_lower:
        response = "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    elif "–ø–æ–∫–∞" in message_lower or "bye" in message_lower:
        response = "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–≤–∏–¥–∏–º—Å—è –ø–æ–∑–∂–µ!"
    elif "—Å–ø–∞—Å–∏–±–æ" in message_lower or "thanks" in message_lower:
        response = "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!"
    elif "?" in user_message:
        response = "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ù–æ —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞."
    else:
        responses = [
            f"‚úâÔ∏è –ü–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}'",
            f"üëç –ü–æ–Ω—è–ª! –¢—ã –Ω–∞–ø–∏—Å–∞–ª: {user_message}",
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {user_message}",
            f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ '{user_message}': –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
        ]
        import random
        response = random.choice(responses)
    
    await update.message.reply_text(response)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("Exception while handling an update:", exc_info=context.error)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("weather", weather_command))
    application.add_handler(CommandHandler("joke", joke_command))
    application.add_handler(CommandHandler("count", count_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_advanced))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 